
Bai2.elf:     file format elf32-littlenios2
Bai2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00001448 memsz 0x00001448 flags r-x
    LOAD off    0x00002468 vaddr 0x00009468 paddr 0x0000973c align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x00002a10 vaddr 0x00009a10 paddr 0x00009a10 align 2**12
         filesz 0x00000000 memsz 0x0000009c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00001414  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  00009434  00009434  00002434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000002d4  00009468  0000973c  00002468  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000009c  00009a10  00009a10  00002a10  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  0000273c  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003c8  00000000  00000000  00002768  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000535  00000000  00000000  00002b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000608e  00000000  00000000  00003065  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000016e6  00000000  00000000  000090f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000044e4  00000000  00000000  0000a7d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000061c  00000000  00000000  0000ecc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000098d  00000000  00000000  0000f2dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000099a  00000000  00000000  0000fc69  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00010604  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000038  00000000  00000000  00010618  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00011afd  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  00011b00  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00011b0c  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00011b0d  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  00011b0e  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  00011b19  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  00011b24  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000006  00000000  00000000  00011b2f  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000016  00000000  00000000  00011b35  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     00025ce9  00000000  00000000  00011b4b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .text	00000000 .text
00009434 l    d  .rodata	00000000 .rodata
00009468 l    d  .rwdata	00000000 .rwdata
00009a10 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 source.c
00000000 l    df *ABS*	00000000 alt_load.c
00008120 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00009468 l     O .rwdata	0000002c jtag_uart_0
0000825c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
000085ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00008668 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00008748 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000888c l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
000089dc l     F .text	000000f8 alt_file_locked
00008c60 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000091d8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 impure.c
0000963c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
000093d0 l     F .text	00000040 alt_sim_halt
0000818c g     F .text	0000006c alt_main
0000973c g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00009a1c g     O .bss	00000004 errno
00009a14 g     O .bss	00000004 alt_argv
0001171c g       *ABS*	00000000 _gp
000094bc g     O .rwdata	00000180 alt_fd_list
00008d58 g     F .text	00000094 alt_find_dev
00008964 g     F .text	00000078 alt_io_redirect
00009434 g       *ABS*	00000000 __DTOR_END__
00008344 g     F .text	00000104 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000972c g     O .rwdata	00000004 alt_max_fd
00009738 g     O .rwdata	00000004 _global_impure_ptr
00009aac g       *ABS*	00000000 __bss_end
00009494 g     O .rwdata	00000028 alt_dev_null
0000864c g     F .text	0000001c alt_dcache_flush_all
0000973c g       *ABS*	00000000 __ram_rwdata_end
00009724 g     O .rwdata	00000008 alt_dev_list
00009468 g       *ABS*	00000000 __ram_rodata_end
00009aac g       *ABS*	00000000 end
00009430 g       *ABS*	00000000 __CTOR_LIST__
00010000 g       *ABS*	00000000 __alt_stack_pointer
00008448 g     F .text	000000a4 altera_avalon_jtag_uart_write
000091dc g     F .text	000001bc __call_exitprocs
00008020 g     F .text	0000003c _start
0000822c g     F .text	00000030 alt_sys_init
0000906c g     F .text	0000016c __register_exitproc
00009398 g     F .text	00000038 __mulsi3
00009468 g       *ABS*	00000000 __ram_rwdata_start
00009434 g       *ABS*	00000000 __ram_rodata_start
00008294 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00008f0c g     F .text	000000d0 alt_get_fd
00009010 g     F .text	0000003c memcmp
00009aac g       *ABS*	00000000 __alt_stack_base
00008dec g     F .text	00000120 alt_find_file
00008694 g     F .text	000000b4 alt_dev_llist_insert
00009a10 g       *ABS*	00000000 __bss_start
0000805c g     F .text	00000044 main
00009a18 g     O .bss	00000004 alt_envp
000082ec g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00009a20 g     O .bss	0000008c _atexit0
00009730 g     O .rwdata	00000004 alt_errno
00009434 g       *ABS*	00000000 __CTOR_END__
00009434 g       *ABS*	00000000 __flash_rodata_start
00009434 g       *ABS*	00000000 __DTOR_LIST__
000081f8 g     F .text	00000034 alt_irq_init
00008cc0 g     F .text	00000078 alt_release_fd
00008fdc g     F .text	00000014 atexit
00009734 g     O .rwdata	00000004 _impure_ptr
00009a10 g     O .bss	00000004 alt_argc
0000880c g     F .text	00000064 _do_dtors
0000971c g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000973c g       *ABS*	00000000 _edata
00009aac g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00008d38 g     F .text	00000020 altera_nios2_qsys_irq_init
00008ff0 g     F .text	00000020 exit
00010000 g       *ABS*	00000000 __alt_data_end
00009410 g     F .text	00000020 _exit
0000904c g     F .text	00000020 strlen
00008ad4 g     F .text	0000018c open
00008870 g     F .text	0000001c alt_icache_flush_all
000087a8 g     F .text	00000064 _do_ctors
000084ec g     F .text	00000100 close
000080a0 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00008020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d685c714 	ori	gp,gp,5916
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a68414 	ori	r2,r2,39440

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e6ab14 	ori	r3,r3,39596

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	00080a00 	call	80a0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	000818c0 	call	818c <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <alt_after_alt_main>

0000805c <main>:
#include <stdio.h>
void main(){
    805c:	defffc04 	addi	sp,sp,-16
    8060:	df000315 	stw	fp,12(sp)
    8064:	df000304 	addi	fp,sp,12
int a;
int *b;
int c;
a = 3;
    8068:	008000c4 	movi	r2,3
    806c:	e0bfff15 	stw	r2,-4(fp)
b = &a;
    8070:	e0bfff04 	addi	r2,fp,-4
    8074:	e0bffe15 	stw	r2,-8(fp)
*b = 5;
    8078:	e0fffe17 	ldw	r3,-8(fp)
    807c:	00800144 	movi	r2,5
    8080:	18800015 	stw	r2,0(r3)
c = a + 4;
    8084:	e0bfff17 	ldw	r2,-4(fp)
    8088:	10800104 	addi	r2,r2,4
    808c:	e0bffd15 	stw	r2,-12(fp)
}
    8090:	e037883a 	mov	sp,fp
    8094:	df000017 	ldw	fp,0(sp)
    8098:	dec00104 	addi	sp,sp,4
    809c:	f800283a 	ret

000080a0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    80a0:	defffe04 	addi	sp,sp,-8
    80a4:	dfc00115 	stw	ra,4(sp)
    80a8:	df000015 	stw	fp,0(sp)
    80ac:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    80b0:	01000074 	movhi	r4,1
    80b4:	2125cf04 	addi	r4,r4,-26820
    80b8:	01400074 	movhi	r5,1
    80bc:	29651a04 	addi	r5,r5,-27544
    80c0:	01800074 	movhi	r6,1
    80c4:	31a5cf04 	addi	r6,r6,-26820
    80c8:	00081200 	call	8120 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    80cc:	01000074 	movhi	r4,1
    80d0:	21200804 	addi	r4,r4,-32736
    80d4:	01400074 	movhi	r5,1
    80d8:	29600804 	addi	r5,r5,-32736
    80dc:	01800074 	movhi	r6,1
    80e0:	31a00804 	addi	r6,r6,-32736
    80e4:	00081200 	call	8120 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    80e8:	01000074 	movhi	r4,1
    80ec:	21250d04 	addi	r4,r4,-27596
    80f0:	01400074 	movhi	r5,1
    80f4:	29650d04 	addi	r5,r5,-27596
    80f8:	01800074 	movhi	r6,1
    80fc:	31a51a04 	addi	r6,r6,-27544
    8100:	00081200 	call	8120 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8104:	000864c0 	call	864c <alt_dcache_flush_all>
  alt_icache_flush_all();
    8108:	00088700 	call	8870 <alt_icache_flush_all>
}
    810c:	e037883a 	mov	sp,fp
    8110:	dfc00117 	ldw	ra,4(sp)
    8114:	df000017 	ldw	fp,0(sp)
    8118:	dec00204 	addi	sp,sp,8
    811c:	f800283a 	ret

00008120 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    8120:	defffc04 	addi	sp,sp,-16
    8124:	df000315 	stw	fp,12(sp)
    8128:	df000304 	addi	fp,sp,12
    812c:	e13ffd15 	stw	r4,-12(fp)
    8130:	e17ffe15 	stw	r5,-8(fp)
    8134:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    8138:	e0fffe17 	ldw	r3,-8(fp)
    813c:	e0bffd17 	ldw	r2,-12(fp)
    8140:	18800e26 	beq	r3,r2,817c <alt_load_section+0x5c>
  {
    while( to != end )
    8144:	00000a06 	br	8170 <alt_load_section+0x50>
    {
      *to++ = *from++;
    8148:	e0bffd17 	ldw	r2,-12(fp)
    814c:	10c00017 	ldw	r3,0(r2)
    8150:	e0bffe17 	ldw	r2,-8(fp)
    8154:	10c00015 	stw	r3,0(r2)
    8158:	e0bffe17 	ldw	r2,-8(fp)
    815c:	10800104 	addi	r2,r2,4
    8160:	e0bffe15 	stw	r2,-8(fp)
    8164:	e0bffd17 	ldw	r2,-12(fp)
    8168:	10800104 	addi	r2,r2,4
    816c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8170:	e0fffe17 	ldw	r3,-8(fp)
    8174:	e0bfff17 	ldw	r2,-4(fp)
    8178:	18bff31e 	bne	r3,r2,8148 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    817c:	e037883a 	mov	sp,fp
    8180:	df000017 	ldw	fp,0(sp)
    8184:	dec00104 	addi	sp,sp,4
    8188:	f800283a 	ret

0000818c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    818c:	defffd04 	addi	sp,sp,-12
    8190:	dfc00215 	stw	ra,8(sp)
    8194:	df000115 	stw	fp,4(sp)
    8198:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    819c:	0009883a 	mov	r4,zero
    81a0:	00081f80 	call	81f8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    81a4:	000822c0 	call	822c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    81a8:	01000074 	movhi	r4,1
    81ac:	21250d04 	addi	r4,r4,-27596
    81b0:	01400074 	movhi	r5,1
    81b4:	29650d04 	addi	r5,r5,-27596
    81b8:	01800074 	movhi	r6,1
    81bc:	31a50d04 	addi	r6,r6,-27596
    81c0:	00089640 	call	8964 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    81c4:	00087a80 	call	87a8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    81c8:	01000074 	movhi	r4,1
    81cc:	21220304 	addi	r4,r4,-30708
    81d0:	0008fdc0 	call	8fdc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    81d4:	d120bd17 	ldw	r4,-32012(gp)
    81d8:	d160be17 	ldw	r5,-32008(gp)
    81dc:	d1a0bf17 	ldw	r6,-32004(gp)
    81e0:	000805c0 	call	805c <main>
    81e4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    81e8:	01000044 	movi	r4,1
    81ec:	00084ec0 	call	84ec <close>
  exit (result);
    81f0:	e13fff17 	ldw	r4,-4(fp)
    81f4:	0008ff00 	call	8ff0 <exit>

000081f8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    81f8:	defffd04 	addi	sp,sp,-12
    81fc:	dfc00215 	stw	ra,8(sp)
    8200:	df000115 	stw	fp,4(sp)
    8204:	df000104 	addi	fp,sp,4
    8208:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    820c:	0008d380 	call	8d38 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8210:	00800044 	movi	r2,1
    8214:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8218:	e037883a 	mov	sp,fp
    821c:	dfc00117 	ldw	ra,4(sp)
    8220:	df000017 	ldw	fp,0(sp)
    8224:	dec00204 	addi	sp,sp,8
    8228:	f800283a 	ret

0000822c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    822c:	defffe04 	addi	sp,sp,-8
    8230:	dfc00115 	stw	ra,4(sp)
    8234:	df000015 	stw	fp,0(sp)
    8238:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    823c:	01000074 	movhi	r4,1
    8240:	21251a04 	addi	r4,r4,-27544
    8244:	000825c0 	call	825c <alt_dev_reg>
}
    8248:	e037883a 	mov	sp,fp
    824c:	dfc00117 	ldw	ra,4(sp)
    8250:	df000017 	ldw	fp,0(sp)
    8254:	dec00204 	addi	sp,sp,8
    8258:	f800283a 	ret

0000825c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    825c:	defffd04 	addi	sp,sp,-12
    8260:	dfc00215 	stw	ra,8(sp)
    8264:	df000115 	stw	fp,4(sp)
    8268:	df000104 	addi	fp,sp,4
    826c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    8270:	e13fff17 	ldw	r4,-4(fp)
    8274:	01400074 	movhi	r5,1
    8278:	2965c904 	addi	r5,r5,-26844
    827c:	00086940 	call	8694 <alt_dev_llist_insert>
}
    8280:	e037883a 	mov	sp,fp
    8284:	dfc00117 	ldw	ra,4(sp)
    8288:	df000017 	ldw	fp,0(sp)
    828c:	dec00204 	addi	sp,sp,8
    8290:	f800283a 	ret

00008294 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    8294:	defffa04 	addi	sp,sp,-24
    8298:	dfc00515 	stw	ra,20(sp)
    829c:	df000415 	stw	fp,16(sp)
    82a0:	df000404 	addi	fp,sp,16
    82a4:	e13ffd15 	stw	r4,-12(fp)
    82a8:	e17ffe15 	stw	r5,-8(fp)
    82ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    82b0:	e0bffd17 	ldw	r2,-12(fp)
    82b4:	10800017 	ldw	r2,0(r2)
    82b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    82bc:	e0bffc17 	ldw	r2,-16(fp)
    82c0:	11000a04 	addi	r4,r2,40
    82c4:	e0bffd17 	ldw	r2,-12(fp)
    82c8:	11c00217 	ldw	r7,8(r2)
    82cc:	e17ffe17 	ldw	r5,-8(fp)
    82d0:	e1bfff17 	ldw	r6,-4(fp)
    82d4:	00083440 	call	8344 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    82d8:	e037883a 	mov	sp,fp
    82dc:	dfc00117 	ldw	ra,4(sp)
    82e0:	df000017 	ldw	fp,0(sp)
    82e4:	dec00204 	addi	sp,sp,8
    82e8:	f800283a 	ret

000082ec <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    82ec:	defffa04 	addi	sp,sp,-24
    82f0:	dfc00515 	stw	ra,20(sp)
    82f4:	df000415 	stw	fp,16(sp)
    82f8:	df000404 	addi	fp,sp,16
    82fc:	e13ffd15 	stw	r4,-12(fp)
    8300:	e17ffe15 	stw	r5,-8(fp)
    8304:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8308:	e0bffd17 	ldw	r2,-12(fp)
    830c:	10800017 	ldw	r2,0(r2)
    8310:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    8314:	e0bffc17 	ldw	r2,-16(fp)
    8318:	11000a04 	addi	r4,r2,40
    831c:	e0bffd17 	ldw	r2,-12(fp)
    8320:	11c00217 	ldw	r7,8(r2)
    8324:	e17ffe17 	ldw	r5,-8(fp)
    8328:	e1bfff17 	ldw	r6,-4(fp)
    832c:	00084480 	call	8448 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    8330:	e037883a 	mov	sp,fp
    8334:	dfc00117 	ldw	ra,4(sp)
    8338:	df000017 	ldw	fp,0(sp)
    833c:	dec00204 	addi	sp,sp,8
    8340:	f800283a 	ret

00008344 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    8344:	defff604 	addi	sp,sp,-40
    8348:	df000915 	stw	fp,36(sp)
    834c:	df000904 	addi	fp,sp,36
    8350:	e13ffb15 	stw	r4,-20(fp)
    8354:	e17ffc15 	stw	r5,-16(fp)
    8358:	e1bffd15 	stw	r6,-12(fp)
    835c:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
    8360:	e0bffb17 	ldw	r2,-20(fp)
    8364:	10800017 	ldw	r2,0(r2)
    8368:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
    836c:	e0bffc17 	ldw	r2,-16(fp)
    8370:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
    8374:	e0bffd17 	ldw	r2,-12(fp)
    8378:	1007883a 	mov	r3,r2
    837c:	e0bffc17 	ldw	r2,-16(fp)
    8380:	10c5883a 	add	r2,r2,r3
    8384:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
    8388:	00001606 	br	83e4 <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    838c:	e0bffa17 	ldw	r2,-24(fp)
    8390:	10800037 	ldwio	r2,0(r2)
    8394:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    8398:	e0bff717 	ldw	r2,-36(fp)
    839c:	10a0000c 	andi	r2,r2,32768
    83a0:	1005003a 	cmpeq	r2,r2,zero
    83a4:	1000081e 	bne	r2,zero,83c8 <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    83a8:	e0bff717 	ldw	r2,-36(fp)
    83ac:	1007883a 	mov	r3,r2
    83b0:	e0bff917 	ldw	r2,-28(fp)
    83b4:	10c00005 	stb	r3,0(r2)
    83b8:	e0bff917 	ldw	r2,-28(fp)
    83bc:	10800044 	addi	r2,r2,1
    83c0:	e0bff915 	stw	r2,-28(fp)
    83c4:	00000706 	br	83e4 <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
    83c8:	e0fff917 	ldw	r3,-28(fp)
    83cc:	e0bffc17 	ldw	r2,-16(fp)
    83d0:	1880071e 	bne	r3,r2,83f0 <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
    83d4:	e0bffe17 	ldw	r2,-8(fp)
    83d8:	1090000c 	andi	r2,r2,16384
    83dc:	1004c03a 	cmpne	r2,r2,zero
    83e0:	1000031e 	bne	r2,zero,83f0 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    83e4:	e0fff917 	ldw	r3,-28(fp)
    83e8:	e0bff817 	ldw	r2,-32(fp)
    83ec:	18bfe736 	bltu	r3,r2,838c <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
    83f0:	e0fff917 	ldw	r3,-28(fp)
    83f4:	e0bffc17 	ldw	r2,-16(fp)
    83f8:	18800526 	beq	r3,r2,8410 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    83fc:	e0fff917 	ldw	r3,-28(fp)
    8400:	e0bffc17 	ldw	r2,-16(fp)
    8404:	1887c83a 	sub	r3,r3,r2
    8408:	e0ffff15 	stw	r3,-4(fp)
    840c:	00000906 	br	8434 <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
    8410:	e0bffe17 	ldw	r2,-8(fp)
    8414:	1090000c 	andi	r2,r2,16384
    8418:	1005003a 	cmpeq	r2,r2,zero
    841c:	1000031e 	bne	r2,zero,842c <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
    8420:	00bffd44 	movi	r2,-11
    8424:	e0bfff15 	stw	r2,-4(fp)
    8428:	00000206 	br	8434 <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
    842c:	00bffec4 	movi	r2,-5
    8430:	e0bfff15 	stw	r2,-4(fp)
    8434:	e0bfff17 	ldw	r2,-4(fp)
}
    8438:	e037883a 	mov	sp,fp
    843c:	df000017 	ldw	fp,0(sp)
    8440:	dec00104 	addi	sp,sp,4
    8444:	f800283a 	ret

00008448 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8448:	defff904 	addi	sp,sp,-28
    844c:	df000615 	stw	fp,24(sp)
    8450:	df000604 	addi	fp,sp,24
    8454:	e13ffc15 	stw	r4,-16(fp)
    8458:	e17ffd15 	stw	r5,-12(fp)
    845c:	e1bffe15 	stw	r6,-8(fp)
    8460:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    8464:	e0bffc17 	ldw	r2,-16(fp)
    8468:	10800017 	ldw	r2,0(r2)
    846c:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
    8470:	e0bffe17 	ldw	r2,-8(fp)
    8474:	1007883a 	mov	r3,r2
    8478:	e0bffd17 	ldw	r2,-12(fp)
    847c:	10c5883a 	add	r2,r2,r3
    8480:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    8484:	00001106 	br	84cc <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8488:	e0bffb17 	ldw	r2,-20(fp)
    848c:	10800104 	addi	r2,r2,4
    8490:	10800037 	ldwio	r2,0(r2)
    8494:	10bfffec 	andhi	r2,r2,65535
    8498:	1005003a 	cmpeq	r2,r2,zero
    849c:	10000b1e 	bne	r2,zero,84cc <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    84a0:	e13ffb17 	ldw	r4,-20(fp)
    84a4:	e0bffd17 	ldw	r2,-12(fp)
    84a8:	10800003 	ldbu	r2,0(r2)
    84ac:	10c03fcc 	andi	r3,r2,255
    84b0:	18c0201c 	xori	r3,r3,128
    84b4:	18ffe004 	addi	r3,r3,-128
    84b8:	e0bffd17 	ldw	r2,-12(fp)
    84bc:	10800044 	addi	r2,r2,1
    84c0:	e0bffd15 	stw	r2,-12(fp)
    84c4:	2005883a 	mov	r2,r4
    84c8:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    84cc:	e0fffd17 	ldw	r3,-12(fp)
    84d0:	e0bffa17 	ldw	r2,-24(fp)
    84d4:	18bfec36 	bltu	r3,r2,8488 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    84d8:	e0bffe17 	ldw	r2,-8(fp)
}
    84dc:	e037883a 	mov	sp,fp
    84e0:	df000017 	ldw	fp,0(sp)
    84e4:	dec00104 	addi	sp,sp,4
    84e8:	f800283a 	ret

000084ec <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    84ec:	defff804 	addi	sp,sp,-32
    84f0:	dfc00715 	stw	ra,28(sp)
    84f4:	df000615 	stw	fp,24(sp)
    84f8:	df000604 	addi	fp,sp,24
    84fc:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    8500:	e0bffc17 	ldw	r2,-16(fp)
    8504:	1004803a 	cmplt	r2,r2,zero
    8508:	1000091e 	bne	r2,zero,8530 <close+0x44>
    850c:	e13ffc17 	ldw	r4,-16(fp)
    8510:	01400304 	movi	r5,12
    8514:	00093980 	call	9398 <__mulsi3>
    8518:	1007883a 	mov	r3,r2
    851c:	00800074 	movhi	r2,1
    8520:	10a52f04 	addi	r2,r2,-27460
    8524:	1887883a 	add	r3,r3,r2
    8528:	e0ffff15 	stw	r3,-4(fp)
    852c:	00000106 	br	8534 <close+0x48>
    8530:	e03fff15 	stw	zero,-4(fp)
    8534:	e0bfff17 	ldw	r2,-4(fp)
    8538:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    853c:	e0bffb17 	ldw	r2,-20(fp)
    8540:	1005003a 	cmpeq	r2,r2,zero
    8544:	10001d1e 	bne	r2,zero,85bc <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    8548:	e0bffb17 	ldw	r2,-20(fp)
    854c:	10800017 	ldw	r2,0(r2)
    8550:	10800417 	ldw	r2,16(r2)
    8554:	1005003a 	cmpeq	r2,r2,zero
    8558:	1000071e 	bne	r2,zero,8578 <close+0x8c>
    855c:	e0bffb17 	ldw	r2,-20(fp)
    8560:	10800017 	ldw	r2,0(r2)
    8564:	10800417 	ldw	r2,16(r2)
    8568:	e13ffb17 	ldw	r4,-20(fp)
    856c:	103ee83a 	callr	r2
    8570:	e0bffe15 	stw	r2,-8(fp)
    8574:	00000106 	br	857c <close+0x90>
    8578:	e03ffe15 	stw	zero,-8(fp)
    857c:	e0bffe17 	ldw	r2,-8(fp)
    8580:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    8584:	e13ffc17 	ldw	r4,-16(fp)
    8588:	0008cc00 	call	8cc0 <alt_release_fd>
    if (rval < 0)
    858c:	e0bffa17 	ldw	r2,-24(fp)
    8590:	1004403a 	cmpge	r2,r2,zero
    8594:	1000071e 	bne	r2,zero,85b4 <close+0xc8>
    {
      ALT_ERRNO = -rval;
    8598:	00085ec0 	call	85ec <alt_get_errno>
    859c:	e0fffa17 	ldw	r3,-24(fp)
    85a0:	00c7c83a 	sub	r3,zero,r3
    85a4:	10c00015 	stw	r3,0(r2)
      return -1;
    85a8:	00bfffc4 	movi	r2,-1
    85ac:	e0bffd15 	stw	r2,-12(fp)
    85b0:	00000806 	br	85d4 <close+0xe8>
    }
    return 0;
    85b4:	e03ffd15 	stw	zero,-12(fp)
    85b8:	00000606 	br	85d4 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    85bc:	00085ec0 	call	85ec <alt_get_errno>
    85c0:	1007883a 	mov	r3,r2
    85c4:	00801444 	movi	r2,81
    85c8:	18800015 	stw	r2,0(r3)
    return -1;
    85cc:	00bfffc4 	movi	r2,-1
    85d0:	e0bffd15 	stw	r2,-12(fp)
    85d4:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    85d8:	e037883a 	mov	sp,fp
    85dc:	dfc00117 	ldw	ra,4(sp)
    85e0:	df000017 	ldw	fp,0(sp)
    85e4:	dec00204 	addi	sp,sp,8
    85e8:	f800283a 	ret

000085ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    85ec:	defffd04 	addi	sp,sp,-12
    85f0:	dfc00215 	stw	ra,8(sp)
    85f4:	df000115 	stw	fp,4(sp)
    85f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    85fc:	00800074 	movhi	r2,1
    8600:	10a5cc04 	addi	r2,r2,-26832
    8604:	10800017 	ldw	r2,0(r2)
    8608:	1005003a 	cmpeq	r2,r2,zero
    860c:	1000061e 	bne	r2,zero,8628 <alt_get_errno+0x3c>
    8610:	00800074 	movhi	r2,1
    8614:	10a5cc04 	addi	r2,r2,-26832
    8618:	10800017 	ldw	r2,0(r2)
    861c:	103ee83a 	callr	r2
    8620:	e0bfff15 	stw	r2,-4(fp)
    8624:	00000306 	br	8634 <alt_get_errno+0x48>
    8628:	00800074 	movhi	r2,1
    862c:	10a68704 	addi	r2,r2,-26084
    8630:	e0bfff15 	stw	r2,-4(fp)
    8634:	e0bfff17 	ldw	r2,-4(fp)
}
    8638:	e037883a 	mov	sp,fp
    863c:	dfc00117 	ldw	ra,4(sp)
    8640:	df000017 	ldw	fp,0(sp)
    8644:	dec00204 	addi	sp,sp,8
    8648:	f800283a 	ret

0000864c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    864c:	deffff04 	addi	sp,sp,-4
    8650:	df000015 	stw	fp,0(sp)
    8654:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    8658:	e037883a 	mov	sp,fp
    865c:	df000017 	ldw	fp,0(sp)
    8660:	dec00104 	addi	sp,sp,4
    8664:	f800283a 	ret

00008668 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    8668:	defffc04 	addi	sp,sp,-16
    866c:	df000315 	stw	fp,12(sp)
    8670:	df000304 	addi	fp,sp,12
    8674:	e13ffd15 	stw	r4,-12(fp)
    8678:	e17ffe15 	stw	r5,-8(fp)
    867c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    8680:	e0bfff17 	ldw	r2,-4(fp)
}
    8684:	e037883a 	mov	sp,fp
    8688:	df000017 	ldw	fp,0(sp)
    868c:	dec00104 	addi	sp,sp,4
    8690:	f800283a 	ret

00008694 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    8694:	defff904 	addi	sp,sp,-28
    8698:	dfc00615 	stw	ra,24(sp)
    869c:	df000515 	stw	fp,20(sp)
    86a0:	df000504 	addi	fp,sp,20
    86a4:	e13ffd15 	stw	r4,-12(fp)
    86a8:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    86ac:	e0bffd17 	ldw	r2,-12(fp)
    86b0:	1005003a 	cmpeq	r2,r2,zero
    86b4:	1000041e 	bne	r2,zero,86c8 <alt_dev_llist_insert+0x34>
    86b8:	e0bffd17 	ldw	r2,-12(fp)
    86bc:	10800217 	ldw	r2,8(r2)
    86c0:	1004c03a 	cmpne	r2,r2,zero
    86c4:	1000071e 	bne	r2,zero,86e4 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    86c8:	00087480 	call	8748 <alt_get_errno>
    86cc:	1007883a 	mov	r3,r2
    86d0:	00800584 	movi	r2,22
    86d4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    86d8:	00bffa84 	movi	r2,-22
    86dc:	e0bfff15 	stw	r2,-4(fp)
    86e0:	00001306 	br	8730 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    86e4:	e0fffd17 	ldw	r3,-12(fp)
    86e8:	e0bffe17 	ldw	r2,-8(fp)
    86ec:	e0bffb15 	stw	r2,-20(fp)
    86f0:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    86f4:	e0fffc17 	ldw	r3,-16(fp)
    86f8:	e0bffb17 	ldw	r2,-20(fp)
    86fc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    8700:	e0bffb17 	ldw	r2,-20(fp)
    8704:	10c00017 	ldw	r3,0(r2)
    8708:	e0bffc17 	ldw	r2,-16(fp)
    870c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    8710:	e0bffb17 	ldw	r2,-20(fp)
    8714:	10c00017 	ldw	r3,0(r2)
    8718:	e0bffc17 	ldw	r2,-16(fp)
    871c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    8720:	e0fffb17 	ldw	r3,-20(fp)
    8724:	e0bffc17 	ldw	r2,-16(fp)
    8728:	18800015 	stw	r2,0(r3)

  return 0;  
    872c:	e03fff15 	stw	zero,-4(fp)
    8730:	e0bfff17 	ldw	r2,-4(fp)
}
    8734:	e037883a 	mov	sp,fp
    8738:	dfc00117 	ldw	ra,4(sp)
    873c:	df000017 	ldw	fp,0(sp)
    8740:	dec00204 	addi	sp,sp,8
    8744:	f800283a 	ret

00008748 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8748:	defffd04 	addi	sp,sp,-12
    874c:	dfc00215 	stw	ra,8(sp)
    8750:	df000115 	stw	fp,4(sp)
    8754:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    8758:	00800074 	movhi	r2,1
    875c:	10a5cc04 	addi	r2,r2,-26832
    8760:	10800017 	ldw	r2,0(r2)
    8764:	1005003a 	cmpeq	r2,r2,zero
    8768:	1000061e 	bne	r2,zero,8784 <alt_get_errno+0x3c>
    876c:	00800074 	movhi	r2,1
    8770:	10a5cc04 	addi	r2,r2,-26832
    8774:	10800017 	ldw	r2,0(r2)
    8778:	103ee83a 	callr	r2
    877c:	e0bfff15 	stw	r2,-4(fp)
    8780:	00000306 	br	8790 <alt_get_errno+0x48>
    8784:	00800074 	movhi	r2,1
    8788:	10a68704 	addi	r2,r2,-26084
    878c:	e0bfff15 	stw	r2,-4(fp)
    8790:	e0bfff17 	ldw	r2,-4(fp)
}
    8794:	e037883a 	mov	sp,fp
    8798:	dfc00117 	ldw	ra,4(sp)
    879c:	df000017 	ldw	fp,0(sp)
    87a0:	dec00204 	addi	sp,sp,8
    87a4:	f800283a 	ret

000087a8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    87a8:	defffd04 	addi	sp,sp,-12
    87ac:	dfc00215 	stw	ra,8(sp)
    87b0:	df000115 	stw	fp,4(sp)
    87b4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    87b8:	00bfff04 	movi	r2,-4
    87bc:	00c00074 	movhi	r3,1
    87c0:	18e50d04 	addi	r3,r3,-27596
    87c4:	1885883a 	add	r2,r3,r2
    87c8:	e0bfff15 	stw	r2,-4(fp)
    87cc:	00000606 	br	87e8 <_do_ctors+0x40>
        (*ctor) (); 
    87d0:	e0bfff17 	ldw	r2,-4(fp)
    87d4:	10800017 	ldw	r2,0(r2)
    87d8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    87dc:	e0bfff17 	ldw	r2,-4(fp)
    87e0:	10bfff04 	addi	r2,r2,-4
    87e4:	e0bfff15 	stw	r2,-4(fp)
    87e8:	e0ffff17 	ldw	r3,-4(fp)
    87ec:	00800074 	movhi	r2,1
    87f0:	10a50c04 	addi	r2,r2,-27600
    87f4:	18bff62e 	bgeu	r3,r2,87d0 <_do_ctors+0x28>
        (*ctor) (); 
}
    87f8:	e037883a 	mov	sp,fp
    87fc:	dfc00117 	ldw	ra,4(sp)
    8800:	df000017 	ldw	fp,0(sp)
    8804:	dec00204 	addi	sp,sp,8
    8808:	f800283a 	ret

0000880c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    880c:	defffd04 	addi	sp,sp,-12
    8810:	dfc00215 	stw	ra,8(sp)
    8814:	df000115 	stw	fp,4(sp)
    8818:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    881c:	00bfff04 	movi	r2,-4
    8820:	00c00074 	movhi	r3,1
    8824:	18e50d04 	addi	r3,r3,-27596
    8828:	1885883a 	add	r2,r3,r2
    882c:	e0bfff15 	stw	r2,-4(fp)
    8830:	00000606 	br	884c <_do_dtors+0x40>
        (*dtor) (); 
    8834:	e0bfff17 	ldw	r2,-4(fp)
    8838:	10800017 	ldw	r2,0(r2)
    883c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    8840:	e0bfff17 	ldw	r2,-4(fp)
    8844:	10bfff04 	addi	r2,r2,-4
    8848:	e0bfff15 	stw	r2,-4(fp)
    884c:	e0ffff17 	ldw	r3,-4(fp)
    8850:	00800074 	movhi	r2,1
    8854:	10a50d04 	addi	r2,r2,-27596
    8858:	18bff62e 	bgeu	r3,r2,8834 <_do_dtors+0x28>
        (*dtor) (); 
}
    885c:	e037883a 	mov	sp,fp
    8860:	dfc00117 	ldw	ra,4(sp)
    8864:	df000017 	ldw	fp,0(sp)
    8868:	dec00204 	addi	sp,sp,8
    886c:	f800283a 	ret

00008870 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    8870:	deffff04 	addi	sp,sp,-4
    8874:	df000015 	stw	fp,0(sp)
    8878:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    887c:	e037883a 	mov	sp,fp
    8880:	df000017 	ldw	fp,0(sp)
    8884:	dec00104 	addi	sp,sp,4
    8888:	f800283a 	ret

0000888c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    888c:	defff804 	addi	sp,sp,-32
    8890:	dfc00715 	stw	ra,28(sp)
    8894:	df000615 	stw	fp,24(sp)
    8898:	dc000515 	stw	r16,20(sp)
    889c:	df000504 	addi	fp,sp,20
    88a0:	e13ffc15 	stw	r4,-16(fp)
    88a4:	e17ffd15 	stw	r5,-12(fp)
    88a8:	e1bffe15 	stw	r6,-8(fp)
    88ac:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    88b0:	e13ffd17 	ldw	r4,-12(fp)
    88b4:	e17ffe17 	ldw	r5,-8(fp)
    88b8:	e1bfff17 	ldw	r6,-4(fp)
    88bc:	0008ad40 	call	8ad4 <open>
    88c0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    88c4:	e0bffb17 	ldw	r2,-20(fp)
    88c8:	1004803a 	cmplt	r2,r2,zero
    88cc:	10001f1e 	bne	r2,zero,894c <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    88d0:	e13ffb17 	ldw	r4,-20(fp)
    88d4:	04000074 	movhi	r16,1
    88d8:	84252f04 	addi	r16,r16,-27460
    88dc:	01400304 	movi	r5,12
    88e0:	00093980 	call	9398 <__mulsi3>
    88e4:	1405883a 	add	r2,r2,r16
    88e8:	10c00017 	ldw	r3,0(r2)
    88ec:	e0bffc17 	ldw	r2,-16(fp)
    88f0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    88f4:	e13ffb17 	ldw	r4,-20(fp)
    88f8:	04000074 	movhi	r16,1
    88fc:	84252f04 	addi	r16,r16,-27460
    8900:	01400304 	movi	r5,12
    8904:	00093980 	call	9398 <__mulsi3>
    8908:	1405883a 	add	r2,r2,r16
    890c:	10800104 	addi	r2,r2,4
    8910:	10c00017 	ldw	r3,0(r2)
    8914:	e0bffc17 	ldw	r2,-16(fp)
    8918:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    891c:	e13ffb17 	ldw	r4,-20(fp)
    8920:	04000074 	movhi	r16,1
    8924:	84252f04 	addi	r16,r16,-27460
    8928:	01400304 	movi	r5,12
    892c:	00093980 	call	9398 <__mulsi3>
    8930:	1405883a 	add	r2,r2,r16
    8934:	10800204 	addi	r2,r2,8
    8938:	10c00017 	ldw	r3,0(r2)
    893c:	e0bffc17 	ldw	r2,-16(fp)
    8940:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    8944:	e13ffb17 	ldw	r4,-20(fp)
    8948:	0008cc00 	call	8cc0 <alt_release_fd>
  }
} 
    894c:	e037883a 	mov	sp,fp
    8950:	dfc00217 	ldw	ra,8(sp)
    8954:	df000117 	ldw	fp,4(sp)
    8958:	dc000017 	ldw	r16,0(sp)
    895c:	dec00304 	addi	sp,sp,12
    8960:	f800283a 	ret

00008964 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    8964:	defffb04 	addi	sp,sp,-20
    8968:	dfc00415 	stw	ra,16(sp)
    896c:	df000315 	stw	fp,12(sp)
    8970:	df000304 	addi	fp,sp,12
    8974:	e13ffd15 	stw	r4,-12(fp)
    8978:	e17ffe15 	stw	r5,-8(fp)
    897c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    8980:	01000074 	movhi	r4,1
    8984:	21253204 	addi	r4,r4,-27448
    8988:	e17ffd17 	ldw	r5,-12(fp)
    898c:	01800044 	movi	r6,1
    8990:	01c07fc4 	movi	r7,511
    8994:	000888c0 	call	888c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    8998:	01000074 	movhi	r4,1
    899c:	21252f04 	addi	r4,r4,-27460
    89a0:	e17ffe17 	ldw	r5,-8(fp)
    89a4:	000d883a 	mov	r6,zero
    89a8:	01c07fc4 	movi	r7,511
    89ac:	000888c0 	call	888c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    89b0:	01000074 	movhi	r4,1
    89b4:	21253504 	addi	r4,r4,-27436
    89b8:	e17fff17 	ldw	r5,-4(fp)
    89bc:	01800044 	movi	r6,1
    89c0:	01c07fc4 	movi	r7,511
    89c4:	000888c0 	call	888c <alt_open_fd>
}  
    89c8:	e037883a 	mov	sp,fp
    89cc:	dfc00117 	ldw	ra,4(sp)
    89d0:	df000017 	ldw	fp,0(sp)
    89d4:	dec00204 	addi	sp,sp,8
    89d8:	f800283a 	ret

000089dc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    89dc:	defffa04 	addi	sp,sp,-24
    89e0:	dfc00515 	stw	ra,20(sp)
    89e4:	df000415 	stw	fp,16(sp)
    89e8:	dc000315 	stw	r16,12(sp)
    89ec:	df000304 	addi	fp,sp,12
    89f0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    89f4:	e0bffe17 	ldw	r2,-8(fp)
    89f8:	10800217 	ldw	r2,8(r2)
    89fc:	10d00034 	orhi	r3,r2,16384
    8a00:	e0bffe17 	ldw	r2,-8(fp)
    8a04:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    8a08:	e03ffd15 	stw	zero,-12(fp)
    8a0c:	00002306 	br	8a9c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    8a10:	e13ffd17 	ldw	r4,-12(fp)
    8a14:	04000074 	movhi	r16,1
    8a18:	84252f04 	addi	r16,r16,-27460
    8a1c:	01400304 	movi	r5,12
    8a20:	00093980 	call	9398 <__mulsi3>
    8a24:	1405883a 	add	r2,r2,r16
    8a28:	10c00017 	ldw	r3,0(r2)
    8a2c:	e0bffe17 	ldw	r2,-8(fp)
    8a30:	10800017 	ldw	r2,0(r2)
    8a34:	1880161e 	bne	r3,r2,8a90 <alt_file_locked+0xb4>
    8a38:	e13ffd17 	ldw	r4,-12(fp)
    8a3c:	04000074 	movhi	r16,1
    8a40:	84252f04 	addi	r16,r16,-27460
    8a44:	01400304 	movi	r5,12
    8a48:	00093980 	call	9398 <__mulsi3>
    8a4c:	1405883a 	add	r2,r2,r16
    8a50:	10800204 	addi	r2,r2,8
    8a54:	10800017 	ldw	r2,0(r2)
    8a58:	1004403a 	cmpge	r2,r2,zero
    8a5c:	10000c1e 	bne	r2,zero,8a90 <alt_file_locked+0xb4>
    8a60:	e13ffd17 	ldw	r4,-12(fp)
    8a64:	01400304 	movi	r5,12
    8a68:	00093980 	call	9398 <__mulsi3>
    8a6c:	1007883a 	mov	r3,r2
    8a70:	00800074 	movhi	r2,1
    8a74:	10a52f04 	addi	r2,r2,-27460
    8a78:	1887883a 	add	r3,r3,r2
    8a7c:	e0bffe17 	ldw	r2,-8(fp)
    8a80:	18800326 	beq	r3,r2,8a90 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    8a84:	00bffcc4 	movi	r2,-13
    8a88:	e0bfff15 	stw	r2,-4(fp)
    8a8c:	00000a06 	br	8ab8 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    8a90:	e0bffd17 	ldw	r2,-12(fp)
    8a94:	10800044 	addi	r2,r2,1
    8a98:	e0bffd15 	stw	r2,-12(fp)
    8a9c:	00800074 	movhi	r2,1
    8aa0:	10a5cb04 	addi	r2,r2,-26836
    8aa4:	10800017 	ldw	r2,0(r2)
    8aa8:	1007883a 	mov	r3,r2
    8aac:	e0bffd17 	ldw	r2,-12(fp)
    8ab0:	18bfd72e 	bgeu	r3,r2,8a10 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    8ab4:	e03fff15 	stw	zero,-4(fp)
    8ab8:	e0bfff17 	ldw	r2,-4(fp)
}
    8abc:	e037883a 	mov	sp,fp
    8ac0:	dfc00217 	ldw	ra,8(sp)
    8ac4:	df000117 	ldw	fp,4(sp)
    8ac8:	dc000017 	ldw	r16,0(sp)
    8acc:	dec00304 	addi	sp,sp,12
    8ad0:	f800283a 	ret

00008ad4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    8ad4:	defff404 	addi	sp,sp,-48
    8ad8:	dfc00b15 	stw	ra,44(sp)
    8adc:	df000a15 	stw	fp,40(sp)
    8ae0:	df000a04 	addi	fp,sp,40
    8ae4:	e13ffb15 	stw	r4,-20(fp)
    8ae8:	e17ffc15 	stw	r5,-16(fp)
    8aec:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    8af0:	00bfffc4 	movi	r2,-1
    8af4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    8af8:	00bffb44 	movi	r2,-19
    8afc:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    8b00:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    8b04:	e13ffb17 	ldw	r4,-20(fp)
    8b08:	01400074 	movhi	r5,1
    8b0c:	2965c904 	addi	r5,r5,-26844
    8b10:	0008d580 	call	8d58 <alt_find_dev>
    8b14:	e0bffa15 	stw	r2,-24(fp)
    8b18:	e0bffa17 	ldw	r2,-24(fp)
    8b1c:	1004c03a 	cmpne	r2,r2,zero
    8b20:	1000051e 	bne	r2,zero,8b38 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    8b24:	e13ffb17 	ldw	r4,-20(fp)
    8b28:	0008dec0 	call	8dec <alt_find_file>
    8b2c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    8b30:	00800044 	movi	r2,1
    8b34:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    8b38:	e0bffa17 	ldw	r2,-24(fp)
    8b3c:	1005003a 	cmpeq	r2,r2,zero
    8b40:	1000311e 	bne	r2,zero,8c08 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    8b44:	e13ffa17 	ldw	r4,-24(fp)
    8b48:	0008f0c0 	call	8f0c <alt_get_fd>
    8b4c:	e0bff815 	stw	r2,-32(fp)
    8b50:	e0bff817 	ldw	r2,-32(fp)
    8b54:	1004403a 	cmpge	r2,r2,zero
    8b58:	1000031e 	bne	r2,zero,8b68 <open+0x94>
    {
      status = index;
    8b5c:	e0bff817 	ldw	r2,-32(fp)
    8b60:	e0bff715 	stw	r2,-36(fp)
    8b64:	00002a06 	br	8c10 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    8b68:	e13ff817 	ldw	r4,-32(fp)
    8b6c:	01400304 	movi	r5,12
    8b70:	00093980 	call	9398 <__mulsi3>
    8b74:	1007883a 	mov	r3,r2
    8b78:	00800074 	movhi	r2,1
    8b7c:	10a52f04 	addi	r2,r2,-27460
    8b80:	1885883a 	add	r2,r3,r2
    8b84:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    8b88:	e0fffc17 	ldw	r3,-16(fp)
    8b8c:	00900034 	movhi	r2,16384
    8b90:	10bfffc4 	addi	r2,r2,-1
    8b94:	1886703a 	and	r3,r3,r2
    8b98:	e0bff917 	ldw	r2,-28(fp)
    8b9c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    8ba0:	e0bff617 	ldw	r2,-40(fp)
    8ba4:	1004c03a 	cmpne	r2,r2,zero
    8ba8:	1000061e 	bne	r2,zero,8bc4 <open+0xf0>
    8bac:	e13ff917 	ldw	r4,-28(fp)
    8bb0:	00089dc0 	call	89dc <alt_file_locked>
    8bb4:	e0bff715 	stw	r2,-36(fp)
    8bb8:	e0bff717 	ldw	r2,-36(fp)
    8bbc:	1004803a 	cmplt	r2,r2,zero
    8bc0:	1000131e 	bne	r2,zero,8c10 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    8bc4:	e0bffa17 	ldw	r2,-24(fp)
    8bc8:	10800317 	ldw	r2,12(r2)
    8bcc:	1005003a 	cmpeq	r2,r2,zero
    8bd0:	1000091e 	bne	r2,zero,8bf8 <open+0x124>
    8bd4:	e0bffa17 	ldw	r2,-24(fp)
    8bd8:	10800317 	ldw	r2,12(r2)
    8bdc:	e13ff917 	ldw	r4,-28(fp)
    8be0:	e17ffb17 	ldw	r5,-20(fp)
    8be4:	e1bffc17 	ldw	r6,-16(fp)
    8be8:	e1fffd17 	ldw	r7,-12(fp)
    8bec:	103ee83a 	callr	r2
    8bf0:	e0bfff15 	stw	r2,-4(fp)
    8bf4:	00000106 	br	8bfc <open+0x128>
    8bf8:	e03fff15 	stw	zero,-4(fp)
    8bfc:	e0bfff17 	ldw	r2,-4(fp)
    8c00:	e0bff715 	stw	r2,-36(fp)
    8c04:	00000206 	br	8c10 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    8c08:	00bffb44 	movi	r2,-19
    8c0c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    8c10:	e0bff717 	ldw	r2,-36(fp)
    8c14:	1004403a 	cmpge	r2,r2,zero
    8c18:	1000091e 	bne	r2,zero,8c40 <open+0x16c>
  {
    alt_release_fd (index);  
    8c1c:	e13ff817 	ldw	r4,-32(fp)
    8c20:	0008cc00 	call	8cc0 <alt_release_fd>
    ALT_ERRNO = -status;
    8c24:	0008c600 	call	8c60 <alt_get_errno>
    8c28:	e0fff717 	ldw	r3,-36(fp)
    8c2c:	00c7c83a 	sub	r3,zero,r3
    8c30:	10c00015 	stw	r3,0(r2)
    return -1;
    8c34:	00bfffc4 	movi	r2,-1
    8c38:	e0bffe15 	stw	r2,-8(fp)
    8c3c:	00000206 	br	8c48 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    8c40:	e0bff817 	ldw	r2,-32(fp)
    8c44:	e0bffe15 	stw	r2,-8(fp)
    8c48:	e0bffe17 	ldw	r2,-8(fp)
}
    8c4c:	e037883a 	mov	sp,fp
    8c50:	dfc00117 	ldw	ra,4(sp)
    8c54:	df000017 	ldw	fp,0(sp)
    8c58:	dec00204 	addi	sp,sp,8
    8c5c:	f800283a 	ret

00008c60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8c60:	defffd04 	addi	sp,sp,-12
    8c64:	dfc00215 	stw	ra,8(sp)
    8c68:	df000115 	stw	fp,4(sp)
    8c6c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    8c70:	00800074 	movhi	r2,1
    8c74:	10a5cc04 	addi	r2,r2,-26832
    8c78:	10800017 	ldw	r2,0(r2)
    8c7c:	1005003a 	cmpeq	r2,r2,zero
    8c80:	1000061e 	bne	r2,zero,8c9c <alt_get_errno+0x3c>
    8c84:	00800074 	movhi	r2,1
    8c88:	10a5cc04 	addi	r2,r2,-26832
    8c8c:	10800017 	ldw	r2,0(r2)
    8c90:	103ee83a 	callr	r2
    8c94:	e0bfff15 	stw	r2,-4(fp)
    8c98:	00000306 	br	8ca8 <alt_get_errno+0x48>
    8c9c:	00800074 	movhi	r2,1
    8ca0:	10a68704 	addi	r2,r2,-26084
    8ca4:	e0bfff15 	stw	r2,-4(fp)
    8ca8:	e0bfff17 	ldw	r2,-4(fp)
}
    8cac:	e037883a 	mov	sp,fp
    8cb0:	dfc00117 	ldw	ra,4(sp)
    8cb4:	df000017 	ldw	fp,0(sp)
    8cb8:	dec00204 	addi	sp,sp,8
    8cbc:	f800283a 	ret

00008cc0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    8cc0:	defffc04 	addi	sp,sp,-16
    8cc4:	dfc00315 	stw	ra,12(sp)
    8cc8:	df000215 	stw	fp,8(sp)
    8ccc:	dc000115 	stw	r16,4(sp)
    8cd0:	df000104 	addi	fp,sp,4
    8cd4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    8cd8:	e0bfff17 	ldw	r2,-4(fp)
    8cdc:	108000d0 	cmplti	r2,r2,3
    8ce0:	10000f1e 	bne	r2,zero,8d20 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    8ce4:	e13fff17 	ldw	r4,-4(fp)
    8ce8:	04000074 	movhi	r16,1
    8cec:	84252f04 	addi	r16,r16,-27460
    8cf0:	01400304 	movi	r5,12
    8cf4:	00093980 	call	9398 <__mulsi3>
    8cf8:	1405883a 	add	r2,r2,r16
    8cfc:	10800204 	addi	r2,r2,8
    8d00:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    8d04:	e13fff17 	ldw	r4,-4(fp)
    8d08:	04000074 	movhi	r16,1
    8d0c:	84252f04 	addi	r16,r16,-27460
    8d10:	01400304 	movi	r5,12
    8d14:	00093980 	call	9398 <__mulsi3>
    8d18:	1405883a 	add	r2,r2,r16
    8d1c:	10000015 	stw	zero,0(r2)
  }
}
    8d20:	e037883a 	mov	sp,fp
    8d24:	dfc00217 	ldw	ra,8(sp)
    8d28:	df000117 	ldw	fp,4(sp)
    8d2c:	dc000017 	ldw	r16,0(sp)
    8d30:	dec00304 	addi	sp,sp,12
    8d34:	f800283a 	ret

00008d38 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    8d38:	deffff04 	addi	sp,sp,-4
    8d3c:	df000015 	stw	fp,0(sp)
    8d40:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    8d44:	000170fa 	wrctl	ienable,zero
}
    8d48:	e037883a 	mov	sp,fp
    8d4c:	df000017 	ldw	fp,0(sp)
    8d50:	dec00104 	addi	sp,sp,4
    8d54:	f800283a 	ret

00008d58 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    8d58:	defff904 	addi	sp,sp,-28
    8d5c:	dfc00615 	stw	ra,24(sp)
    8d60:	df000515 	stw	fp,20(sp)
    8d64:	df000504 	addi	fp,sp,20
    8d68:	e13ffd15 	stw	r4,-12(fp)
    8d6c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    8d70:	e0bffe17 	ldw	r2,-8(fp)
    8d74:	10800017 	ldw	r2,0(r2)
    8d78:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    8d7c:	e13ffd17 	ldw	r4,-12(fp)
    8d80:	000904c0 	call	904c <strlen>
    8d84:	10800044 	addi	r2,r2,1
    8d88:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    8d8c:	00000d06 	br	8dc4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    8d90:	e0bffc17 	ldw	r2,-16(fp)
    8d94:	11000217 	ldw	r4,8(r2)
    8d98:	e1bffb17 	ldw	r6,-20(fp)
    8d9c:	e17ffd17 	ldw	r5,-12(fp)
    8da0:	00090100 	call	9010 <memcmp>
    8da4:	1004c03a 	cmpne	r2,r2,zero
    8da8:	1000031e 	bne	r2,zero,8db8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    8dac:	e0bffc17 	ldw	r2,-16(fp)
    8db0:	e0bfff15 	stw	r2,-4(fp)
    8db4:	00000706 	br	8dd4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    8db8:	e0bffc17 	ldw	r2,-16(fp)
    8dbc:	10800017 	ldw	r2,0(r2)
    8dc0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    8dc4:	e0fffe17 	ldw	r3,-8(fp)
    8dc8:	e0bffc17 	ldw	r2,-16(fp)
    8dcc:	10fff01e 	bne	r2,r3,8d90 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    8dd0:	e03fff15 	stw	zero,-4(fp)
    8dd4:	e0bfff17 	ldw	r2,-4(fp)
}
    8dd8:	e037883a 	mov	sp,fp
    8ddc:	dfc00117 	ldw	ra,4(sp)
    8de0:	df000017 	ldw	fp,0(sp)
    8de4:	dec00204 	addi	sp,sp,8
    8de8:	f800283a 	ret

00008dec <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    8dec:	defffa04 	addi	sp,sp,-24
    8df0:	dfc00515 	stw	ra,20(sp)
    8df4:	df000415 	stw	fp,16(sp)
    8df8:	df000404 	addi	fp,sp,16
    8dfc:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    8e00:	00800074 	movhi	r2,1
    8e04:	10a5c704 	addi	r2,r2,-26852
    8e08:	10800017 	ldw	r2,0(r2)
    8e0c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    8e10:	00003306 	br	8ee0 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    8e14:	e0bffd17 	ldw	r2,-12(fp)
    8e18:	11000217 	ldw	r4,8(r2)
    8e1c:	000904c0 	call	904c <strlen>
    8e20:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    8e24:	e0bffd17 	ldw	r2,-12(fp)
    8e28:	10c00217 	ldw	r3,8(r2)
    8e2c:	e0bffc17 	ldw	r2,-16(fp)
    8e30:	1885883a 	add	r2,r3,r2
    8e34:	10bfffc4 	addi	r2,r2,-1
    8e38:	10800003 	ldbu	r2,0(r2)
    8e3c:	10803fcc 	andi	r2,r2,255
    8e40:	1080201c 	xori	r2,r2,128
    8e44:	10bfe004 	addi	r2,r2,-128
    8e48:	10800bd8 	cmpnei	r2,r2,47
    8e4c:	1000031e 	bne	r2,zero,8e5c <alt_find_file+0x70>
    {
      len -= 1;
    8e50:	e0bffc17 	ldw	r2,-16(fp)
    8e54:	10bfffc4 	addi	r2,r2,-1
    8e58:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    8e5c:	e0bffc17 	ldw	r2,-16(fp)
    8e60:	1007883a 	mov	r3,r2
    8e64:	e0bffe17 	ldw	r2,-8(fp)
    8e68:	1885883a 	add	r2,r3,r2
    8e6c:	10800003 	ldbu	r2,0(r2)
    8e70:	10803fcc 	andi	r2,r2,255
    8e74:	1080201c 	xori	r2,r2,128
    8e78:	10bfe004 	addi	r2,r2,-128
    8e7c:	10800be0 	cmpeqi	r2,r2,47
    8e80:	10000a1e 	bne	r2,zero,8eac <alt_find_file+0xc0>
    8e84:	e0bffc17 	ldw	r2,-16(fp)
    8e88:	1007883a 	mov	r3,r2
    8e8c:	e0bffe17 	ldw	r2,-8(fp)
    8e90:	1885883a 	add	r2,r3,r2
    8e94:	10800003 	ldbu	r2,0(r2)
    8e98:	10803fcc 	andi	r2,r2,255
    8e9c:	1080201c 	xori	r2,r2,128
    8ea0:	10bfe004 	addi	r2,r2,-128
    8ea4:	1004c03a 	cmpne	r2,r2,zero
    8ea8:	10000a1e 	bne	r2,zero,8ed4 <alt_find_file+0xe8>
    8eac:	e0bffd17 	ldw	r2,-12(fp)
    8eb0:	11000217 	ldw	r4,8(r2)
    8eb4:	e1bffc17 	ldw	r6,-16(fp)
    8eb8:	e17ffe17 	ldw	r5,-8(fp)
    8ebc:	00090100 	call	9010 <memcmp>
    8ec0:	1004c03a 	cmpne	r2,r2,zero
    8ec4:	1000031e 	bne	r2,zero,8ed4 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    8ec8:	e0bffd17 	ldw	r2,-12(fp)
    8ecc:	e0bfff15 	stw	r2,-4(fp)
    8ed0:	00000806 	br	8ef4 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    8ed4:	e0bffd17 	ldw	r2,-12(fp)
    8ed8:	10800017 	ldw	r2,0(r2)
    8edc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    8ee0:	00c00074 	movhi	r3,1
    8ee4:	18e5c704 	addi	r3,r3,-26852
    8ee8:	e0bffd17 	ldw	r2,-12(fp)
    8eec:	10ffc91e 	bne	r2,r3,8e14 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    8ef0:	e03fff15 	stw	zero,-4(fp)
    8ef4:	e0bfff17 	ldw	r2,-4(fp)
}
    8ef8:	e037883a 	mov	sp,fp
    8efc:	dfc00117 	ldw	ra,4(sp)
    8f00:	df000017 	ldw	fp,0(sp)
    8f04:	dec00204 	addi	sp,sp,8
    8f08:	f800283a 	ret

00008f0c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    8f0c:	defffa04 	addi	sp,sp,-24
    8f10:	dfc00515 	stw	ra,20(sp)
    8f14:	df000415 	stw	fp,16(sp)
    8f18:	dc000315 	stw	r16,12(sp)
    8f1c:	df000304 	addi	fp,sp,12
    8f20:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    8f24:	00bffa04 	movi	r2,-24
    8f28:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    8f2c:	e03ffe15 	stw	zero,-8(fp)
    8f30:	00002006 	br	8fb4 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    8f34:	e13ffe17 	ldw	r4,-8(fp)
    8f38:	04000074 	movhi	r16,1
    8f3c:	84252f04 	addi	r16,r16,-27460
    8f40:	01400304 	movi	r5,12
    8f44:	00093980 	call	9398 <__mulsi3>
    8f48:	1405883a 	add	r2,r2,r16
    8f4c:	10800017 	ldw	r2,0(r2)
    8f50:	1004c03a 	cmpne	r2,r2,zero
    8f54:	1000141e 	bne	r2,zero,8fa8 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    8f58:	e13ffe17 	ldw	r4,-8(fp)
    8f5c:	04000074 	movhi	r16,1
    8f60:	84252f04 	addi	r16,r16,-27460
    8f64:	01400304 	movi	r5,12
    8f68:	00093980 	call	9398 <__mulsi3>
    8f6c:	1407883a 	add	r3,r2,r16
    8f70:	e0bfff17 	ldw	r2,-4(fp)
    8f74:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    8f78:	00800074 	movhi	r2,1
    8f7c:	10a5cb04 	addi	r2,r2,-26836
    8f80:	10c00017 	ldw	r3,0(r2)
    8f84:	e0bffe17 	ldw	r2,-8(fp)
    8f88:	1880040e 	bge	r3,r2,8f9c <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    8f8c:	00c00074 	movhi	r3,1
    8f90:	18e5cb04 	addi	r3,r3,-26836
    8f94:	e0bffe17 	ldw	r2,-8(fp)
    8f98:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    8f9c:	e0bffe17 	ldw	r2,-8(fp)
    8fa0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    8fa4:	00000606 	br	8fc0 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    8fa8:	e0bffe17 	ldw	r2,-8(fp)
    8fac:	10800044 	addi	r2,r2,1
    8fb0:	e0bffe15 	stw	r2,-8(fp)
    8fb4:	e0bffe17 	ldw	r2,-8(fp)
    8fb8:	10800810 	cmplti	r2,r2,32
    8fbc:	103fdd1e 	bne	r2,zero,8f34 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    8fc0:	e0bffd17 	ldw	r2,-12(fp)
}
    8fc4:	e037883a 	mov	sp,fp
    8fc8:	dfc00217 	ldw	ra,8(sp)
    8fcc:	df000117 	ldw	fp,4(sp)
    8fd0:	dc000017 	ldw	r16,0(sp)
    8fd4:	dec00304 	addi	sp,sp,12
    8fd8:	f800283a 	ret

00008fdc <atexit>:
    8fdc:	200b883a 	mov	r5,r4
    8fe0:	000d883a 	mov	r6,zero
    8fe4:	0009883a 	mov	r4,zero
    8fe8:	000f883a 	mov	r7,zero
    8fec:	000906c1 	jmpi	906c <__register_exitproc>

00008ff0 <exit>:
    8ff0:	defffe04 	addi	sp,sp,-8
    8ff4:	dc400015 	stw	r17,0(sp)
    8ff8:	000b883a 	mov	r5,zero
    8ffc:	2023883a 	mov	r17,r4
    9000:	dfc00115 	stw	ra,4(sp)
    9004:	00091dc0 	call	91dc <__call_exitprocs>
    9008:	8809883a 	mov	r4,r17
    900c:	00094100 	call	9410 <_exit>

00009010 <memcmp>:
    9010:	31ffffc4 	addi	r7,r6,-1
    9014:	3000061e 	bne	r6,zero,9030 <memcmp+0x20>
    9018:	00000a06 	br	9044 <memcmp+0x34>
    901c:	39ffffc4 	addi	r7,r7,-1
    9020:	00bfffc4 	movi	r2,-1
    9024:	21000044 	addi	r4,r4,1
    9028:	29400044 	addi	r5,r5,1
    902c:	38800526 	beq	r7,r2,9044 <memcmp+0x34>
    9030:	20c00003 	ldbu	r3,0(r4)
    9034:	28800003 	ldbu	r2,0(r5)
    9038:	18bff826 	beq	r3,r2,901c <memcmp+0xc>
    903c:	1885c83a 	sub	r2,r3,r2
    9040:	f800283a 	ret
    9044:	0005883a 	mov	r2,zero
    9048:	f800283a 	ret

0000904c <strlen>:
    904c:	20800007 	ldb	r2,0(r4)
    9050:	10000526 	beq	r2,zero,9068 <strlen+0x1c>
    9054:	2007883a 	mov	r3,r4
    9058:	18c00044 	addi	r3,r3,1
    905c:	18800007 	ldb	r2,0(r3)
    9060:	103ffd1e 	bne	r2,zero,9058 <strlen+0xc>
    9064:	1905c83a 	sub	r2,r3,r4
    9068:	f800283a 	ret

0000906c <__register_exitproc>:
    906c:	defff904 	addi	sp,sp,-28
    9070:	00800074 	movhi	r2,1
    9074:	10a5ce04 	addi	r2,r2,-26824
    9078:	dc400115 	stw	r17,4(sp)
    907c:	14400017 	ldw	r17,0(r2)
    9080:	dc000015 	stw	r16,0(sp)
    9084:	dd400515 	stw	r21,20(sp)
    9088:	8c000c17 	ldw	r16,48(r17)
    908c:	dd000415 	stw	r20,16(sp)
    9090:	dcc00315 	stw	r19,12(sp)
    9094:	dc800215 	stw	r18,8(sp)
    9098:	dfc00615 	stw	ra,24(sp)
    909c:	2025883a 	mov	r18,r4
    90a0:	282b883a 	mov	r21,r5
    90a4:	3029883a 	mov	r20,r6
    90a8:	3827883a 	mov	r19,r7
    90ac:	80002626 	beq	r16,zero,9148 <__register_exitproc+0xdc>
    90b0:	81400117 	ldw	r5,4(r16)
    90b4:	008007c4 	movi	r2,31
    90b8:	11403716 	blt	r2,r5,9198 <__register_exitproc+0x12c>
    90bc:	90002026 	beq	r18,zero,9140 <__register_exitproc+0xd4>
    90c0:	81802217 	ldw	r6,136(r16)
    90c4:	30002926 	beq	r6,zero,916c <__register_exitproc+0x100>
    90c8:	81400117 	ldw	r5,4(r16)
    90cc:	00c00044 	movi	r3,1
    90d0:	31004017 	ldw	r4,256(r6)
    90d4:	1946983a 	sll	r3,r3,r5
    90d8:	2945883a 	add	r2,r5,r5
    90dc:	1085883a 	add	r2,r2,r2
    90e0:	1185883a 	add	r2,r2,r6
    90e4:	20c8b03a 	or	r4,r4,r3
    90e8:	14c02015 	stw	r19,128(r2)
    90ec:	15000015 	stw	r20,0(r2)
    90f0:	00800084 	movi	r2,2
    90f4:	31004015 	stw	r4,256(r6)
    90f8:	90801826 	beq	r18,r2,915c <__register_exitproc+0xf0>
    90fc:	2945883a 	add	r2,r5,r5
    9100:	1085883a 	add	r2,r2,r2
    9104:	1405883a 	add	r2,r2,r16
    9108:	28c00044 	addi	r3,r5,1
    910c:	0009883a 	mov	r4,zero
    9110:	15400215 	stw	r21,8(r2)
    9114:	80c00115 	stw	r3,4(r16)
    9118:	2005883a 	mov	r2,r4
    911c:	dfc00617 	ldw	ra,24(sp)
    9120:	dd400517 	ldw	r21,20(sp)
    9124:	dd000417 	ldw	r20,16(sp)
    9128:	dcc00317 	ldw	r19,12(sp)
    912c:	dc800217 	ldw	r18,8(sp)
    9130:	dc400117 	ldw	r17,4(sp)
    9134:	dc000017 	ldw	r16,0(sp)
    9138:	dec00704 	addi	sp,sp,28
    913c:	f800283a 	ret
    9140:	81400117 	ldw	r5,4(r16)
    9144:	003fed06 	br	90fc <__register_exitproc+0x90>
    9148:	00800074 	movhi	r2,1
    914c:	10a68804 	addi	r2,r2,-26080
    9150:	1021883a 	mov	r16,r2
    9154:	88800c15 	stw	r2,48(r17)
    9158:	003fd506 	br	90b0 <__register_exitproc+0x44>
    915c:	30804117 	ldw	r2,260(r6)
    9160:	10c4b03a 	or	r2,r2,r3
    9164:	30804115 	stw	r2,260(r6)
    9168:	003fe406 	br	90fc <__register_exitproc+0x90>
    916c:	00800034 	movhi	r2,0
    9170:	10800004 	addi	r2,r2,0
    9174:	10000b26 	beq	r2,zero,91a4 <__register_exitproc+0x138>
    9178:	01004204 	movi	r4,264
    917c:	103ee83a 	callr	r2
    9180:	10000826 	beq	r2,zero,91a4 <__register_exitproc+0x138>
    9184:	100d883a 	mov	r6,r2
    9188:	10004015 	stw	zero,256(r2)
    918c:	10004115 	stw	zero,260(r2)
    9190:	80802215 	stw	r2,136(r16)
    9194:	003fcc06 	br	90c8 <__register_exitproc+0x5c>
    9198:	00800034 	movhi	r2,0
    919c:	10800004 	addi	r2,r2,0
    91a0:	1000021e 	bne	r2,zero,91ac <__register_exitproc+0x140>
    91a4:	013fffc4 	movi	r4,-1
    91a8:	003fdb06 	br	9118 <__register_exitproc+0xac>
    91ac:	01002304 	movi	r4,140
    91b0:	103ee83a 	callr	r2
    91b4:	1007883a 	mov	r3,r2
    91b8:	103ffa26 	beq	r2,zero,91a4 <__register_exitproc+0x138>
    91bc:	88800c17 	ldw	r2,48(r17)
    91c0:	1821883a 	mov	r16,r3
    91c4:	18000115 	stw	zero,4(r3)
    91c8:	18800015 	stw	r2,0(r3)
    91cc:	88c00c15 	stw	r3,48(r17)
    91d0:	903fdb26 	beq	r18,zero,9140 <__register_exitproc+0xd4>
    91d4:	003fba06 	br	90c0 <__register_exitproc+0x54>

000091d8 <register_fini>:
    91d8:	f800283a 	ret

000091dc <__call_exitprocs>:
    91dc:	defff304 	addi	sp,sp,-52
    91e0:	00800074 	movhi	r2,1
    91e4:	10a5ce04 	addi	r2,r2,-26824
    91e8:	df000b15 	stw	fp,44(sp)
    91ec:	17000017 	ldw	fp,0(r2)
    91f0:	00800034 	movhi	r2,0
    91f4:	10800004 	addi	r2,r2,0
    91f8:	1005003a 	cmpeq	r2,r2,zero
    91fc:	d8800215 	stw	r2,8(sp)
    9200:	e0800c04 	addi	r2,fp,48
    9204:	dd800915 	stw	r22,36(sp)
    9208:	dd400815 	stw	r21,32(sp)
    920c:	dfc00c15 	stw	ra,48(sp)
    9210:	ddc00a15 	stw	r23,40(sp)
    9214:	dd000715 	stw	r20,28(sp)
    9218:	dcc00615 	stw	r19,24(sp)
    921c:	dc800515 	stw	r18,20(sp)
    9220:	dc400415 	stw	r17,16(sp)
    9224:	dc000315 	stw	r16,12(sp)
    9228:	282d883a 	mov	r22,r5
    922c:	d9000115 	stw	r4,4(sp)
    9230:	d8800015 	stw	r2,0(sp)
    9234:	282b003a 	cmpeq	r21,r5,zero
    9238:	e4400c17 	ldw	r17,48(fp)
    923c:	88001226 	beq	r17,zero,9288 <__call_exitprocs+0xac>
    9240:	ddc00017 	ldw	r23,0(sp)
    9244:	88800117 	ldw	r2,4(r17)
    9248:	8c802217 	ldw	r18,136(r17)
    924c:	143fffc4 	addi	r16,r2,-1
    9250:	80000b16 	blt	r16,zero,9280 <__call_exitprocs+0xa4>
    9254:	9027003a 	cmpeq	r19,r18,zero
    9258:	a800171e 	bne	r21,zero,92b8 <__call_exitprocs+0xdc>
    925c:	9800051e 	bne	r19,zero,9274 <__call_exitprocs+0x98>
    9260:	8409883a 	add	r4,r16,r16
    9264:	2105883a 	add	r2,r4,r4
    9268:	1485883a 	add	r2,r2,r18
    926c:	10c02017 	ldw	r3,128(r2)
    9270:	b0c01226 	beq	r22,r3,92bc <__call_exitprocs+0xe0>
    9274:	843fffc4 	addi	r16,r16,-1
    9278:	00bfffc4 	movi	r2,-1
    927c:	80bff61e 	bne	r16,r2,9258 <__call_exitprocs+0x7c>
    9280:	d8800217 	ldw	r2,8(sp)
    9284:	10003226 	beq	r2,zero,9350 <__call_exitprocs+0x174>
    9288:	dfc00c17 	ldw	ra,48(sp)
    928c:	df000b17 	ldw	fp,44(sp)
    9290:	ddc00a17 	ldw	r23,40(sp)
    9294:	dd800917 	ldw	r22,36(sp)
    9298:	dd400817 	ldw	r21,32(sp)
    929c:	dd000717 	ldw	r20,28(sp)
    92a0:	dcc00617 	ldw	r19,24(sp)
    92a4:	dc800517 	ldw	r18,20(sp)
    92a8:	dc400417 	ldw	r17,16(sp)
    92ac:	dc000317 	ldw	r16,12(sp)
    92b0:	dec00d04 	addi	sp,sp,52
    92b4:	f800283a 	ret
    92b8:	8409883a 	add	r4,r16,r16
    92bc:	88c00117 	ldw	r3,4(r17)
    92c0:	2105883a 	add	r2,r4,r4
    92c4:	1445883a 	add	r2,r2,r17
    92c8:	18ffffc4 	addi	r3,r3,-1
    92cc:	11800217 	ldw	r6,8(r2)
    92d0:	1c001826 	beq	r3,r16,9334 <__call_exitprocs+0x158>
    92d4:	10000215 	stw	zero,8(r2)
    92d8:	303fe626 	beq	r6,zero,9274 <__call_exitprocs+0x98>
    92dc:	8d000117 	ldw	r20,4(r17)
    92e0:	9800121e 	bne	r19,zero,932c <__call_exitprocs+0x150>
    92e4:	00c00044 	movi	r3,1
    92e8:	1c06983a 	sll	r3,r3,r16
    92ec:	90804017 	ldw	r2,256(r18)
    92f0:	1884703a 	and	r2,r3,r2
    92f4:	10000d26 	beq	r2,zero,932c <__call_exitprocs+0x150>
    92f8:	90804117 	ldw	r2,260(r18)
    92fc:	1884703a 	and	r2,r3,r2
    9300:	10000e1e 	bne	r2,zero,933c <__call_exitprocs+0x160>
    9304:	2105883a 	add	r2,r4,r4
    9308:	1485883a 	add	r2,r2,r18
    930c:	11400017 	ldw	r5,0(r2)
    9310:	d9000117 	ldw	r4,4(sp)
    9314:	303ee83a 	callr	r6
    9318:	88800117 	ldw	r2,4(r17)
    931c:	a0bfc61e 	bne	r20,r2,9238 <__call_exitprocs+0x5c>
    9320:	b8800017 	ldw	r2,0(r23)
    9324:	147fd326 	beq	r2,r17,9274 <__call_exitprocs+0x98>
    9328:	003fc306 	br	9238 <__call_exitprocs+0x5c>
    932c:	303ee83a 	callr	r6
    9330:	003ff906 	br	9318 <__call_exitprocs+0x13c>
    9334:	8c000115 	stw	r16,4(r17)
    9338:	003fe706 	br	92d8 <__call_exitprocs+0xfc>
    933c:	2105883a 	add	r2,r4,r4
    9340:	1485883a 	add	r2,r2,r18
    9344:	11000017 	ldw	r4,0(r2)
    9348:	303ee83a 	callr	r6
    934c:	003ff206 	br	9318 <__call_exitprocs+0x13c>
    9350:	88800117 	ldw	r2,4(r17)
    9354:	10000b1e 	bne	r2,zero,9384 <__call_exitprocs+0x1a8>
    9358:	89000017 	ldw	r4,0(r17)
    935c:	20000a26 	beq	r4,zero,9388 <__call_exitprocs+0x1ac>
    9360:	b9000015 	stw	r4,0(r23)
    9364:	90000226 	beq	r18,zero,9370 <__call_exitprocs+0x194>
    9368:	9009883a 	mov	r4,r18
    936c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    9370:	8809883a 	mov	r4,r17
    9374:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    9378:	bc400017 	ldw	r17,0(r23)
    937c:	883fb11e 	bne	r17,zero,9244 <__call_exitprocs+0x68>
    9380:	003fc106 	br	9288 <__call_exitprocs+0xac>
    9384:	89000017 	ldw	r4,0(r17)
    9388:	882f883a 	mov	r23,r17
    938c:	2023883a 	mov	r17,r4
    9390:	883fac1e 	bne	r17,zero,9244 <__call_exitprocs+0x68>
    9394:	003fbc06 	br	9288 <__call_exitprocs+0xac>

00009398 <__mulsi3>:
    9398:	20000a26 	beq	r4,zero,93c4 <__mulsi3+0x2c>
    939c:	0007883a 	mov	r3,zero
    93a0:	2080004c 	andi	r2,r4,1
    93a4:	1005003a 	cmpeq	r2,r2,zero
    93a8:	2008d07a 	srli	r4,r4,1
    93ac:	1000011e 	bne	r2,zero,93b4 <__mulsi3+0x1c>
    93b0:	1947883a 	add	r3,r3,r5
    93b4:	294b883a 	add	r5,r5,r5
    93b8:	203ff91e 	bne	r4,zero,93a0 <__mulsi3+0x8>
    93bc:	1805883a 	mov	r2,r3
    93c0:	f800283a 	ret
    93c4:	0007883a 	mov	r3,zero
    93c8:	1805883a 	mov	r2,r3
    93cc:	f800283a 	ret

000093d0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    93d0:	defffd04 	addi	sp,sp,-12
    93d4:	df000215 	stw	fp,8(sp)
    93d8:	df000204 	addi	fp,sp,8
    93dc:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    93e0:	e0bfff17 	ldw	r2,-4(fp)
    93e4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    93e8:	e0bffe17 	ldw	r2,-8(fp)
    93ec:	1005003a 	cmpeq	r2,r2,zero
    93f0:	1000021e 	bne	r2,zero,93fc <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    93f4:	002af070 	cmpltui	zero,zero,43969
    93f8:	00000106 	br	9400 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    93fc:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    9400:	e037883a 	mov	sp,fp
    9404:	df000017 	ldw	fp,0(sp)
    9408:	dec00104 	addi	sp,sp,4
    940c:	f800283a 	ret

00009410 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    9410:	defffd04 	addi	sp,sp,-12
    9414:	dfc00215 	stw	ra,8(sp)
    9418:	df000115 	stw	fp,4(sp)
    941c:	df000104 	addi	fp,sp,4
    9420:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    9424:	e13fff17 	ldw	r4,-4(fp)
    9428:	00093d00 	call	93d0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    942c:	003fff06 	br	942c <_exit+0x1c>
    9430:	000091d8 	cmpnei	zero,zero,583
