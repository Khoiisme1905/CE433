
Bai7.elf:     file format elf32-littlenios2
Bai7.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000081b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00002548 memsz 0x00002548 flags r-x
    LOAD off    0x00003568 vaddr 0x0000a568 paddr 0x0000a840 align 2**12
         filesz 0x000002d8 memsz 0x000002d8 flags rw-
    LOAD off    0x00003b18 vaddr 0x0000ab18 paddr 0x0000ab18 align 2**12
         filesz 0x00000000 memsz 0x000001a4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002374  000081b4  000081b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000040  0000a528  0000a528  00003528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002d8  0000a568  0000a840  00003568  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001a4  0000ab18  0000ab18  00003b18  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00003840  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000558  00000000  00000000  00003868  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000078a  00000000  00000000  00003dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00009325  00000000  00000000  0000454a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000023c7  00000000  00000000  0000d86f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006367  00000000  00000000  0000fc36  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000008e4  00000000  00000000  00015fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000d72  00000000  00000000  00016884  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001818  00000000  00000000  000175f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00018e10  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001d0  00000000  00000000  00018e20  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001a947  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0001a94a  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001a956  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001a957  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0001a958  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0001a963  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0001a96e  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  0001a979  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000016  00000000  00000000  0001a97f  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0002bc85  00000000  00000000  0001a995  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
000081b4 l    d  .text	00000000 .text
0000a528 l    d  .rodata	00000000 .rodata
0000a568 l    d  .rwdata	00000000 .rwdata
0000ab18 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000081ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 source.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00008384 l     F .text	00000080 print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000a568 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00008c18 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
000090e8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
000092e4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000a648 l     O .rwdata	0000002c jtag_uart_0
000093a8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
00009738 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000097b4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00009894 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000099d8 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00009b28 l     F .text	000000f8 alt_file_locked
00009dac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000a304 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000a4c4 l     F .text	00000040 alt_sim_halt
00009154 g     F .text	0000006c alt_main
0000ab30 g     O .bss	00000100 alt_irq
0000a840 g       *ABS*	00000000 __flash_rwdata_start
000082ec g     F .text	00000054 printf
00008264 g     F .text	00000054 Timer_IRQ_Handler
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000ab1c g     O .bss	00000004 errno
0000ab28 g     O .bss	00000004 alt_argv
0001281c g       *ABS*	00000000 _gp
0000a69c g     O .rwdata	00000180 alt_fd_list
00009ea4 g     F .text	00000094 alt_find_dev
00009ab0 g     F .text	00000078 alt_io_redirect
0000a528 g       *ABS*	00000000 __DTOR_END__
00009490 g     F .text	00000104 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00008340 g     F .text	00000044 _printf_r
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00008d54 g     F .text	00000008 __udivsi3
0000a838 g     O .rwdata	00000004 alt_max_fd
0000a820 g     O .rwdata	00000004 _global_impure_ptr
0000acbc g       *ABS*	00000000 __bss_end
00008f70 g     F .text	000000f8 alt_iic_isr_register
00008f28 g     F .text	00000048 alt_ic_irq_enabled
0000ab20 g     O .bss	00000004 alt_irq_active
000080ec g     F .exceptions	000000c8 alt_irq_handler
0000a674 g     O .rwdata	00000028 alt_dev_null
00009798 g     F .text	0000001c alt_dcache_flush_all
0000a840 g       *ABS*	00000000 __ram_rwdata_end
0000a830 g     O .rwdata	00000008 alt_dev_list
000091c0 g     F .text	00000124 write
0000a568 g       *ABS*	00000000 __ram_rodata_end
00008d5c g     F .text	00000008 __umodsi3
0000acbc g       *ABS*	00000000 end
0000a524 g       *ABS*	00000000 __CTOR_LIST__
00010000 g       *ABS*	00000000 __alt_stack_pointer
00009594 g     F .text	000000a4 altera_avalon_jtag_uart_write
00008404 g     F .text	0000069c ___vfprintf_internal_r
0000a308 g     F .text	000001bc __call_exitprocs
000081b4 g     F .text	0000003c _start
00009378 g     F .text	00000030 alt_sys_init
0000a198 g     F .text	0000016c __register_exitproc
00008d64 g     F .text	00000038 __mulsi3
0000a568 g       *ABS*	00000000 __ram_rwdata_start
0000a528 g       *ABS*	00000000 __ram_rodata_start
000093e0 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000a058 g     F .text	000000d0 alt_get_fd
0000a15c g     F .text	0000003c memcmp
0000acbc g       *ABS*	00000000 __alt_stack_base
0000ab18 g     O .bss	00000004 counter
00009f38 g     F .text	00000120 alt_find_file
000097e0 g     F .text	000000b4 alt_dev_llist_insert
00008ac4 g     F .text	000000bc __sfvwrite_small_dev
0000ab18 g       *ABS*	00000000 __bss_start
000082b8 g     F .text	00000034 main
0000ab2c g     O .bss	00000004 alt_envp
00009438 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0000ac30 g     O .bss	0000008c _atexit0
0000a83c g     O .rwdata	00000004 alt_errno
00008c94 g     F .text	00000060 __divsi3
0000a528 g       *ABS*	00000000 __CTOR_END__
0000a528 g       *ABS*	00000000 __flash_rodata_start
0000a528 g       *ABS*	00000000 __DTOR_LIST__
00009344 g     F .text	00000034 alt_irq_init
00009e0c g     F .text	00000078 alt_release_fd
0000a128 g     F .text	00000014 atexit
00008ba0 g     F .text	00000078 _write_r
0000a81c g     O .rwdata	00000004 _impure_ptr
0000ab24 g     O .bss	00000004 alt_argc
00009958 g     F .text	00000064 _do_dtors
00008020 g       .exceptions	00000000 alt_irq_entry
0000a828 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008d9c g     F .text	00000050 alt_ic_isr_register
0000a840 g       *ABS*	00000000 _edata
0000acbc g       *ABS*	00000000 _end
000081b4 g       *ABS*	00000000 __ram_exceptions_end
00008e88 g     F .text	000000a0 alt_ic_irq_disable
00009e84 g     F .text	00000020 altera_nios2_qsys_irq_init
0000a13c g     F .text	00000020 exit
00008cf4 g     F .text	00000060 __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000a504 g     F .text	00000020 _exit
00008b80 g     F .text	00000020 strlen
00009c20 g     F .text	0000018c open
000099bc g     F .text	0000001c alt_icache_flush_all
0000a824 g     O .rwdata	00000004 alt_priority_mask
00008dec g     F .text	0000009c alt_ic_irq_enable
00008aa0 g     F .text	00000024 __vfprintf_internal
000098f4 g     F .text	00000064 _do_ctors
00009638 g     F .text	00000100 close
000081f0 g     F .text	00000074 timer_Init
00009068 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08606d14 	ori	at,at,33204
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00008020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
    8044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080ec0 	call	80ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000306 	br	8098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    808c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
    8094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    8098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    809c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
    80c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
    80e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80e8:	ef80083a 	eret

000080ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80ec:	defff904 	addi	sp,sp,-28
    80f0:	dfc00615 	stw	ra,24(sp)
    80f4:	df000515 	stw	fp,20(sp)
    80f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    80fc:	0005313a 	rdctl	r2,ipending
    8100:	e0bffc15 	stw	r2,-16(fp)

  return active;
    8104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    8108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
    810c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8110:	00800044 	movi	r2,1
    8114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    8118:	e0ffff17 	ldw	r3,-4(fp)
    811c:	e0bffe17 	ldw	r2,-8(fp)
    8120:	1884703a 	and	r2,r3,r2
    8124:	1005003a 	cmpeq	r2,r2,zero
    8128:	1000161e 	bne	r2,zero,8184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    812c:	e0bffd17 	ldw	r2,-12(fp)
    8130:	00c00074 	movhi	r3,1
    8134:	18eacc04 	addi	r3,r3,-21712
    8138:	100490fa 	slli	r2,r2,3
    813c:	10c5883a 	add	r2,r2,r3
    8140:	11400017 	ldw	r5,0(r2)
    8144:	e0bffd17 	ldw	r2,-12(fp)
    8148:	00c00074 	movhi	r3,1
    814c:	18eacc04 	addi	r3,r3,-21712
    8150:	100490fa 	slli	r2,r2,3
    8154:	10c5883a 	add	r2,r2,r3
    8158:	10800104 	addi	r2,r2,4
    815c:	11000017 	ldw	r4,0(r2)
    8160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8164:	0005313a 	rdctl	r2,ipending
    8168:	e0bffb15 	stw	r2,-20(fp)

  return active;
    816c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
    8170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
    8174:	e0bfff17 	ldw	r2,-4(fp)
    8178:	1004c03a 	cmpne	r2,r2,zero
    817c:	103fe31e 	bne	r2,zero,810c <alt_irq_handler+0x20>
    8180:	00000706 	br	81a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    8184:	e0bffe17 	ldw	r2,-8(fp)
    8188:	1085883a 	add	r2,r2,r2
    818c:	e0bffe15 	stw	r2,-8(fp)
      i++;
    8190:	e0bffd17 	ldw	r2,-12(fp)
    8194:	10800044 	addi	r2,r2,1
    8198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    819c:	003fde06 	br	8118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    81a0:	e037883a 	mov	sp,fp
    81a4:	dfc00117 	ldw	ra,4(sp)
    81a8:	df000017 	ldw	fp,0(sp)
    81ac:	dec00204 	addi	sp,sp,8
    81b0:	f800283a 	ret

Disassembly of section .text:

000081b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    81b4:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    81b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    81bc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    81c0:	d68a0714 	ori	gp,gp,10268
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    81c4:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    81c8:	10aac614 	ori	r2,r2,43800

    movhi r3, %hi(__bss_end)
    81cc:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    81d0:	18eb2f14 	ori	r3,r3,44220

    beq r2, r3, 1f
    81d4:	10c00326 	beq	r2,r3,81e4 <_start+0x30>

0:
    stw zero, (r2)
    81d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    81dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    81e0:	10fffd36 	bltu	r2,r3,81d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    81e4:	00090680 	call	9068 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    81e8:	00091540 	call	9154 <alt_main>

000081ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    81ec:	003fff06 	br	81ec <alt_after_alt_main>

000081f0 <timer_Init>:
#include "altera_avalon_timer_regs.h"
#include "sys/alt_irq.h"

unsigned int counter = 0;

void timer_Init(){
    81f0:	defffe04 	addi	sp,sp,-8
    81f4:	df000115 	stw	fp,4(sp)
    81f8:	df000104 	addi	fp,sp,4
    unsigned int period = 0;
    81fc:	e03fff15 	stw	zero,-4(fp)
    // Stop Timer
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE,
    8200:	00c00074 	movhi	r3,1
    8204:	18c40104 	addi	r3,r3,4100
    8208:	00800204 	movi	r2,8
    820c:	18800035 	stwio	r2,0(r3)
        ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
    //Configure period
    //Timer tao ngat deu dan moi mot giay (50 trieu chu ky clock = 1 giay)
    period = 50000000 - 1; //timer dem xuong, khi bang 0 -> ngat
    8210:	0080bef4 	movhi	r2,763
    8214:	10bc1fc4 	addi	r2,r2,-3969
    8218:	e0bfff15 	stw	r2,-4(fp)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, period);
    821c:	e0ffff17 	ldw	r3,-4(fp)
    8220:	00800074 	movhi	r2,1
    8224:	10840204 	addi	r2,r2,4104
    8228:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, (period >> 16));
    822c:	e0bfff17 	ldw	r2,-4(fp)
    8230:	1004d43a 	srli	r2,r2,16
    8234:	1007883a 	mov	r3,r2
    8238:	00800074 	movhi	r2,1
    823c:	10840304 	addi	r2,r2,4108
    8240:	10c00035 	stwio	r3,0(r2)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE,
    8244:	00c00074 	movhi	r3,1
    8248:	18c40104 	addi	r3,r3,4100
    824c:	008001c4 	movi	r2,7
    8250:	18800035 	stwio	r2,0(r3)
        ALTERA_AVALON_TIMER_CONTROL_CONT_MSK | // Continue counting mode
        ALTERA_AVALON_TIMER_CONTROL_ITO_MSK | // Interrupt enable //bat tat ngat dinh thoi (cong tac)
        ALTERA_AVALON_TIMER_CONTROL_START_MSK);// Start Timer
}
    8254:	e037883a 	mov	sp,fp
    8258:	df000017 	ldw	fp,0(sp)
    825c:	dec00104 	addi	sp,sp,4
    8260:	f800283a 	ret

00008264 <Timer_IRQ_Handler>:

void Timer_IRQ_Handler(void* isr_context){
    8264:	defffd04 	addi	sp,sp,-12
    8268:	dfc00215 	stw	ra,8(sp)
    826c:	df000115 	stw	fp,4(sp)
    8270:	df000104 	addi	fp,sp,4
    8274:	e13fff15 	stw	r4,-4(fp)
    counter ++;
    8278:	d0a0bf17 	ldw	r2,-32004(gp)
    827c:	10800044 	addi	r2,r2,1
    8280:	d0a0bf15 	stw	r2,-32004(gp)
    printf("%d seconds\n", counter);
    8284:	d160bf17 	ldw	r5,-32004(gp)
    8288:	01000074 	movhi	r4,1
    828c:	21294a04 	addi	r4,r4,-23256
    8290:	00082ec0 	call	82ec <printf>
    // Clear Timer interrupt bit
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE,
    8294:	00c00074 	movhi	r3,1
    8298:	18c40004 	addi	r3,r3,4096
    829c:	00800044 	movi	r2,1
    82a0:	18800035 	stwio	r2,0(r3)
        ALTERA_AVALON_TIMER_STATUS_TO_MSK);
}
    82a4:	e037883a 	mov	sp,fp
    82a8:	dfc00117 	ldw	ra,4(sp)
    82ac:	df000017 	ldw	fp,0(sp)
    82b0:	dec00204 	addi	sp,sp,8
    82b4:	f800283a 	ret

000082b8 <main>:

int main(){
    82b8:	defffd04 	addi	sp,sp,-12
    82bc:	dfc00215 	stw	ra,8(sp)
    82c0:	df000115 	stw	fp,4(sp)
    82c4:	df000104 	addi	fp,sp,4
    timer_Init();
    82c8:	00081f00 	call	81f0 <timer_Init>
    alt_ic_isr_register(0, TIMER_0_IRQ, Timer_IRQ_Handler, (void*)0,
    82cc:	d8000015 	stw	zero,0(sp)
    82d0:	0009883a 	mov	r4,zero
    82d4:	01400044 	movi	r5,1
    82d8:	01800074 	movhi	r6,1
    82dc:	31a09904 	addi	r6,r6,-32156
    82e0:	000f883a 	mov	r7,zero
    82e4:	0008d9c0 	call	8d9c <alt_ic_isr_register>
        (void*)0); //Khi timer tran, ngat tu dong xay ra
    while(1);
    82e8:	003fff06 	br	82e8 <main+0x30>

000082ec <printf>:
    82ec:	defffb04 	addi	sp,sp,-20
    82f0:	dfc00115 	stw	ra,4(sp)
    82f4:	d9400215 	stw	r5,8(sp)
    82f8:	d9800315 	stw	r6,12(sp)
    82fc:	d9c00415 	stw	r7,16(sp)
    8300:	00800074 	movhi	r2,1
    8304:	10aa0704 	addi	r2,r2,-22500
    8308:	11400017 	ldw	r5,0(r2)
    830c:	d8800204 	addi	r2,sp,8
    8310:	d8800015 	stw	r2,0(sp)
    8314:	29c00217 	ldw	r7,8(r5)
    8318:	100d883a 	mov	r6,r2
    831c:	00800074 	movhi	r2,1
    8320:	10a2b104 	addi	r2,r2,-30012
    8324:	200b883a 	mov	r5,r4
    8328:	38800115 	stw	r2,4(r7)
    832c:	3809883a 	mov	r4,r7
    8330:	0008aa00 	call	8aa0 <__vfprintf_internal>
    8334:	dfc00117 	ldw	ra,4(sp)
    8338:	dec00504 	addi	sp,sp,20
    833c:	f800283a 	ret

00008340 <_printf_r>:
    8340:	defffc04 	addi	sp,sp,-16
    8344:	dfc00115 	stw	ra,4(sp)
    8348:	d9800215 	stw	r6,8(sp)
    834c:	d9c00315 	stw	r7,12(sp)
    8350:	22000217 	ldw	r8,8(r4)
    8354:	d8800204 	addi	r2,sp,8
    8358:	d8800015 	stw	r2,0(sp)
    835c:	100f883a 	mov	r7,r2
    8360:	00800074 	movhi	r2,1
    8364:	10a2b104 	addi	r2,r2,-30012
    8368:	280d883a 	mov	r6,r5
    836c:	40800115 	stw	r2,4(r8)
    8370:	400b883a 	mov	r5,r8
    8374:	00084040 	call	8404 <___vfprintf_internal_r>
    8378:	dfc00117 	ldw	ra,4(sp)
    837c:	dec00404 	addi	sp,sp,16
    8380:	f800283a 	ret

00008384 <print_repeat>:
    8384:	defffb04 	addi	sp,sp,-20
    8388:	dc800315 	stw	r18,12(sp)
    838c:	dc400215 	stw	r17,8(sp)
    8390:	dc000115 	stw	r16,4(sp)
    8394:	dfc00415 	stw	ra,16(sp)
    8398:	2025883a 	mov	r18,r4
    839c:	2823883a 	mov	r17,r5
    83a0:	3821883a 	mov	r16,r7
    83a4:	d9800005 	stb	r6,0(sp)
    83a8:	9009883a 	mov	r4,r18
    83ac:	880b883a 	mov	r5,r17
    83b0:	d80d883a 	mov	r6,sp
    83b4:	01c00044 	movi	r7,1
    83b8:	04000b0e 	bge	zero,r16,83e8 <print_repeat+0x64>
    83bc:	88c00117 	ldw	r3,4(r17)
    83c0:	843fffc4 	addi	r16,r16,-1
    83c4:	183ee83a 	callr	r3
    83c8:	103ff726 	beq	r2,zero,83a8 <print_repeat+0x24>
    83cc:	00bfffc4 	movi	r2,-1
    83d0:	dfc00417 	ldw	ra,16(sp)
    83d4:	dc800317 	ldw	r18,12(sp)
    83d8:	dc400217 	ldw	r17,8(sp)
    83dc:	dc000117 	ldw	r16,4(sp)
    83e0:	dec00504 	addi	sp,sp,20
    83e4:	f800283a 	ret
    83e8:	0005883a 	mov	r2,zero
    83ec:	dfc00417 	ldw	ra,16(sp)
    83f0:	dc800317 	ldw	r18,12(sp)
    83f4:	dc400217 	ldw	r17,8(sp)
    83f8:	dc000117 	ldw	r16,4(sp)
    83fc:	dec00504 	addi	sp,sp,20
    8400:	f800283a 	ret

00008404 <___vfprintf_internal_r>:
    8404:	deffe304 	addi	sp,sp,-116
    8408:	df001b15 	stw	fp,108(sp)
    840c:	ddc01a15 	stw	r23,104(sp)
    8410:	dd001715 	stw	r20,92(sp)
    8414:	dc801515 	stw	r18,84(sp)
    8418:	dc001315 	stw	r16,76(sp)
    841c:	dfc01c15 	stw	ra,112(sp)
    8420:	dd801915 	stw	r22,100(sp)
    8424:	dd401815 	stw	r21,96(sp)
    8428:	dcc01615 	stw	r19,88(sp)
    842c:	dc401415 	stw	r17,80(sp)
    8430:	d9001015 	stw	r4,64(sp)
    8434:	2829883a 	mov	r20,r5
    8438:	d9c01115 	stw	r7,68(sp)
    843c:	3025883a 	mov	r18,r6
    8440:	0021883a 	mov	r16,zero
    8444:	d8000f15 	stw	zero,60(sp)
    8448:	d8000e15 	stw	zero,56(sp)
    844c:	0039883a 	mov	fp,zero
    8450:	d8000915 	stw	zero,36(sp)
    8454:	d8000d15 	stw	zero,52(sp)
    8458:	d8000c15 	stw	zero,48(sp)
    845c:	d8000b15 	stw	zero,44(sp)
    8460:	002f883a 	mov	r23,zero
    8464:	91400003 	ldbu	r5,0(r18)
    8468:	01c00044 	movi	r7,1
    846c:	94800044 	addi	r18,r18,1
    8470:	29003fcc 	andi	r4,r5,255
    8474:	2100201c 	xori	r4,r4,128
    8478:	213fe004 	addi	r4,r4,-128
    847c:	20001526 	beq	r4,zero,84d4 <___vfprintf_internal_r+0xd0>
    8480:	81c03526 	beq	r16,r7,8558 <___vfprintf_internal_r+0x154>
    8484:	3c002016 	blt	r7,r16,8508 <___vfprintf_internal_r+0x104>
    8488:	803ff61e 	bne	r16,zero,8464 <___vfprintf_internal_r+0x60>
    848c:	00800944 	movi	r2,37
    8490:	2081501e 	bne	r4,r2,89d4 <___vfprintf_internal_r+0x5d0>
    8494:	073fffc4 	movi	fp,-1
    8498:	00800284 	movi	r2,10
    849c:	d9c00c15 	stw	r7,48(sp)
    84a0:	d8000f15 	stw	zero,60(sp)
    84a4:	d8000e15 	stw	zero,56(sp)
    84a8:	df000915 	stw	fp,36(sp)
    84ac:	d8800d15 	stw	r2,52(sp)
    84b0:	d8000b15 	stw	zero,44(sp)
    84b4:	91400003 	ldbu	r5,0(r18)
    84b8:	3821883a 	mov	r16,r7
    84bc:	94800044 	addi	r18,r18,1
    84c0:	29003fcc 	andi	r4,r5,255
    84c4:	2100201c 	xori	r4,r4,128
    84c8:	213fe004 	addi	r4,r4,-128
    84cc:	01c00044 	movi	r7,1
    84d0:	203feb1e 	bne	r4,zero,8480 <___vfprintf_internal_r+0x7c>
    84d4:	b805883a 	mov	r2,r23
    84d8:	dfc01c17 	ldw	ra,112(sp)
    84dc:	df001b17 	ldw	fp,108(sp)
    84e0:	ddc01a17 	ldw	r23,104(sp)
    84e4:	dd801917 	ldw	r22,100(sp)
    84e8:	dd401817 	ldw	r21,96(sp)
    84ec:	dd001717 	ldw	r20,92(sp)
    84f0:	dcc01617 	ldw	r19,88(sp)
    84f4:	dc801517 	ldw	r18,84(sp)
    84f8:	dc401417 	ldw	r17,80(sp)
    84fc:	dc001317 	ldw	r16,76(sp)
    8500:	dec01d04 	addi	sp,sp,116
    8504:	f800283a 	ret
    8508:	00800084 	movi	r2,2
    850c:	80801726 	beq	r16,r2,856c <___vfprintf_internal_r+0x168>
    8510:	008000c4 	movi	r2,3
    8514:	80bfd31e 	bne	r16,r2,8464 <___vfprintf_internal_r+0x60>
    8518:	2c7ff404 	addi	r17,r5,-48
    851c:	88c03fcc 	andi	r3,r17,255
    8520:	00800244 	movi	r2,9
    8524:	10c02136 	bltu	r2,r3,85ac <___vfprintf_internal_r+0x1a8>
    8528:	d8c00917 	ldw	r3,36(sp)
    852c:	18012716 	blt	r3,zero,89cc <___vfprintf_internal_r+0x5c8>
    8530:	d9000917 	ldw	r4,36(sp)
    8534:	01400284 	movi	r5,10
    8538:	0008d640 	call	8d64 <__mulsi3>
    853c:	1007883a 	mov	r3,r2
    8540:	88803fcc 	andi	r2,r17,255
    8544:	1080201c 	xori	r2,r2,128
    8548:	10bfe004 	addi	r2,r2,-128
    854c:	1887883a 	add	r3,r3,r2
    8550:	d8c00915 	stw	r3,36(sp)
    8554:	003fc306 	br	8464 <___vfprintf_internal_r+0x60>
    8558:	00800c04 	movi	r2,48
    855c:	2080b326 	beq	r4,r2,882c <___vfprintf_internal_r+0x428>
    8560:	00800944 	movi	r2,37
    8564:	20812726 	beq	r4,r2,8a04 <___vfprintf_internal_r+0x600>
    8568:	04000084 	movi	r16,2
    856c:	2c7ff404 	addi	r17,r5,-48
    8570:	88c03fcc 	andi	r3,r17,255
    8574:	00800244 	movi	r2,9
    8578:	10c00a36 	bltu	r2,r3,85a4 <___vfprintf_internal_r+0x1a0>
    857c:	e000b416 	blt	fp,zero,8850 <___vfprintf_internal_r+0x44c>
    8580:	e009883a 	mov	r4,fp
    8584:	01400284 	movi	r5,10
    8588:	0008d640 	call	8d64 <__mulsi3>
    858c:	1007883a 	mov	r3,r2
    8590:	88803fcc 	andi	r2,r17,255
    8594:	1080201c 	xori	r2,r2,128
    8598:	10bfe004 	addi	r2,r2,-128
    859c:	18b9883a 	add	fp,r3,r2
    85a0:	003fb006 	br	8464 <___vfprintf_internal_r+0x60>
    85a4:	00800b84 	movi	r2,46
    85a8:	2080a326 	beq	r4,r2,8838 <___vfprintf_internal_r+0x434>
    85ac:	00801b04 	movi	r2,108
    85b0:	2080a326 	beq	r4,r2,8840 <___vfprintf_internal_r+0x43c>
    85b4:	d8c00917 	ldw	r3,36(sp)
    85b8:	1800a716 	blt	r3,zero,8858 <___vfprintf_internal_r+0x454>
    85bc:	d8000f15 	stw	zero,60(sp)
    85c0:	28bfea04 	addi	r2,r5,-88
    85c4:	10803fcc 	andi	r2,r2,255
    85c8:	00c00804 	movi	r3,32
    85cc:	18802836 	bltu	r3,r2,8670 <___vfprintf_internal_r+0x26c>
    85d0:	1085883a 	add	r2,r2,r2
    85d4:	1085883a 	add	r2,r2,r2
    85d8:	00c00074 	movhi	r3,1
    85dc:	18e17b04 	addi	r3,r3,-31252
    85e0:	10c5883a 	add	r2,r2,r3
    85e4:	11000017 	ldw	r4,0(r2)
    85e8:	2000683a 	jmp	r4
    85ec:	00008678 	rdprs	zero,zero,537
    85f0:	00008670 	cmpltui	zero,zero,537
    85f4:	00008670 	cmpltui	zero,zero,537
    85f8:	00008670 	cmpltui	zero,zero,537
    85fc:	00008670 	cmpltui	zero,zero,537
    8600:	00008670 	cmpltui	zero,zero,537
    8604:	00008670 	cmpltui	zero,zero,537
    8608:	00008670 	cmpltui	zero,zero,537
    860c:	00008670 	cmpltui	zero,zero,537
    8610:	00008670 	cmpltui	zero,zero,537
    8614:	00008670 	cmpltui	zero,zero,537
    8618:	000088a4 	muli	zero,zero,546
    861c:	0000868c 	andi	zero,zero,538
    8620:	00008670 	cmpltui	zero,zero,537
    8624:	00008670 	cmpltui	zero,zero,537
    8628:	00008670 	cmpltui	zero,zero,537
    862c:	00008670 	cmpltui	zero,zero,537
    8630:	0000868c 	andi	zero,zero,538
    8634:	00008670 	cmpltui	zero,zero,537
    8638:	00008670 	cmpltui	zero,zero,537
    863c:	00008670 	cmpltui	zero,zero,537
    8640:	00008670 	cmpltui	zero,zero,537
    8644:	00008670 	cmpltui	zero,zero,537
    8648:	0000890c 	andi	zero,zero,548
    864c:	00008670 	cmpltui	zero,zero,537
    8650:	00008670 	cmpltui	zero,zero,537
    8654:	00008670 	cmpltui	zero,zero,537
    8658:	0000891c 	xori	zero,zero,548
    865c:	00008670 	cmpltui	zero,zero,537
    8660:	000087f0 	cmpltui	zero,zero,543
    8664:	00008670 	cmpltui	zero,zero,537
    8668:	00008670 	cmpltui	zero,zero,537
    866c:	000087e8 	cmpgeui	zero,zero,543
    8670:	0021883a 	mov	r16,zero
    8674:	003f7b06 	br	8464 <___vfprintf_internal_r+0x60>
    8678:	00c00404 	movi	r3,16
    867c:	00800044 	movi	r2,1
    8680:	d8c00d15 	stw	r3,52(sp)
    8684:	d8000c15 	stw	zero,48(sp)
    8688:	d8800b15 	stw	r2,44(sp)
    868c:	d8c00e17 	ldw	r3,56(sp)
    8690:	1805003a 	cmpeq	r2,r3,zero
    8694:	10005a1e 	bne	r2,zero,8800 <___vfprintf_internal_r+0x3fc>
    8698:	d8800c17 	ldw	r2,48(sp)
    869c:	1000781e 	bne	r2,zero,8880 <___vfprintf_internal_r+0x47c>
    86a0:	d8801117 	ldw	r2,68(sp)
    86a4:	d8000a15 	stw	zero,40(sp)
    86a8:	14400017 	ldw	r17,0(r2)
    86ac:	11c00104 	addi	r7,r2,4
    86b0:	d9c01115 	stw	r7,68(sp)
    86b4:	88005a26 	beq	r17,zero,8820 <___vfprintf_internal_r+0x41c>
    86b8:	d8c00b17 	ldw	r3,44(sp)
    86bc:	dcc00044 	addi	r19,sp,1
    86c0:	05800244 	movi	r22,9
    86c4:	182b003a 	cmpeq	r21,r3,zero
    86c8:	dcc01215 	stw	r19,72(sp)
    86cc:	00000506 	br	86e4 <___vfprintf_internal_r+0x2e0>
    86d0:	21000c04 	addi	r4,r4,48
    86d4:	99000005 	stb	r4,0(r19)
    86d8:	9cc00044 	addi	r19,r19,1
    86dc:	80000f26 	beq	r16,zero,871c <___vfprintf_internal_r+0x318>
    86e0:	8023883a 	mov	r17,r16
    86e4:	d9400d17 	ldw	r5,52(sp)
    86e8:	8809883a 	mov	r4,r17
    86ec:	0008d540 	call	8d54 <__udivsi3>
    86f0:	d9000d17 	ldw	r4,52(sp)
    86f4:	100b883a 	mov	r5,r2
    86f8:	1021883a 	mov	r16,r2
    86fc:	0008d640 	call	8d64 <__mulsi3>
    8700:	8889c83a 	sub	r4,r17,r2
    8704:	b13ff20e 	bge	r22,r4,86d0 <___vfprintf_internal_r+0x2cc>
    8708:	a8009f1e 	bne	r21,zero,8988 <___vfprintf_internal_r+0x584>
    870c:	21000dc4 	addi	r4,r4,55
    8710:	99000005 	stb	r4,0(r19)
    8714:	9cc00044 	addi	r19,r19,1
    8718:	803ff11e 	bne	r16,zero,86e0 <___vfprintf_internal_r+0x2dc>
    871c:	d8801217 	ldw	r2,72(sp)
    8720:	98a3c83a 	sub	r17,r19,r2
    8724:	d8c00917 	ldw	r3,36(sp)
    8728:	1c4bc83a 	sub	r5,r3,r17
    872c:	0140130e 	bge	zero,r5,877c <___vfprintf_internal_r+0x378>
    8730:	d8c00044 	addi	r3,sp,1
    8734:	18800804 	addi	r2,r3,32
    8738:	9880102e 	bgeu	r19,r2,877c <___vfprintf_internal_r+0x378>
    873c:	00800c04 	movi	r2,48
    8740:	28ffffc4 	addi	r3,r5,-1
    8744:	98800005 	stb	r2,0(r19)
    8748:	99000044 	addi	r4,r19,1
    874c:	00c0080e 	bge	zero,r3,8770 <___vfprintf_internal_r+0x36c>
    8750:	d8c00044 	addi	r3,sp,1
    8754:	18800804 	addi	r2,r3,32
    8758:	2080052e 	bgeu	r4,r2,8770 <___vfprintf_internal_r+0x36c>
    875c:	00800c04 	movi	r2,48
    8760:	20800005 	stb	r2,0(r4)
    8764:	21000044 	addi	r4,r4,1
    8768:	9945883a 	add	r2,r19,r5
    876c:	20bff81e 	bne	r4,r2,8750 <___vfprintf_internal_r+0x34c>
    8770:	d8801217 	ldw	r2,72(sp)
    8774:	2027883a 	mov	r19,r4
    8778:	20a3c83a 	sub	r17,r4,r2
    877c:	d8c00a17 	ldw	r3,40(sp)
    8780:	1c45883a 	add	r2,r3,r17
    8784:	e0a1c83a 	sub	r16,fp,r2
    8788:	d8800f17 	ldw	r2,60(sp)
    878c:	10008026 	beq	r2,zero,8990 <___vfprintf_internal_r+0x58c>
    8790:	1805003a 	cmpeq	r2,r3,zero
    8794:	1000ae26 	beq	r2,zero,8a50 <___vfprintf_internal_r+0x64c>
    8798:	0400a516 	blt	zero,r16,8a30 <___vfprintf_internal_r+0x62c>
    879c:	b805883a 	mov	r2,r23
    87a0:	0440950e 	bge	zero,r17,89f8 <___vfprintf_internal_r+0x5f4>
    87a4:	102f883a 	mov	r23,r2
    87a8:	1461883a 	add	r16,r2,r17
    87ac:	00000206 	br	87b8 <___vfprintf_internal_r+0x3b4>
    87b0:	bdc00044 	addi	r23,r23,1
    87b4:	85ffae26 	beq	r16,r23,8670 <___vfprintf_internal_r+0x26c>
    87b8:	9cffffc4 	addi	r19,r19,-1
    87bc:	98800003 	ldbu	r2,0(r19)
    87c0:	a0c00117 	ldw	r3,4(r20)
    87c4:	d9001017 	ldw	r4,64(sp)
    87c8:	d8800005 	stb	r2,0(sp)
    87cc:	a00b883a 	mov	r5,r20
    87d0:	d80d883a 	mov	r6,sp
    87d4:	01c00044 	movi	r7,1
    87d8:	183ee83a 	callr	r3
    87dc:	103ff426 	beq	r2,zero,87b0 <___vfprintf_internal_r+0x3ac>
    87e0:	05ffffc4 	movi	r23,-1
    87e4:	003f3b06 	br	84d4 <___vfprintf_internal_r+0xd0>
    87e8:	00c00404 	movi	r3,16
    87ec:	d8c00d15 	stw	r3,52(sp)
    87f0:	d8000c15 	stw	zero,48(sp)
    87f4:	d8c00e17 	ldw	r3,56(sp)
    87f8:	1805003a 	cmpeq	r2,r3,zero
    87fc:	103fa626 	beq	r2,zero,8698 <___vfprintf_internal_r+0x294>
    8800:	d8c00c17 	ldw	r3,48(sp)
    8804:	1800171e 	bne	r3,zero,8864 <___vfprintf_internal_r+0x460>
    8808:	d8c01117 	ldw	r3,68(sp)
    880c:	d8000a15 	stw	zero,40(sp)
    8810:	1c400017 	ldw	r17,0(r3)
    8814:	19c00104 	addi	r7,r3,4
    8818:	d9c01115 	stw	r7,68(sp)
    881c:	883fa61e 	bne	r17,zero,86b8 <___vfprintf_internal_r+0x2b4>
    8820:	dcc00044 	addi	r19,sp,1
    8824:	dcc01215 	stw	r19,72(sp)
    8828:	003fbe06 	br	8724 <___vfprintf_internal_r+0x320>
    882c:	04000084 	movi	r16,2
    8830:	d9c00f15 	stw	r7,60(sp)
    8834:	003f0b06 	br	8464 <___vfprintf_internal_r+0x60>
    8838:	040000c4 	movi	r16,3
    883c:	003f0906 	br	8464 <___vfprintf_internal_r+0x60>
    8840:	00800044 	movi	r2,1
    8844:	040000c4 	movi	r16,3
    8848:	d8800e15 	stw	r2,56(sp)
    884c:	003f0506 	br	8464 <___vfprintf_internal_r+0x60>
    8850:	0007883a 	mov	r3,zero
    8854:	003f4e06 	br	8590 <___vfprintf_internal_r+0x18c>
    8858:	00800044 	movi	r2,1
    885c:	d8800915 	stw	r2,36(sp)
    8860:	003f5706 	br	85c0 <___vfprintf_internal_r+0x1bc>
    8864:	d8801117 	ldw	r2,68(sp)
    8868:	14400017 	ldw	r17,0(r2)
    886c:	10800104 	addi	r2,r2,4
    8870:	d8801115 	stw	r2,68(sp)
    8874:	88000716 	blt	r17,zero,8894 <___vfprintf_internal_r+0x490>
    8878:	d8000a15 	stw	zero,40(sp)
    887c:	003f8d06 	br	86b4 <___vfprintf_internal_r+0x2b0>
    8880:	d8c01117 	ldw	r3,68(sp)
    8884:	1c400017 	ldw	r17,0(r3)
    8888:	18c00104 	addi	r3,r3,4
    888c:	d8c01115 	stw	r3,68(sp)
    8890:	883ff90e 	bge	r17,zero,8878 <___vfprintf_internal_r+0x474>
    8894:	00800044 	movi	r2,1
    8898:	0463c83a 	sub	r17,zero,r17
    889c:	d8800a15 	stw	r2,40(sp)
    88a0:	003f8406 	br	86b4 <___vfprintf_internal_r+0x2b0>
    88a4:	04000044 	movi	r16,1
    88a8:	8700080e 	bge	r16,fp,88cc <___vfprintf_internal_r+0x4c8>
    88ac:	d9001017 	ldw	r4,64(sp)
    88b0:	a00b883a 	mov	r5,r20
    88b4:	01800804 	movi	r6,32
    88b8:	e1ffffc4 	addi	r7,fp,-1
    88bc:	00083840 	call	8384 <print_repeat>
    88c0:	103fc71e 	bne	r2,zero,87e0 <___vfprintf_internal_r+0x3dc>
    88c4:	e5c5883a 	add	r2,fp,r23
    88c8:	15ffffc4 	addi	r23,r2,-1
    88cc:	d8c01117 	ldw	r3,68(sp)
    88d0:	d9001017 	ldw	r4,64(sp)
    88d4:	800f883a 	mov	r7,r16
    88d8:	18800017 	ldw	r2,0(r3)
    88dc:	a0c00117 	ldw	r3,4(r20)
    88e0:	a00b883a 	mov	r5,r20
    88e4:	d8800005 	stb	r2,0(sp)
    88e8:	d80d883a 	mov	r6,sp
    88ec:	183ee83a 	callr	r3
    88f0:	103fbb1e 	bne	r2,zero,87e0 <___vfprintf_internal_r+0x3dc>
    88f4:	d8801117 	ldw	r2,68(sp)
    88f8:	bdc00044 	addi	r23,r23,1
    88fc:	0021883a 	mov	r16,zero
    8900:	10800104 	addi	r2,r2,4
    8904:	d8801115 	stw	r2,68(sp)
    8908:	003ed606 	br	8464 <___vfprintf_internal_r+0x60>
    890c:	00800204 	movi	r2,8
    8910:	d8800d15 	stw	r2,52(sp)
    8914:	d8000c15 	stw	zero,48(sp)
    8918:	003fb606 	br	87f4 <___vfprintf_internal_r+0x3f0>
    891c:	d8c01117 	ldw	r3,68(sp)
    8920:	1cc00017 	ldw	r19,0(r3)
    8924:	9809883a 	mov	r4,r19
    8928:	0008b800 	call	8b80 <strlen>
    892c:	e0a1c83a 	sub	r16,fp,r2
    8930:	1023883a 	mov	r17,r2
    8934:	0400070e 	bge	zero,r16,8954 <___vfprintf_internal_r+0x550>
    8938:	d9001017 	ldw	r4,64(sp)
    893c:	a00b883a 	mov	r5,r20
    8940:	01800804 	movi	r6,32
    8944:	800f883a 	mov	r7,r16
    8948:	00083840 	call	8384 <print_repeat>
    894c:	103fa41e 	bne	r2,zero,87e0 <___vfprintf_internal_r+0x3dc>
    8950:	bc2f883a 	add	r23,r23,r16
    8954:	a0c00117 	ldw	r3,4(r20)
    8958:	d9001017 	ldw	r4,64(sp)
    895c:	980d883a 	mov	r6,r19
    8960:	a00b883a 	mov	r5,r20
    8964:	880f883a 	mov	r7,r17
    8968:	183ee83a 	callr	r3
    896c:	103f9c1e 	bne	r2,zero,87e0 <___vfprintf_internal_r+0x3dc>
    8970:	d8801117 	ldw	r2,68(sp)
    8974:	bc6f883a 	add	r23,r23,r17
    8978:	0021883a 	mov	r16,zero
    897c:	10800104 	addi	r2,r2,4
    8980:	d8801115 	stw	r2,68(sp)
    8984:	003eb706 	br	8464 <___vfprintf_internal_r+0x60>
    8988:	210015c4 	addi	r4,r4,87
    898c:	003f5106 	br	86d4 <___vfprintf_internal_r+0x2d0>
    8990:	04003b16 	blt	zero,r16,8a80 <___vfprintf_internal_r+0x67c>
    8994:	d8c00a17 	ldw	r3,40(sp)
    8998:	1805003a 	cmpeq	r2,r3,zero
    899c:	103f7f1e 	bne	r2,zero,879c <___vfprintf_internal_r+0x398>
    89a0:	a0c00117 	ldw	r3,4(r20)
    89a4:	d9001017 	ldw	r4,64(sp)
    89a8:	00800b44 	movi	r2,45
    89ac:	d8800005 	stb	r2,0(sp)
    89b0:	a00b883a 	mov	r5,r20
    89b4:	d80d883a 	mov	r6,sp
    89b8:	01c00044 	movi	r7,1
    89bc:	183ee83a 	callr	r3
    89c0:	103f871e 	bne	r2,zero,87e0 <___vfprintf_internal_r+0x3dc>
    89c4:	b8800044 	addi	r2,r23,1
    89c8:	003f7506 	br	87a0 <___vfprintf_internal_r+0x39c>
    89cc:	0007883a 	mov	r3,zero
    89d0:	003edb06 	br	8540 <___vfprintf_internal_r+0x13c>
    89d4:	a0c00117 	ldw	r3,4(r20)
    89d8:	d9001017 	ldw	r4,64(sp)
    89dc:	d9400005 	stb	r5,0(sp)
    89e0:	d80d883a 	mov	r6,sp
    89e4:	a00b883a 	mov	r5,r20
    89e8:	183ee83a 	callr	r3
    89ec:	103f7c1e 	bne	r2,zero,87e0 <___vfprintf_internal_r+0x3dc>
    89f0:	bdc00044 	addi	r23,r23,1
    89f4:	003e9b06 	br	8464 <___vfprintf_internal_r+0x60>
    89f8:	102f883a 	mov	r23,r2
    89fc:	0021883a 	mov	r16,zero
    8a00:	003e9806 	br	8464 <___vfprintf_internal_r+0x60>
    8a04:	a0c00117 	ldw	r3,4(r20)
    8a08:	d9000005 	stb	r4,0(sp)
    8a0c:	d9001017 	ldw	r4,64(sp)
    8a10:	a00b883a 	mov	r5,r20
    8a14:	d80d883a 	mov	r6,sp
    8a18:	800f883a 	mov	r7,r16
    8a1c:	183ee83a 	callr	r3
    8a20:	103f6f1e 	bne	r2,zero,87e0 <___vfprintf_internal_r+0x3dc>
    8a24:	bc2f883a 	add	r23,r23,r16
    8a28:	0021883a 	mov	r16,zero
    8a2c:	003e8d06 	br	8464 <___vfprintf_internal_r+0x60>
    8a30:	d9001017 	ldw	r4,64(sp)
    8a34:	a00b883a 	mov	r5,r20
    8a38:	01800c04 	movi	r6,48
    8a3c:	800f883a 	mov	r7,r16
    8a40:	00083840 	call	8384 <print_repeat>
    8a44:	103f661e 	bne	r2,zero,87e0 <___vfprintf_internal_r+0x3dc>
    8a48:	bc05883a 	add	r2,r23,r16
    8a4c:	003f5406 	br	87a0 <___vfprintf_internal_r+0x39c>
    8a50:	a0c00117 	ldw	r3,4(r20)
    8a54:	d9001017 	ldw	r4,64(sp)
    8a58:	00800b44 	movi	r2,45
    8a5c:	d8800005 	stb	r2,0(sp)
    8a60:	a00b883a 	mov	r5,r20
    8a64:	d80d883a 	mov	r6,sp
    8a68:	01c00044 	movi	r7,1
    8a6c:	183ee83a 	callr	r3
    8a70:	103f5b1e 	bne	r2,zero,87e0 <___vfprintf_internal_r+0x3dc>
    8a74:	bdc00044 	addi	r23,r23,1
    8a78:	043f480e 	bge	zero,r16,879c <___vfprintf_internal_r+0x398>
    8a7c:	003fec06 	br	8a30 <___vfprintf_internal_r+0x62c>
    8a80:	d9001017 	ldw	r4,64(sp)
    8a84:	a00b883a 	mov	r5,r20
    8a88:	01800804 	movi	r6,32
    8a8c:	800f883a 	mov	r7,r16
    8a90:	00083840 	call	8384 <print_repeat>
    8a94:	103f521e 	bne	r2,zero,87e0 <___vfprintf_internal_r+0x3dc>
    8a98:	bc2f883a 	add	r23,r23,r16
    8a9c:	003fbd06 	br	8994 <___vfprintf_internal_r+0x590>

00008aa0 <__vfprintf_internal>:
    8aa0:	00800074 	movhi	r2,1
    8aa4:	10aa0704 	addi	r2,r2,-22500
    8aa8:	2013883a 	mov	r9,r4
    8aac:	11000017 	ldw	r4,0(r2)
    8ab0:	2805883a 	mov	r2,r5
    8ab4:	300f883a 	mov	r7,r6
    8ab8:	480b883a 	mov	r5,r9
    8abc:	100d883a 	mov	r6,r2
    8ac0:	00084041 	jmpi	8404 <___vfprintf_internal_r>

00008ac4 <__sfvwrite_small_dev>:
    8ac4:	2880000b 	ldhu	r2,0(r5)
    8ac8:	defffa04 	addi	sp,sp,-24
    8acc:	dcc00315 	stw	r19,12(sp)
    8ad0:	1080020c 	andi	r2,r2,8
    8ad4:	dc800215 	stw	r18,8(sp)
    8ad8:	dc400115 	stw	r17,4(sp)
    8adc:	dfc00515 	stw	ra,20(sp)
    8ae0:	dd000415 	stw	r20,16(sp)
    8ae4:	dc000015 	stw	r16,0(sp)
    8ae8:	2825883a 	mov	r18,r5
    8aec:	2027883a 	mov	r19,r4
    8af0:	3023883a 	mov	r17,r6
    8af4:	10002026 	beq	r2,zero,8b78 <__sfvwrite_small_dev+0xb4>
    8af8:	2940008f 	ldh	r5,2(r5)
    8afc:	28000f16 	blt	r5,zero,8b3c <__sfvwrite_small_dev+0x78>
    8b00:	01c01b0e 	bge	zero,r7,8b70 <__sfvwrite_small_dev+0xac>
    8b04:	3821883a 	mov	r16,r7
    8b08:	05010004 	movi	r20,1024
    8b0c:	00000206 	br	8b18 <__sfvwrite_small_dev+0x54>
    8b10:	0400170e 	bge	zero,r16,8b70 <__sfvwrite_small_dev+0xac>
    8b14:	9140008f 	ldh	r5,2(r18)
    8b18:	880d883a 	mov	r6,r17
    8b1c:	9809883a 	mov	r4,r19
    8b20:	800f883a 	mov	r7,r16
    8b24:	a400010e 	bge	r20,r16,8b2c <__sfvwrite_small_dev+0x68>
    8b28:	01c10004 	movi	r7,1024
    8b2c:	0008ba00 	call	8ba0 <_write_r>
    8b30:	88a3883a 	add	r17,r17,r2
    8b34:	80a1c83a 	sub	r16,r16,r2
    8b38:	00bff516 	blt	zero,r2,8b10 <__sfvwrite_small_dev+0x4c>
    8b3c:	9080000b 	ldhu	r2,0(r18)
    8b40:	00ffffc4 	movi	r3,-1
    8b44:	10801014 	ori	r2,r2,64
    8b48:	9080000d 	sth	r2,0(r18)
    8b4c:	1805883a 	mov	r2,r3
    8b50:	dfc00517 	ldw	ra,20(sp)
    8b54:	dd000417 	ldw	r20,16(sp)
    8b58:	dcc00317 	ldw	r19,12(sp)
    8b5c:	dc800217 	ldw	r18,8(sp)
    8b60:	dc400117 	ldw	r17,4(sp)
    8b64:	dc000017 	ldw	r16,0(sp)
    8b68:	dec00604 	addi	sp,sp,24
    8b6c:	f800283a 	ret
    8b70:	0007883a 	mov	r3,zero
    8b74:	003ff506 	br	8b4c <__sfvwrite_small_dev+0x88>
    8b78:	00ffffc4 	movi	r3,-1
    8b7c:	003ff306 	br	8b4c <__sfvwrite_small_dev+0x88>

00008b80 <strlen>:
    8b80:	20800007 	ldb	r2,0(r4)
    8b84:	10000526 	beq	r2,zero,8b9c <strlen+0x1c>
    8b88:	2007883a 	mov	r3,r4
    8b8c:	18c00044 	addi	r3,r3,1
    8b90:	18800007 	ldb	r2,0(r3)
    8b94:	103ffd1e 	bne	r2,zero,8b8c <strlen+0xc>
    8b98:	1905c83a 	sub	r2,r3,r4
    8b9c:	f800283a 	ret

00008ba0 <_write_r>:
    8ba0:	defffd04 	addi	sp,sp,-12
    8ba4:	dc000015 	stw	r16,0(sp)
    8ba8:	04000074 	movhi	r16,1
    8bac:	842ac704 	addi	r16,r16,-21732
    8bb0:	dc400115 	stw	r17,4(sp)
    8bb4:	80000015 	stw	zero,0(r16)
    8bb8:	2023883a 	mov	r17,r4
    8bbc:	2809883a 	mov	r4,r5
    8bc0:	300b883a 	mov	r5,r6
    8bc4:	380d883a 	mov	r6,r7
    8bc8:	dfc00215 	stw	ra,8(sp)
    8bcc:	00091c00 	call	91c0 <write>
    8bd0:	1007883a 	mov	r3,r2
    8bd4:	00bfffc4 	movi	r2,-1
    8bd8:	18800626 	beq	r3,r2,8bf4 <_write_r+0x54>
    8bdc:	1805883a 	mov	r2,r3
    8be0:	dfc00217 	ldw	ra,8(sp)
    8be4:	dc400117 	ldw	r17,4(sp)
    8be8:	dc000017 	ldw	r16,0(sp)
    8bec:	dec00304 	addi	sp,sp,12
    8bf0:	f800283a 	ret
    8bf4:	80800017 	ldw	r2,0(r16)
    8bf8:	103ff826 	beq	r2,zero,8bdc <_write_r+0x3c>
    8bfc:	88800015 	stw	r2,0(r17)
    8c00:	1805883a 	mov	r2,r3
    8c04:	dfc00217 	ldw	ra,8(sp)
    8c08:	dc400117 	ldw	r17,4(sp)
    8c0c:	dc000017 	ldw	r16,0(sp)
    8c10:	dec00304 	addi	sp,sp,12
    8c14:	f800283a 	ret

00008c18 <udivmodsi4>:
    8c18:	29001b2e 	bgeu	r5,r4,8c88 <udivmodsi4+0x70>
    8c1c:	28001a16 	blt	r5,zero,8c88 <udivmodsi4+0x70>
    8c20:	00800044 	movi	r2,1
    8c24:	0007883a 	mov	r3,zero
    8c28:	01c007c4 	movi	r7,31
    8c2c:	00000306 	br	8c3c <udivmodsi4+0x24>
    8c30:	19c01326 	beq	r3,r7,8c80 <udivmodsi4+0x68>
    8c34:	18c00044 	addi	r3,r3,1
    8c38:	28000416 	blt	r5,zero,8c4c <udivmodsi4+0x34>
    8c3c:	294b883a 	add	r5,r5,r5
    8c40:	1085883a 	add	r2,r2,r2
    8c44:	293ffa36 	bltu	r5,r4,8c30 <udivmodsi4+0x18>
    8c48:	10000d26 	beq	r2,zero,8c80 <udivmodsi4+0x68>
    8c4c:	0007883a 	mov	r3,zero
    8c50:	21400236 	bltu	r4,r5,8c5c <udivmodsi4+0x44>
    8c54:	2149c83a 	sub	r4,r4,r5
    8c58:	1886b03a 	or	r3,r3,r2
    8c5c:	1004d07a 	srli	r2,r2,1
    8c60:	280ad07a 	srli	r5,r5,1
    8c64:	103ffa1e 	bne	r2,zero,8c50 <udivmodsi4+0x38>
    8c68:	30000226 	beq	r6,zero,8c74 <udivmodsi4+0x5c>
    8c6c:	2005883a 	mov	r2,r4
    8c70:	f800283a 	ret
    8c74:	1809883a 	mov	r4,r3
    8c78:	2005883a 	mov	r2,r4
    8c7c:	f800283a 	ret
    8c80:	0007883a 	mov	r3,zero
    8c84:	003ff806 	br	8c68 <udivmodsi4+0x50>
    8c88:	00800044 	movi	r2,1
    8c8c:	0007883a 	mov	r3,zero
    8c90:	003fef06 	br	8c50 <udivmodsi4+0x38>

00008c94 <__divsi3>:
    8c94:	defffe04 	addi	sp,sp,-8
    8c98:	dc000015 	stw	r16,0(sp)
    8c9c:	dfc00115 	stw	ra,4(sp)
    8ca0:	0021883a 	mov	r16,zero
    8ca4:	20000c16 	blt	r4,zero,8cd8 <__divsi3+0x44>
    8ca8:	000d883a 	mov	r6,zero
    8cac:	28000e16 	blt	r5,zero,8ce8 <__divsi3+0x54>
    8cb0:	0008c180 	call	8c18 <udivmodsi4>
    8cb4:	1007883a 	mov	r3,r2
    8cb8:	8005003a 	cmpeq	r2,r16,zero
    8cbc:	1000011e 	bne	r2,zero,8cc4 <__divsi3+0x30>
    8cc0:	00c7c83a 	sub	r3,zero,r3
    8cc4:	1805883a 	mov	r2,r3
    8cc8:	dfc00117 	ldw	ra,4(sp)
    8ccc:	dc000017 	ldw	r16,0(sp)
    8cd0:	dec00204 	addi	sp,sp,8
    8cd4:	f800283a 	ret
    8cd8:	0109c83a 	sub	r4,zero,r4
    8cdc:	04000044 	movi	r16,1
    8ce0:	000d883a 	mov	r6,zero
    8ce4:	283ff20e 	bge	r5,zero,8cb0 <__divsi3+0x1c>
    8ce8:	014bc83a 	sub	r5,zero,r5
    8cec:	8021003a 	cmpeq	r16,r16,zero
    8cf0:	003fef06 	br	8cb0 <__divsi3+0x1c>

00008cf4 <__modsi3>:
    8cf4:	deffff04 	addi	sp,sp,-4
    8cf8:	dfc00015 	stw	ra,0(sp)
    8cfc:	01800044 	movi	r6,1
    8d00:	2807883a 	mov	r3,r5
    8d04:	20000416 	blt	r4,zero,8d18 <__modsi3+0x24>
    8d08:	28000c16 	blt	r5,zero,8d3c <__modsi3+0x48>
    8d0c:	dfc00017 	ldw	ra,0(sp)
    8d10:	dec00104 	addi	sp,sp,4
    8d14:	0008c181 	jmpi	8c18 <udivmodsi4>
    8d18:	0109c83a 	sub	r4,zero,r4
    8d1c:	28000b16 	blt	r5,zero,8d4c <__modsi3+0x58>
    8d20:	180b883a 	mov	r5,r3
    8d24:	01800044 	movi	r6,1
    8d28:	0008c180 	call	8c18 <udivmodsi4>
    8d2c:	0085c83a 	sub	r2,zero,r2
    8d30:	dfc00017 	ldw	ra,0(sp)
    8d34:	dec00104 	addi	sp,sp,4
    8d38:	f800283a 	ret
    8d3c:	014bc83a 	sub	r5,zero,r5
    8d40:	dfc00017 	ldw	ra,0(sp)
    8d44:	dec00104 	addi	sp,sp,4
    8d48:	0008c181 	jmpi	8c18 <udivmodsi4>
    8d4c:	0147c83a 	sub	r3,zero,r5
    8d50:	003ff306 	br	8d20 <__modsi3+0x2c>

00008d54 <__udivsi3>:
    8d54:	000d883a 	mov	r6,zero
    8d58:	0008c181 	jmpi	8c18 <udivmodsi4>

00008d5c <__umodsi3>:
    8d5c:	01800044 	movi	r6,1
    8d60:	0008c181 	jmpi	8c18 <udivmodsi4>

00008d64 <__mulsi3>:
    8d64:	20000a26 	beq	r4,zero,8d90 <__mulsi3+0x2c>
    8d68:	0007883a 	mov	r3,zero
    8d6c:	2080004c 	andi	r2,r4,1
    8d70:	1005003a 	cmpeq	r2,r2,zero
    8d74:	2008d07a 	srli	r4,r4,1
    8d78:	1000011e 	bne	r2,zero,8d80 <__mulsi3+0x1c>
    8d7c:	1947883a 	add	r3,r3,r5
    8d80:	294b883a 	add	r5,r5,r5
    8d84:	203ff91e 	bne	r4,zero,8d6c <__mulsi3+0x8>
    8d88:	1805883a 	mov	r2,r3
    8d8c:	f800283a 	ret
    8d90:	0007883a 	mov	r3,zero
    8d94:	1805883a 	mov	r2,r3
    8d98:	f800283a 	ret

00008d9c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    8d9c:	defff904 	addi	sp,sp,-28
    8da0:	dfc00615 	stw	ra,24(sp)
    8da4:	df000515 	stw	fp,20(sp)
    8da8:	df000504 	addi	fp,sp,20
    8dac:	e13ffc15 	stw	r4,-16(fp)
    8db0:	e17ffd15 	stw	r5,-12(fp)
    8db4:	e1bffe15 	stw	r6,-8(fp)
    8db8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    8dbc:	e0800217 	ldw	r2,8(fp)
    8dc0:	d8800015 	stw	r2,0(sp)
    8dc4:	e13ffc17 	ldw	r4,-16(fp)
    8dc8:	e17ffd17 	ldw	r5,-12(fp)
    8dcc:	e1bffe17 	ldw	r6,-8(fp)
    8dd0:	e1ffff17 	ldw	r7,-4(fp)
    8dd4:	0008f700 	call	8f70 <alt_iic_isr_register>
}  
    8dd8:	e037883a 	mov	sp,fp
    8ddc:	dfc00117 	ldw	ra,4(sp)
    8de0:	df000017 	ldw	fp,0(sp)
    8de4:	dec00204 	addi	sp,sp,8
    8de8:	f800283a 	ret

00008dec <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    8dec:	defff904 	addi	sp,sp,-28
    8df0:	df000615 	stw	fp,24(sp)
    8df4:	df000604 	addi	fp,sp,24
    8df8:	e13ffe15 	stw	r4,-8(fp)
    8dfc:	e17fff15 	stw	r5,-4(fp)
    8e00:	e0bfff17 	ldw	r2,-4(fp)
    8e04:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8e08:	0005303a 	rdctl	r2,status
    8e0c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8e10:	e0fffb17 	ldw	r3,-20(fp)
    8e14:	00bfff84 	movi	r2,-2
    8e18:	1884703a 	and	r2,r3,r2
    8e1c:	1001703a 	wrctl	status,r2
  
  return context;
    8e20:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    8e24:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    8e28:	e0fffc17 	ldw	r3,-16(fp)
    8e2c:	00800044 	movi	r2,1
    8e30:	10c4983a 	sll	r2,r2,r3
    8e34:	1007883a 	mov	r3,r2
    8e38:	00800074 	movhi	r2,1
    8e3c:	10aac804 	addi	r2,r2,-21728
    8e40:	10800017 	ldw	r2,0(r2)
    8e44:	1886b03a 	or	r3,r3,r2
    8e48:	00800074 	movhi	r2,1
    8e4c:	10aac804 	addi	r2,r2,-21728
    8e50:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    8e54:	00800074 	movhi	r2,1
    8e58:	10aac804 	addi	r2,r2,-21728
    8e5c:	10800017 	ldw	r2,0(r2)
    8e60:	100170fa 	wrctl	ienable,r2
    8e64:	e0bffd17 	ldw	r2,-12(fp)
    8e68:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8e6c:	e0bffa17 	ldw	r2,-24(fp)
    8e70:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    8e74:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    8e78:	e037883a 	mov	sp,fp
    8e7c:	df000017 	ldw	fp,0(sp)
    8e80:	dec00104 	addi	sp,sp,4
    8e84:	f800283a 	ret

00008e88 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    8e88:	defff904 	addi	sp,sp,-28
    8e8c:	df000615 	stw	fp,24(sp)
    8e90:	df000604 	addi	fp,sp,24
    8e94:	e13ffe15 	stw	r4,-8(fp)
    8e98:	e17fff15 	stw	r5,-4(fp)
    8e9c:	e0bfff17 	ldw	r2,-4(fp)
    8ea0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8ea4:	0005303a 	rdctl	r2,status
    8ea8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8eac:	e0fffb17 	ldw	r3,-20(fp)
    8eb0:	00bfff84 	movi	r2,-2
    8eb4:	1884703a 	and	r2,r3,r2
    8eb8:	1001703a 	wrctl	status,r2
  
  return context;
    8ebc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    8ec0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    8ec4:	e0fffc17 	ldw	r3,-16(fp)
    8ec8:	00800044 	movi	r2,1
    8ecc:	10c4983a 	sll	r2,r2,r3
    8ed0:	0084303a 	nor	r2,zero,r2
    8ed4:	1007883a 	mov	r3,r2
    8ed8:	00800074 	movhi	r2,1
    8edc:	10aac804 	addi	r2,r2,-21728
    8ee0:	10800017 	ldw	r2,0(r2)
    8ee4:	1886703a 	and	r3,r3,r2
    8ee8:	00800074 	movhi	r2,1
    8eec:	10aac804 	addi	r2,r2,-21728
    8ef0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    8ef4:	00800074 	movhi	r2,1
    8ef8:	10aac804 	addi	r2,r2,-21728
    8efc:	10800017 	ldw	r2,0(r2)
    8f00:	100170fa 	wrctl	ienable,r2
    8f04:	e0bffd17 	ldw	r2,-12(fp)
    8f08:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8f0c:	e0bffa17 	ldw	r2,-24(fp)
    8f10:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    8f14:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    8f18:	e037883a 	mov	sp,fp
    8f1c:	df000017 	ldw	fp,0(sp)
    8f20:	dec00104 	addi	sp,sp,4
    8f24:	f800283a 	ret

00008f28 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    8f28:	defffc04 	addi	sp,sp,-16
    8f2c:	df000315 	stw	fp,12(sp)
    8f30:	df000304 	addi	fp,sp,12
    8f34:	e13ffe15 	stw	r4,-8(fp)
    8f38:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    8f3c:	000530fa 	rdctl	r2,ienable
    8f40:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    8f44:	e0ffff17 	ldw	r3,-4(fp)
    8f48:	00800044 	movi	r2,1
    8f4c:	10c4983a 	sll	r2,r2,r3
    8f50:	1007883a 	mov	r3,r2
    8f54:	e0bffd17 	ldw	r2,-12(fp)
    8f58:	1884703a 	and	r2,r3,r2
    8f5c:	1004c03a 	cmpne	r2,r2,zero
}
    8f60:	e037883a 	mov	sp,fp
    8f64:	df000017 	ldw	fp,0(sp)
    8f68:	dec00104 	addi	sp,sp,4
    8f6c:	f800283a 	ret

00008f70 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    8f70:	defff404 	addi	sp,sp,-48
    8f74:	dfc00b15 	stw	ra,44(sp)
    8f78:	df000a15 	stw	fp,40(sp)
    8f7c:	df000a04 	addi	fp,sp,40
    8f80:	e13ffb15 	stw	r4,-20(fp)
    8f84:	e17ffc15 	stw	r5,-16(fp)
    8f88:	e1bffd15 	stw	r6,-12(fp)
    8f8c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    8f90:	00bffa84 	movi	r2,-22
    8f94:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    8f98:	e0bffc17 	ldw	r2,-16(fp)
    8f9c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    8fa0:	e0bff917 	ldw	r2,-28(fp)
    8fa4:	10800808 	cmpgei	r2,r2,32
    8fa8:	1000291e 	bne	r2,zero,9050 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8fac:	0005303a 	rdctl	r2,status
    8fb0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8fb4:	e0fff717 	ldw	r3,-36(fp)
    8fb8:	00bfff84 	movi	r2,-2
    8fbc:	1884703a 	and	r2,r3,r2
    8fc0:	1001703a 	wrctl	status,r2
  
  return context;
    8fc4:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    8fc8:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    8fcc:	e0bff917 	ldw	r2,-28(fp)
    8fd0:	00c00074 	movhi	r3,1
    8fd4:	18eacc04 	addi	r3,r3,-21712
    8fd8:	100490fa 	slli	r2,r2,3
    8fdc:	10c7883a 	add	r3,r2,r3
    8fe0:	e0bffd17 	ldw	r2,-12(fp)
    8fe4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    8fe8:	e0bff917 	ldw	r2,-28(fp)
    8fec:	00c00074 	movhi	r3,1
    8ff0:	18eacc04 	addi	r3,r3,-21712
    8ff4:	100490fa 	slli	r2,r2,3
    8ff8:	10c5883a 	add	r2,r2,r3
    8ffc:	10c00104 	addi	r3,r2,4
    9000:	e0bffe17 	ldw	r2,-8(fp)
    9004:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    9008:	e0bffd17 	ldw	r2,-12(fp)
    900c:	1005003a 	cmpeq	r2,r2,zero
    9010:	1000051e 	bne	r2,zero,9028 <alt_iic_isr_register+0xb8>
    9014:	e17ff917 	ldw	r5,-28(fp)
    9018:	e13ffb17 	ldw	r4,-20(fp)
    901c:	0008dec0 	call	8dec <alt_ic_irq_enable>
    9020:	e0bfff15 	stw	r2,-4(fp)
    9024:	00000406 	br	9038 <alt_iic_isr_register+0xc8>
    9028:	e17ff917 	ldw	r5,-28(fp)
    902c:	e13ffb17 	ldw	r4,-20(fp)
    9030:	0008e880 	call	8e88 <alt_ic_irq_disable>
    9034:	e0bfff15 	stw	r2,-4(fp)
    9038:	e0bfff17 	ldw	r2,-4(fp)
    903c:	e0bffa15 	stw	r2,-24(fp)
    9040:	e0bff817 	ldw	r2,-32(fp)
    9044:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9048:	e0bff617 	ldw	r2,-40(fp)
    904c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    9050:	e0bffa17 	ldw	r2,-24(fp)
}
    9054:	e037883a 	mov	sp,fp
    9058:	dfc00117 	ldw	ra,4(sp)
    905c:	df000017 	ldw	fp,0(sp)
    9060:	dec00204 	addi	sp,sp,8
    9064:	f800283a 	ret

00009068 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    9068:	defffe04 	addi	sp,sp,-8
    906c:	dfc00115 	stw	ra,4(sp)
    9070:	df000015 	stw	fp,0(sp)
    9074:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    9078:	01000074 	movhi	r4,1
    907c:	212a1004 	addi	r4,r4,-22464
    9080:	01400074 	movhi	r5,1
    9084:	29695a04 	addi	r5,r5,-23192
    9088:	01800074 	movhi	r6,1
    908c:	31aa1004 	addi	r6,r6,-22464
    9090:	00090e80 	call	90e8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    9094:	01000074 	movhi	r4,1
    9098:	21200804 	addi	r4,r4,-32736
    909c:	01400074 	movhi	r5,1
    90a0:	29600804 	addi	r5,r5,-32736
    90a4:	01800074 	movhi	r6,1
    90a8:	31a06d04 	addi	r6,r6,-32332
    90ac:	00090e80 	call	90e8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    90b0:	01000074 	movhi	r4,1
    90b4:	21294a04 	addi	r4,r4,-23256
    90b8:	01400074 	movhi	r5,1
    90bc:	29694a04 	addi	r5,r5,-23256
    90c0:	01800074 	movhi	r6,1
    90c4:	31a95a04 	addi	r6,r6,-23192
    90c8:	00090e80 	call	90e8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    90cc:	00097980 	call	9798 <alt_dcache_flush_all>
  alt_icache_flush_all();
    90d0:	00099bc0 	call	99bc <alt_icache_flush_all>
}
    90d4:	e037883a 	mov	sp,fp
    90d8:	dfc00117 	ldw	ra,4(sp)
    90dc:	df000017 	ldw	fp,0(sp)
    90e0:	dec00204 	addi	sp,sp,8
    90e4:	f800283a 	ret

000090e8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    90e8:	defffc04 	addi	sp,sp,-16
    90ec:	df000315 	stw	fp,12(sp)
    90f0:	df000304 	addi	fp,sp,12
    90f4:	e13ffd15 	stw	r4,-12(fp)
    90f8:	e17ffe15 	stw	r5,-8(fp)
    90fc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    9100:	e0fffe17 	ldw	r3,-8(fp)
    9104:	e0bffd17 	ldw	r2,-12(fp)
    9108:	18800e26 	beq	r3,r2,9144 <alt_load_section+0x5c>
  {
    while( to != end )
    910c:	00000a06 	br	9138 <alt_load_section+0x50>
    {
      *to++ = *from++;
    9110:	e0bffd17 	ldw	r2,-12(fp)
    9114:	10c00017 	ldw	r3,0(r2)
    9118:	e0bffe17 	ldw	r2,-8(fp)
    911c:	10c00015 	stw	r3,0(r2)
    9120:	e0bffe17 	ldw	r2,-8(fp)
    9124:	10800104 	addi	r2,r2,4
    9128:	e0bffe15 	stw	r2,-8(fp)
    912c:	e0bffd17 	ldw	r2,-12(fp)
    9130:	10800104 	addi	r2,r2,4
    9134:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    9138:	e0fffe17 	ldw	r3,-8(fp)
    913c:	e0bfff17 	ldw	r2,-4(fp)
    9140:	18bff31e 	bne	r3,r2,9110 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    9144:	e037883a 	mov	sp,fp
    9148:	df000017 	ldw	fp,0(sp)
    914c:	dec00104 	addi	sp,sp,4
    9150:	f800283a 	ret

00009154 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    9154:	defffd04 	addi	sp,sp,-12
    9158:	dfc00215 	stw	ra,8(sp)
    915c:	df000115 	stw	fp,4(sp)
    9160:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    9164:	0009883a 	mov	r4,zero
    9168:	00093440 	call	9344 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    916c:	00093780 	call	9378 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    9170:	01000074 	movhi	r4,1
    9174:	21294d04 	addi	r4,r4,-23244
    9178:	01400074 	movhi	r5,1
    917c:	29694d04 	addi	r5,r5,-23244
    9180:	01800074 	movhi	r6,1
    9184:	31a94d04 	addi	r6,r6,-23244
    9188:	0009ab00 	call	9ab0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    918c:	00098f40 	call	98f4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    9190:	01000074 	movhi	r4,1
    9194:	21265604 	addi	r4,r4,-26280
    9198:	000a1280 	call	a128 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    919c:	d120c217 	ldw	r4,-31992(gp)
    91a0:	d160c317 	ldw	r5,-31988(gp)
    91a4:	d1a0c417 	ldw	r6,-31984(gp)
    91a8:	00082b80 	call	82b8 <main>
    91ac:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    91b0:	01000044 	movi	r4,1
    91b4:	00096380 	call	9638 <close>
  exit (result);
    91b8:	e13fff17 	ldw	r4,-4(fp)
    91bc:	000a13c0 	call	a13c <exit>

000091c0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    91c0:	defff704 	addi	sp,sp,-36
    91c4:	dfc00815 	stw	ra,32(sp)
    91c8:	df000715 	stw	fp,28(sp)
    91cc:	df000704 	addi	fp,sp,28
    91d0:	e13ffb15 	stw	r4,-20(fp)
    91d4:	e17ffc15 	stw	r5,-16(fp)
    91d8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    91dc:	e0bffb17 	ldw	r2,-20(fp)
    91e0:	1004803a 	cmplt	r2,r2,zero
    91e4:	1000091e 	bne	r2,zero,920c <write+0x4c>
    91e8:	e13ffb17 	ldw	r4,-20(fp)
    91ec:	01400304 	movi	r5,12
    91f0:	0008d640 	call	8d64 <__mulsi3>
    91f4:	1007883a 	mov	r3,r2
    91f8:	00800074 	movhi	r2,1
    91fc:	10a9a704 	addi	r2,r2,-22884
    9200:	1887883a 	add	r3,r3,r2
    9204:	e0ffff15 	stw	r3,-4(fp)
    9208:	00000106 	br	9210 <write+0x50>
    920c:	e03fff15 	stw	zero,-4(fp)
    9210:	e0bfff17 	ldw	r2,-4(fp)
    9214:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    9218:	e0bffa17 	ldw	r2,-24(fp)
    921c:	1005003a 	cmpeq	r2,r2,zero
    9220:	1000241e 	bne	r2,zero,92b4 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    9224:	e0bffa17 	ldw	r2,-24(fp)
    9228:	10800217 	ldw	r2,8(r2)
    922c:	108000cc 	andi	r2,r2,3
    9230:	1005003a 	cmpeq	r2,r2,zero
    9234:	10001a1e 	bne	r2,zero,92a0 <write+0xe0>
    9238:	e0bffa17 	ldw	r2,-24(fp)
    923c:	10800017 	ldw	r2,0(r2)
    9240:	10800617 	ldw	r2,24(r2)
    9244:	1005003a 	cmpeq	r2,r2,zero
    9248:	1000151e 	bne	r2,zero,92a0 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    924c:	e0bffa17 	ldw	r2,-24(fp)
    9250:	10800017 	ldw	r2,0(r2)
    9254:	10800617 	ldw	r2,24(r2)
    9258:	e17ffc17 	ldw	r5,-16(fp)
    925c:	e1bffd17 	ldw	r6,-12(fp)
    9260:	e13ffa17 	ldw	r4,-24(fp)
    9264:	103ee83a 	callr	r2
    9268:	e0bff915 	stw	r2,-28(fp)
    926c:	e0bff917 	ldw	r2,-28(fp)
    9270:	1004403a 	cmpge	r2,r2,zero
    9274:	1000071e 	bne	r2,zero,9294 <write+0xd4>
      {
        ALT_ERRNO = -rval;
    9278:	00092e40 	call	92e4 <alt_get_errno>
    927c:	e0fff917 	ldw	r3,-28(fp)
    9280:	00c7c83a 	sub	r3,zero,r3
    9284:	10c00015 	stw	r3,0(r2)
        return -1;
    9288:	00bfffc4 	movi	r2,-1
    928c:	e0bffe15 	stw	r2,-8(fp)
    9290:	00000e06 	br	92cc <write+0x10c>
      }
      return rval;
    9294:	e0bff917 	ldw	r2,-28(fp)
    9298:	e0bffe15 	stw	r2,-8(fp)
    929c:	00000b06 	br	92cc <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
    92a0:	00092e40 	call	92e4 <alt_get_errno>
    92a4:	1007883a 	mov	r3,r2
    92a8:	00800344 	movi	r2,13
    92ac:	18800015 	stw	r2,0(r3)
    92b0:	00000406 	br	92c4 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    92b4:	00092e40 	call	92e4 <alt_get_errno>
    92b8:	1007883a 	mov	r3,r2
    92bc:	00801444 	movi	r2,81
    92c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    92c4:	00bfffc4 	movi	r2,-1
    92c8:	e0bffe15 	stw	r2,-8(fp)
    92cc:	e0bffe17 	ldw	r2,-8(fp)
}
    92d0:	e037883a 	mov	sp,fp
    92d4:	dfc00117 	ldw	ra,4(sp)
    92d8:	df000017 	ldw	fp,0(sp)
    92dc:	dec00204 	addi	sp,sp,8
    92e0:	f800283a 	ret

000092e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    92e4:	defffd04 	addi	sp,sp,-12
    92e8:	dfc00215 	stw	ra,8(sp)
    92ec:	df000115 	stw	fp,4(sp)
    92f0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    92f4:	00800074 	movhi	r2,1
    92f8:	10aa0f04 	addi	r2,r2,-22468
    92fc:	10800017 	ldw	r2,0(r2)
    9300:	1005003a 	cmpeq	r2,r2,zero
    9304:	1000061e 	bne	r2,zero,9320 <alt_get_errno+0x3c>
    9308:	00800074 	movhi	r2,1
    930c:	10aa0f04 	addi	r2,r2,-22468
    9310:	10800017 	ldw	r2,0(r2)
    9314:	103ee83a 	callr	r2
    9318:	e0bfff15 	stw	r2,-4(fp)
    931c:	00000306 	br	932c <alt_get_errno+0x48>
    9320:	00800074 	movhi	r2,1
    9324:	10aac704 	addi	r2,r2,-21732
    9328:	e0bfff15 	stw	r2,-4(fp)
    932c:	e0bfff17 	ldw	r2,-4(fp)
}
    9330:	e037883a 	mov	sp,fp
    9334:	dfc00117 	ldw	ra,4(sp)
    9338:	df000017 	ldw	fp,0(sp)
    933c:	dec00204 	addi	sp,sp,8
    9340:	f800283a 	ret

00009344 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    9344:	defffd04 	addi	sp,sp,-12
    9348:	dfc00215 	stw	ra,8(sp)
    934c:	df000115 	stw	fp,4(sp)
    9350:	df000104 	addi	fp,sp,4
    9354:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    9358:	0009e840 	call	9e84 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    935c:	00800044 	movi	r2,1
    9360:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    9364:	e037883a 	mov	sp,fp
    9368:	dfc00117 	ldw	ra,4(sp)
    936c:	df000017 	ldw	fp,0(sp)
    9370:	dec00204 	addi	sp,sp,8
    9374:	f800283a 	ret

00009378 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    9378:	defffe04 	addi	sp,sp,-8
    937c:	dfc00115 	stw	ra,4(sp)
    9380:	df000015 	stw	fp,0(sp)
    9384:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    9388:	01000074 	movhi	r4,1
    938c:	21299204 	addi	r4,r4,-22968
    9390:	00093a80 	call	93a8 <alt_dev_reg>
}
    9394:	e037883a 	mov	sp,fp
    9398:	dfc00117 	ldw	ra,4(sp)
    939c:	df000017 	ldw	fp,0(sp)
    93a0:	dec00204 	addi	sp,sp,8
    93a4:	f800283a 	ret

000093a8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    93a8:	defffd04 	addi	sp,sp,-12
    93ac:	dfc00215 	stw	ra,8(sp)
    93b0:	df000115 	stw	fp,4(sp)
    93b4:	df000104 	addi	fp,sp,4
    93b8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    93bc:	e13fff17 	ldw	r4,-4(fp)
    93c0:	01400074 	movhi	r5,1
    93c4:	296a0c04 	addi	r5,r5,-22480
    93c8:	00097e00 	call	97e0 <alt_dev_llist_insert>
}
    93cc:	e037883a 	mov	sp,fp
    93d0:	dfc00117 	ldw	ra,4(sp)
    93d4:	df000017 	ldw	fp,0(sp)
    93d8:	dec00204 	addi	sp,sp,8
    93dc:	f800283a 	ret

000093e0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    93e0:	defffa04 	addi	sp,sp,-24
    93e4:	dfc00515 	stw	ra,20(sp)
    93e8:	df000415 	stw	fp,16(sp)
    93ec:	df000404 	addi	fp,sp,16
    93f0:	e13ffd15 	stw	r4,-12(fp)
    93f4:	e17ffe15 	stw	r5,-8(fp)
    93f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    93fc:	e0bffd17 	ldw	r2,-12(fp)
    9400:	10800017 	ldw	r2,0(r2)
    9404:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    9408:	e0bffc17 	ldw	r2,-16(fp)
    940c:	11000a04 	addi	r4,r2,40
    9410:	e0bffd17 	ldw	r2,-12(fp)
    9414:	11c00217 	ldw	r7,8(r2)
    9418:	e17ffe17 	ldw	r5,-8(fp)
    941c:	e1bfff17 	ldw	r6,-4(fp)
    9420:	00094900 	call	9490 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    9424:	e037883a 	mov	sp,fp
    9428:	dfc00117 	ldw	ra,4(sp)
    942c:	df000017 	ldw	fp,0(sp)
    9430:	dec00204 	addi	sp,sp,8
    9434:	f800283a 	ret

00009438 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    9438:	defffa04 	addi	sp,sp,-24
    943c:	dfc00515 	stw	ra,20(sp)
    9440:	df000415 	stw	fp,16(sp)
    9444:	df000404 	addi	fp,sp,16
    9448:	e13ffd15 	stw	r4,-12(fp)
    944c:	e17ffe15 	stw	r5,-8(fp)
    9450:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9454:	e0bffd17 	ldw	r2,-12(fp)
    9458:	10800017 	ldw	r2,0(r2)
    945c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    9460:	e0bffc17 	ldw	r2,-16(fp)
    9464:	11000a04 	addi	r4,r2,40
    9468:	e0bffd17 	ldw	r2,-12(fp)
    946c:	11c00217 	ldw	r7,8(r2)
    9470:	e17ffe17 	ldw	r5,-8(fp)
    9474:	e1bfff17 	ldw	r6,-4(fp)
    9478:	00095940 	call	9594 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    947c:	e037883a 	mov	sp,fp
    9480:	dfc00117 	ldw	ra,4(sp)
    9484:	df000017 	ldw	fp,0(sp)
    9488:	dec00204 	addi	sp,sp,8
    948c:	f800283a 	ret

00009490 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    9490:	defff604 	addi	sp,sp,-40
    9494:	df000915 	stw	fp,36(sp)
    9498:	df000904 	addi	fp,sp,36
    949c:	e13ffb15 	stw	r4,-20(fp)
    94a0:	e17ffc15 	stw	r5,-16(fp)
    94a4:	e1bffd15 	stw	r6,-12(fp)
    94a8:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
    94ac:	e0bffb17 	ldw	r2,-20(fp)
    94b0:	10800017 	ldw	r2,0(r2)
    94b4:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
    94b8:	e0bffc17 	ldw	r2,-16(fp)
    94bc:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
    94c0:	e0bffd17 	ldw	r2,-12(fp)
    94c4:	1007883a 	mov	r3,r2
    94c8:	e0bffc17 	ldw	r2,-16(fp)
    94cc:	10c5883a 	add	r2,r2,r3
    94d0:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
    94d4:	00001606 	br	9530 <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    94d8:	e0bffa17 	ldw	r2,-24(fp)
    94dc:	10800037 	ldwio	r2,0(r2)
    94e0:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    94e4:	e0bff717 	ldw	r2,-36(fp)
    94e8:	10a0000c 	andi	r2,r2,32768
    94ec:	1005003a 	cmpeq	r2,r2,zero
    94f0:	1000081e 	bne	r2,zero,9514 <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    94f4:	e0bff717 	ldw	r2,-36(fp)
    94f8:	1007883a 	mov	r3,r2
    94fc:	e0bff917 	ldw	r2,-28(fp)
    9500:	10c00005 	stb	r3,0(r2)
    9504:	e0bff917 	ldw	r2,-28(fp)
    9508:	10800044 	addi	r2,r2,1
    950c:	e0bff915 	stw	r2,-28(fp)
    9510:	00000706 	br	9530 <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
    9514:	e0fff917 	ldw	r3,-28(fp)
    9518:	e0bffc17 	ldw	r2,-16(fp)
    951c:	1880071e 	bne	r3,r2,953c <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
    9520:	e0bffe17 	ldw	r2,-8(fp)
    9524:	1090000c 	andi	r2,r2,16384
    9528:	1004c03a 	cmpne	r2,r2,zero
    952c:	1000031e 	bne	r2,zero,953c <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    9530:	e0fff917 	ldw	r3,-28(fp)
    9534:	e0bff817 	ldw	r2,-32(fp)
    9538:	18bfe736 	bltu	r3,r2,94d8 <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
    953c:	e0fff917 	ldw	r3,-28(fp)
    9540:	e0bffc17 	ldw	r2,-16(fp)
    9544:	18800526 	beq	r3,r2,955c <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    9548:	e0fff917 	ldw	r3,-28(fp)
    954c:	e0bffc17 	ldw	r2,-16(fp)
    9550:	1887c83a 	sub	r3,r3,r2
    9554:	e0ffff15 	stw	r3,-4(fp)
    9558:	00000906 	br	9580 <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
    955c:	e0bffe17 	ldw	r2,-8(fp)
    9560:	1090000c 	andi	r2,r2,16384
    9564:	1005003a 	cmpeq	r2,r2,zero
    9568:	1000031e 	bne	r2,zero,9578 <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
    956c:	00bffd44 	movi	r2,-11
    9570:	e0bfff15 	stw	r2,-4(fp)
    9574:	00000206 	br	9580 <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
    9578:	00bffec4 	movi	r2,-5
    957c:	e0bfff15 	stw	r2,-4(fp)
    9580:	e0bfff17 	ldw	r2,-4(fp)
}
    9584:	e037883a 	mov	sp,fp
    9588:	df000017 	ldw	fp,0(sp)
    958c:	dec00104 	addi	sp,sp,4
    9590:	f800283a 	ret

00009594 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    9594:	defff904 	addi	sp,sp,-28
    9598:	df000615 	stw	fp,24(sp)
    959c:	df000604 	addi	fp,sp,24
    95a0:	e13ffc15 	stw	r4,-16(fp)
    95a4:	e17ffd15 	stw	r5,-12(fp)
    95a8:	e1bffe15 	stw	r6,-8(fp)
    95ac:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    95b0:	e0bffc17 	ldw	r2,-16(fp)
    95b4:	10800017 	ldw	r2,0(r2)
    95b8:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
    95bc:	e0bffe17 	ldw	r2,-8(fp)
    95c0:	1007883a 	mov	r3,r2
    95c4:	e0bffd17 	ldw	r2,-12(fp)
    95c8:	10c5883a 	add	r2,r2,r3
    95cc:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    95d0:	00001106 	br	9618 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    95d4:	e0bffb17 	ldw	r2,-20(fp)
    95d8:	10800104 	addi	r2,r2,4
    95dc:	10800037 	ldwio	r2,0(r2)
    95e0:	10bfffec 	andhi	r2,r2,65535
    95e4:	1005003a 	cmpeq	r2,r2,zero
    95e8:	10000b1e 	bne	r2,zero,9618 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    95ec:	e13ffb17 	ldw	r4,-20(fp)
    95f0:	e0bffd17 	ldw	r2,-12(fp)
    95f4:	10800003 	ldbu	r2,0(r2)
    95f8:	10c03fcc 	andi	r3,r2,255
    95fc:	18c0201c 	xori	r3,r3,128
    9600:	18ffe004 	addi	r3,r3,-128
    9604:	e0bffd17 	ldw	r2,-12(fp)
    9608:	10800044 	addi	r2,r2,1
    960c:	e0bffd15 	stw	r2,-12(fp)
    9610:	2005883a 	mov	r2,r4
    9614:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    9618:	e0fffd17 	ldw	r3,-12(fp)
    961c:	e0bffa17 	ldw	r2,-24(fp)
    9620:	18bfec36 	bltu	r3,r2,95d4 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    9624:	e0bffe17 	ldw	r2,-8(fp)
}
    9628:	e037883a 	mov	sp,fp
    962c:	df000017 	ldw	fp,0(sp)
    9630:	dec00104 	addi	sp,sp,4
    9634:	f800283a 	ret

00009638 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9638:	defff804 	addi	sp,sp,-32
    963c:	dfc00715 	stw	ra,28(sp)
    9640:	df000615 	stw	fp,24(sp)
    9644:	df000604 	addi	fp,sp,24
    9648:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    964c:	e0bffc17 	ldw	r2,-16(fp)
    9650:	1004803a 	cmplt	r2,r2,zero
    9654:	1000091e 	bne	r2,zero,967c <close+0x44>
    9658:	e13ffc17 	ldw	r4,-16(fp)
    965c:	01400304 	movi	r5,12
    9660:	0008d640 	call	8d64 <__mulsi3>
    9664:	1007883a 	mov	r3,r2
    9668:	00800074 	movhi	r2,1
    966c:	10a9a704 	addi	r2,r2,-22884
    9670:	1887883a 	add	r3,r3,r2
    9674:	e0ffff15 	stw	r3,-4(fp)
    9678:	00000106 	br	9680 <close+0x48>
    967c:	e03fff15 	stw	zero,-4(fp)
    9680:	e0bfff17 	ldw	r2,-4(fp)
    9684:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    9688:	e0bffb17 	ldw	r2,-20(fp)
    968c:	1005003a 	cmpeq	r2,r2,zero
    9690:	10001d1e 	bne	r2,zero,9708 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9694:	e0bffb17 	ldw	r2,-20(fp)
    9698:	10800017 	ldw	r2,0(r2)
    969c:	10800417 	ldw	r2,16(r2)
    96a0:	1005003a 	cmpeq	r2,r2,zero
    96a4:	1000071e 	bne	r2,zero,96c4 <close+0x8c>
    96a8:	e0bffb17 	ldw	r2,-20(fp)
    96ac:	10800017 	ldw	r2,0(r2)
    96b0:	10800417 	ldw	r2,16(r2)
    96b4:	e13ffb17 	ldw	r4,-20(fp)
    96b8:	103ee83a 	callr	r2
    96bc:	e0bffe15 	stw	r2,-8(fp)
    96c0:	00000106 	br	96c8 <close+0x90>
    96c4:	e03ffe15 	stw	zero,-8(fp)
    96c8:	e0bffe17 	ldw	r2,-8(fp)
    96cc:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    96d0:	e13ffc17 	ldw	r4,-16(fp)
    96d4:	0009e0c0 	call	9e0c <alt_release_fd>
    if (rval < 0)
    96d8:	e0bffa17 	ldw	r2,-24(fp)
    96dc:	1004403a 	cmpge	r2,r2,zero
    96e0:	1000071e 	bne	r2,zero,9700 <close+0xc8>
    {
      ALT_ERRNO = -rval;
    96e4:	00097380 	call	9738 <alt_get_errno>
    96e8:	e0fffa17 	ldw	r3,-24(fp)
    96ec:	00c7c83a 	sub	r3,zero,r3
    96f0:	10c00015 	stw	r3,0(r2)
      return -1;
    96f4:	00bfffc4 	movi	r2,-1
    96f8:	e0bffd15 	stw	r2,-12(fp)
    96fc:	00000806 	br	9720 <close+0xe8>
    }
    return 0;
    9700:	e03ffd15 	stw	zero,-12(fp)
    9704:	00000606 	br	9720 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9708:	00097380 	call	9738 <alt_get_errno>
    970c:	1007883a 	mov	r3,r2
    9710:	00801444 	movi	r2,81
    9714:	18800015 	stw	r2,0(r3)
    return -1;
    9718:	00bfffc4 	movi	r2,-1
    971c:	e0bffd15 	stw	r2,-12(fp)
    9720:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    9724:	e037883a 	mov	sp,fp
    9728:	dfc00117 	ldw	ra,4(sp)
    972c:	df000017 	ldw	fp,0(sp)
    9730:	dec00204 	addi	sp,sp,8
    9734:	f800283a 	ret

00009738 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9738:	defffd04 	addi	sp,sp,-12
    973c:	dfc00215 	stw	ra,8(sp)
    9740:	df000115 	stw	fp,4(sp)
    9744:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9748:	00800074 	movhi	r2,1
    974c:	10aa0f04 	addi	r2,r2,-22468
    9750:	10800017 	ldw	r2,0(r2)
    9754:	1005003a 	cmpeq	r2,r2,zero
    9758:	1000061e 	bne	r2,zero,9774 <alt_get_errno+0x3c>
    975c:	00800074 	movhi	r2,1
    9760:	10aa0f04 	addi	r2,r2,-22468
    9764:	10800017 	ldw	r2,0(r2)
    9768:	103ee83a 	callr	r2
    976c:	e0bfff15 	stw	r2,-4(fp)
    9770:	00000306 	br	9780 <alt_get_errno+0x48>
    9774:	00800074 	movhi	r2,1
    9778:	10aac704 	addi	r2,r2,-21732
    977c:	e0bfff15 	stw	r2,-4(fp)
    9780:	e0bfff17 	ldw	r2,-4(fp)
}
    9784:	e037883a 	mov	sp,fp
    9788:	dfc00117 	ldw	ra,4(sp)
    978c:	df000017 	ldw	fp,0(sp)
    9790:	dec00204 	addi	sp,sp,8
    9794:	f800283a 	ret

00009798 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    9798:	deffff04 	addi	sp,sp,-4
    979c:	df000015 	stw	fp,0(sp)
    97a0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    97a4:	e037883a 	mov	sp,fp
    97a8:	df000017 	ldw	fp,0(sp)
    97ac:	dec00104 	addi	sp,sp,4
    97b0:	f800283a 	ret

000097b4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    97b4:	defffc04 	addi	sp,sp,-16
    97b8:	df000315 	stw	fp,12(sp)
    97bc:	df000304 	addi	fp,sp,12
    97c0:	e13ffd15 	stw	r4,-12(fp)
    97c4:	e17ffe15 	stw	r5,-8(fp)
    97c8:	e1bfff15 	stw	r6,-4(fp)
  return len;
    97cc:	e0bfff17 	ldw	r2,-4(fp)
}
    97d0:	e037883a 	mov	sp,fp
    97d4:	df000017 	ldw	fp,0(sp)
    97d8:	dec00104 	addi	sp,sp,4
    97dc:	f800283a 	ret

000097e0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    97e0:	defff904 	addi	sp,sp,-28
    97e4:	dfc00615 	stw	ra,24(sp)
    97e8:	df000515 	stw	fp,20(sp)
    97ec:	df000504 	addi	fp,sp,20
    97f0:	e13ffd15 	stw	r4,-12(fp)
    97f4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    97f8:	e0bffd17 	ldw	r2,-12(fp)
    97fc:	1005003a 	cmpeq	r2,r2,zero
    9800:	1000041e 	bne	r2,zero,9814 <alt_dev_llist_insert+0x34>
    9804:	e0bffd17 	ldw	r2,-12(fp)
    9808:	10800217 	ldw	r2,8(r2)
    980c:	1004c03a 	cmpne	r2,r2,zero
    9810:	1000071e 	bne	r2,zero,9830 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    9814:	00098940 	call	9894 <alt_get_errno>
    9818:	1007883a 	mov	r3,r2
    981c:	00800584 	movi	r2,22
    9820:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    9824:	00bffa84 	movi	r2,-22
    9828:	e0bfff15 	stw	r2,-4(fp)
    982c:	00001306 	br	987c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    9830:	e0fffd17 	ldw	r3,-12(fp)
    9834:	e0bffe17 	ldw	r2,-8(fp)
    9838:	e0bffb15 	stw	r2,-20(fp)
    983c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    9840:	e0fffc17 	ldw	r3,-16(fp)
    9844:	e0bffb17 	ldw	r2,-20(fp)
    9848:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    984c:	e0bffb17 	ldw	r2,-20(fp)
    9850:	10c00017 	ldw	r3,0(r2)
    9854:	e0bffc17 	ldw	r2,-16(fp)
    9858:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    985c:	e0bffb17 	ldw	r2,-20(fp)
    9860:	10c00017 	ldw	r3,0(r2)
    9864:	e0bffc17 	ldw	r2,-16(fp)
    9868:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    986c:	e0fffb17 	ldw	r3,-20(fp)
    9870:	e0bffc17 	ldw	r2,-16(fp)
    9874:	18800015 	stw	r2,0(r3)

  return 0;  
    9878:	e03fff15 	stw	zero,-4(fp)
    987c:	e0bfff17 	ldw	r2,-4(fp)
}
    9880:	e037883a 	mov	sp,fp
    9884:	dfc00117 	ldw	ra,4(sp)
    9888:	df000017 	ldw	fp,0(sp)
    988c:	dec00204 	addi	sp,sp,8
    9890:	f800283a 	ret

00009894 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9894:	defffd04 	addi	sp,sp,-12
    9898:	dfc00215 	stw	ra,8(sp)
    989c:	df000115 	stw	fp,4(sp)
    98a0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    98a4:	00800074 	movhi	r2,1
    98a8:	10aa0f04 	addi	r2,r2,-22468
    98ac:	10800017 	ldw	r2,0(r2)
    98b0:	1005003a 	cmpeq	r2,r2,zero
    98b4:	1000061e 	bne	r2,zero,98d0 <alt_get_errno+0x3c>
    98b8:	00800074 	movhi	r2,1
    98bc:	10aa0f04 	addi	r2,r2,-22468
    98c0:	10800017 	ldw	r2,0(r2)
    98c4:	103ee83a 	callr	r2
    98c8:	e0bfff15 	stw	r2,-4(fp)
    98cc:	00000306 	br	98dc <alt_get_errno+0x48>
    98d0:	00800074 	movhi	r2,1
    98d4:	10aac704 	addi	r2,r2,-21732
    98d8:	e0bfff15 	stw	r2,-4(fp)
    98dc:	e0bfff17 	ldw	r2,-4(fp)
}
    98e0:	e037883a 	mov	sp,fp
    98e4:	dfc00117 	ldw	ra,4(sp)
    98e8:	df000017 	ldw	fp,0(sp)
    98ec:	dec00204 	addi	sp,sp,8
    98f0:	f800283a 	ret

000098f4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    98f4:	defffd04 	addi	sp,sp,-12
    98f8:	dfc00215 	stw	ra,8(sp)
    98fc:	df000115 	stw	fp,4(sp)
    9900:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    9904:	00bfff04 	movi	r2,-4
    9908:	00c00074 	movhi	r3,1
    990c:	18e94a04 	addi	r3,r3,-23256
    9910:	1885883a 	add	r2,r3,r2
    9914:	e0bfff15 	stw	r2,-4(fp)
    9918:	00000606 	br	9934 <_do_ctors+0x40>
        (*ctor) (); 
    991c:	e0bfff17 	ldw	r2,-4(fp)
    9920:	10800017 	ldw	r2,0(r2)
    9924:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    9928:	e0bfff17 	ldw	r2,-4(fp)
    992c:	10bfff04 	addi	r2,r2,-4
    9930:	e0bfff15 	stw	r2,-4(fp)
    9934:	e0ffff17 	ldw	r3,-4(fp)
    9938:	00800074 	movhi	r2,1
    993c:	10a94904 	addi	r2,r2,-23260
    9940:	18bff62e 	bgeu	r3,r2,991c <_do_ctors+0x28>
        (*ctor) (); 
}
    9944:	e037883a 	mov	sp,fp
    9948:	dfc00117 	ldw	ra,4(sp)
    994c:	df000017 	ldw	fp,0(sp)
    9950:	dec00204 	addi	sp,sp,8
    9954:	f800283a 	ret

00009958 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    9958:	defffd04 	addi	sp,sp,-12
    995c:	dfc00215 	stw	ra,8(sp)
    9960:	df000115 	stw	fp,4(sp)
    9964:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    9968:	00bfff04 	movi	r2,-4
    996c:	00c00074 	movhi	r3,1
    9970:	18e94a04 	addi	r3,r3,-23256
    9974:	1885883a 	add	r2,r3,r2
    9978:	e0bfff15 	stw	r2,-4(fp)
    997c:	00000606 	br	9998 <_do_dtors+0x40>
        (*dtor) (); 
    9980:	e0bfff17 	ldw	r2,-4(fp)
    9984:	10800017 	ldw	r2,0(r2)
    9988:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    998c:	e0bfff17 	ldw	r2,-4(fp)
    9990:	10bfff04 	addi	r2,r2,-4
    9994:	e0bfff15 	stw	r2,-4(fp)
    9998:	e0ffff17 	ldw	r3,-4(fp)
    999c:	00800074 	movhi	r2,1
    99a0:	10a94a04 	addi	r2,r2,-23256
    99a4:	18bff62e 	bgeu	r3,r2,9980 <_do_dtors+0x28>
        (*dtor) (); 
}
    99a8:	e037883a 	mov	sp,fp
    99ac:	dfc00117 	ldw	ra,4(sp)
    99b0:	df000017 	ldw	fp,0(sp)
    99b4:	dec00204 	addi	sp,sp,8
    99b8:	f800283a 	ret

000099bc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    99bc:	deffff04 	addi	sp,sp,-4
    99c0:	df000015 	stw	fp,0(sp)
    99c4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    99c8:	e037883a 	mov	sp,fp
    99cc:	df000017 	ldw	fp,0(sp)
    99d0:	dec00104 	addi	sp,sp,4
    99d4:	f800283a 	ret

000099d8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    99d8:	defff804 	addi	sp,sp,-32
    99dc:	dfc00715 	stw	ra,28(sp)
    99e0:	df000615 	stw	fp,24(sp)
    99e4:	dc000515 	stw	r16,20(sp)
    99e8:	df000504 	addi	fp,sp,20
    99ec:	e13ffc15 	stw	r4,-16(fp)
    99f0:	e17ffd15 	stw	r5,-12(fp)
    99f4:	e1bffe15 	stw	r6,-8(fp)
    99f8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    99fc:	e13ffd17 	ldw	r4,-12(fp)
    9a00:	e17ffe17 	ldw	r5,-8(fp)
    9a04:	e1bfff17 	ldw	r6,-4(fp)
    9a08:	0009c200 	call	9c20 <open>
    9a0c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    9a10:	e0bffb17 	ldw	r2,-20(fp)
    9a14:	1004803a 	cmplt	r2,r2,zero
    9a18:	10001f1e 	bne	r2,zero,9a98 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    9a1c:	e13ffb17 	ldw	r4,-20(fp)
    9a20:	04000074 	movhi	r16,1
    9a24:	8429a704 	addi	r16,r16,-22884
    9a28:	01400304 	movi	r5,12
    9a2c:	0008d640 	call	8d64 <__mulsi3>
    9a30:	1405883a 	add	r2,r2,r16
    9a34:	10c00017 	ldw	r3,0(r2)
    9a38:	e0bffc17 	ldw	r2,-16(fp)
    9a3c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    9a40:	e13ffb17 	ldw	r4,-20(fp)
    9a44:	04000074 	movhi	r16,1
    9a48:	8429a704 	addi	r16,r16,-22884
    9a4c:	01400304 	movi	r5,12
    9a50:	0008d640 	call	8d64 <__mulsi3>
    9a54:	1405883a 	add	r2,r2,r16
    9a58:	10800104 	addi	r2,r2,4
    9a5c:	10c00017 	ldw	r3,0(r2)
    9a60:	e0bffc17 	ldw	r2,-16(fp)
    9a64:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    9a68:	e13ffb17 	ldw	r4,-20(fp)
    9a6c:	04000074 	movhi	r16,1
    9a70:	8429a704 	addi	r16,r16,-22884
    9a74:	01400304 	movi	r5,12
    9a78:	0008d640 	call	8d64 <__mulsi3>
    9a7c:	1405883a 	add	r2,r2,r16
    9a80:	10800204 	addi	r2,r2,8
    9a84:	10c00017 	ldw	r3,0(r2)
    9a88:	e0bffc17 	ldw	r2,-16(fp)
    9a8c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    9a90:	e13ffb17 	ldw	r4,-20(fp)
    9a94:	0009e0c0 	call	9e0c <alt_release_fd>
  }
} 
    9a98:	e037883a 	mov	sp,fp
    9a9c:	dfc00217 	ldw	ra,8(sp)
    9aa0:	df000117 	ldw	fp,4(sp)
    9aa4:	dc000017 	ldw	r16,0(sp)
    9aa8:	dec00304 	addi	sp,sp,12
    9aac:	f800283a 	ret

00009ab0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    9ab0:	defffb04 	addi	sp,sp,-20
    9ab4:	dfc00415 	stw	ra,16(sp)
    9ab8:	df000315 	stw	fp,12(sp)
    9abc:	df000304 	addi	fp,sp,12
    9ac0:	e13ffd15 	stw	r4,-12(fp)
    9ac4:	e17ffe15 	stw	r5,-8(fp)
    9ac8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    9acc:	01000074 	movhi	r4,1
    9ad0:	2129aa04 	addi	r4,r4,-22872
    9ad4:	e17ffd17 	ldw	r5,-12(fp)
    9ad8:	01800044 	movi	r6,1
    9adc:	01c07fc4 	movi	r7,511
    9ae0:	00099d80 	call	99d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    9ae4:	01000074 	movhi	r4,1
    9ae8:	2129a704 	addi	r4,r4,-22884
    9aec:	e17ffe17 	ldw	r5,-8(fp)
    9af0:	000d883a 	mov	r6,zero
    9af4:	01c07fc4 	movi	r7,511
    9af8:	00099d80 	call	99d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    9afc:	01000074 	movhi	r4,1
    9b00:	2129ad04 	addi	r4,r4,-22860
    9b04:	e17fff17 	ldw	r5,-4(fp)
    9b08:	01800044 	movi	r6,1
    9b0c:	01c07fc4 	movi	r7,511
    9b10:	00099d80 	call	99d8 <alt_open_fd>
}  
    9b14:	e037883a 	mov	sp,fp
    9b18:	dfc00117 	ldw	ra,4(sp)
    9b1c:	df000017 	ldw	fp,0(sp)
    9b20:	dec00204 	addi	sp,sp,8
    9b24:	f800283a 	ret

00009b28 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    9b28:	defffa04 	addi	sp,sp,-24
    9b2c:	dfc00515 	stw	ra,20(sp)
    9b30:	df000415 	stw	fp,16(sp)
    9b34:	dc000315 	stw	r16,12(sp)
    9b38:	df000304 	addi	fp,sp,12
    9b3c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    9b40:	e0bffe17 	ldw	r2,-8(fp)
    9b44:	10800217 	ldw	r2,8(r2)
    9b48:	10d00034 	orhi	r3,r2,16384
    9b4c:	e0bffe17 	ldw	r2,-8(fp)
    9b50:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9b54:	e03ffd15 	stw	zero,-12(fp)
    9b58:	00002306 	br	9be8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9b5c:	e13ffd17 	ldw	r4,-12(fp)
    9b60:	04000074 	movhi	r16,1
    9b64:	8429a704 	addi	r16,r16,-22884
    9b68:	01400304 	movi	r5,12
    9b6c:	0008d640 	call	8d64 <__mulsi3>
    9b70:	1405883a 	add	r2,r2,r16
    9b74:	10c00017 	ldw	r3,0(r2)
    9b78:	e0bffe17 	ldw	r2,-8(fp)
    9b7c:	10800017 	ldw	r2,0(r2)
    9b80:	1880161e 	bne	r3,r2,9bdc <alt_file_locked+0xb4>
    9b84:	e13ffd17 	ldw	r4,-12(fp)
    9b88:	04000074 	movhi	r16,1
    9b8c:	8429a704 	addi	r16,r16,-22884
    9b90:	01400304 	movi	r5,12
    9b94:	0008d640 	call	8d64 <__mulsi3>
    9b98:	1405883a 	add	r2,r2,r16
    9b9c:	10800204 	addi	r2,r2,8
    9ba0:	10800017 	ldw	r2,0(r2)
    9ba4:	1004403a 	cmpge	r2,r2,zero
    9ba8:	10000c1e 	bne	r2,zero,9bdc <alt_file_locked+0xb4>
    9bac:	e13ffd17 	ldw	r4,-12(fp)
    9bb0:	01400304 	movi	r5,12
    9bb4:	0008d640 	call	8d64 <__mulsi3>
    9bb8:	1007883a 	mov	r3,r2
    9bbc:	00800074 	movhi	r2,1
    9bc0:	10a9a704 	addi	r2,r2,-22884
    9bc4:	1887883a 	add	r3,r3,r2
    9bc8:	e0bffe17 	ldw	r2,-8(fp)
    9bcc:	18800326 	beq	r3,r2,9bdc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    9bd0:	00bffcc4 	movi	r2,-13
    9bd4:	e0bfff15 	stw	r2,-4(fp)
    9bd8:	00000a06 	br	9c04 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9bdc:	e0bffd17 	ldw	r2,-12(fp)
    9be0:	10800044 	addi	r2,r2,1
    9be4:	e0bffd15 	stw	r2,-12(fp)
    9be8:	00800074 	movhi	r2,1
    9bec:	10aa0e04 	addi	r2,r2,-22472
    9bf0:	10800017 	ldw	r2,0(r2)
    9bf4:	1007883a 	mov	r3,r2
    9bf8:	e0bffd17 	ldw	r2,-12(fp)
    9bfc:	18bfd72e 	bgeu	r3,r2,9b5c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    9c00:	e03fff15 	stw	zero,-4(fp)
    9c04:	e0bfff17 	ldw	r2,-4(fp)
}
    9c08:	e037883a 	mov	sp,fp
    9c0c:	dfc00217 	ldw	ra,8(sp)
    9c10:	df000117 	ldw	fp,4(sp)
    9c14:	dc000017 	ldw	r16,0(sp)
    9c18:	dec00304 	addi	sp,sp,12
    9c1c:	f800283a 	ret

00009c20 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    9c20:	defff404 	addi	sp,sp,-48
    9c24:	dfc00b15 	stw	ra,44(sp)
    9c28:	df000a15 	stw	fp,40(sp)
    9c2c:	df000a04 	addi	fp,sp,40
    9c30:	e13ffb15 	stw	r4,-20(fp)
    9c34:	e17ffc15 	stw	r5,-16(fp)
    9c38:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    9c3c:	00bfffc4 	movi	r2,-1
    9c40:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    9c44:	00bffb44 	movi	r2,-19
    9c48:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    9c4c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    9c50:	e13ffb17 	ldw	r4,-20(fp)
    9c54:	01400074 	movhi	r5,1
    9c58:	296a0c04 	addi	r5,r5,-22480
    9c5c:	0009ea40 	call	9ea4 <alt_find_dev>
    9c60:	e0bffa15 	stw	r2,-24(fp)
    9c64:	e0bffa17 	ldw	r2,-24(fp)
    9c68:	1004c03a 	cmpne	r2,r2,zero
    9c6c:	1000051e 	bne	r2,zero,9c84 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    9c70:	e13ffb17 	ldw	r4,-20(fp)
    9c74:	0009f380 	call	9f38 <alt_find_file>
    9c78:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    9c7c:	00800044 	movi	r2,1
    9c80:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    9c84:	e0bffa17 	ldw	r2,-24(fp)
    9c88:	1005003a 	cmpeq	r2,r2,zero
    9c8c:	1000311e 	bne	r2,zero,9d54 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    9c90:	e13ffa17 	ldw	r4,-24(fp)
    9c94:	000a0580 	call	a058 <alt_get_fd>
    9c98:	e0bff815 	stw	r2,-32(fp)
    9c9c:	e0bff817 	ldw	r2,-32(fp)
    9ca0:	1004403a 	cmpge	r2,r2,zero
    9ca4:	1000031e 	bne	r2,zero,9cb4 <open+0x94>
    {
      status = index;
    9ca8:	e0bff817 	ldw	r2,-32(fp)
    9cac:	e0bff715 	stw	r2,-36(fp)
    9cb0:	00002a06 	br	9d5c <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    9cb4:	e13ff817 	ldw	r4,-32(fp)
    9cb8:	01400304 	movi	r5,12
    9cbc:	0008d640 	call	8d64 <__mulsi3>
    9cc0:	1007883a 	mov	r3,r2
    9cc4:	00800074 	movhi	r2,1
    9cc8:	10a9a704 	addi	r2,r2,-22884
    9ccc:	1885883a 	add	r2,r3,r2
    9cd0:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    9cd4:	e0fffc17 	ldw	r3,-16(fp)
    9cd8:	00900034 	movhi	r2,16384
    9cdc:	10bfffc4 	addi	r2,r2,-1
    9ce0:	1886703a 	and	r3,r3,r2
    9ce4:	e0bff917 	ldw	r2,-28(fp)
    9ce8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    9cec:	e0bff617 	ldw	r2,-40(fp)
    9cf0:	1004c03a 	cmpne	r2,r2,zero
    9cf4:	1000061e 	bne	r2,zero,9d10 <open+0xf0>
    9cf8:	e13ff917 	ldw	r4,-28(fp)
    9cfc:	0009b280 	call	9b28 <alt_file_locked>
    9d00:	e0bff715 	stw	r2,-36(fp)
    9d04:	e0bff717 	ldw	r2,-36(fp)
    9d08:	1004803a 	cmplt	r2,r2,zero
    9d0c:	1000131e 	bne	r2,zero,9d5c <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    9d10:	e0bffa17 	ldw	r2,-24(fp)
    9d14:	10800317 	ldw	r2,12(r2)
    9d18:	1005003a 	cmpeq	r2,r2,zero
    9d1c:	1000091e 	bne	r2,zero,9d44 <open+0x124>
    9d20:	e0bffa17 	ldw	r2,-24(fp)
    9d24:	10800317 	ldw	r2,12(r2)
    9d28:	e13ff917 	ldw	r4,-28(fp)
    9d2c:	e17ffb17 	ldw	r5,-20(fp)
    9d30:	e1bffc17 	ldw	r6,-16(fp)
    9d34:	e1fffd17 	ldw	r7,-12(fp)
    9d38:	103ee83a 	callr	r2
    9d3c:	e0bfff15 	stw	r2,-4(fp)
    9d40:	00000106 	br	9d48 <open+0x128>
    9d44:	e03fff15 	stw	zero,-4(fp)
    9d48:	e0bfff17 	ldw	r2,-4(fp)
    9d4c:	e0bff715 	stw	r2,-36(fp)
    9d50:	00000206 	br	9d5c <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    9d54:	00bffb44 	movi	r2,-19
    9d58:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    9d5c:	e0bff717 	ldw	r2,-36(fp)
    9d60:	1004403a 	cmpge	r2,r2,zero
    9d64:	1000091e 	bne	r2,zero,9d8c <open+0x16c>
  {
    alt_release_fd (index);  
    9d68:	e13ff817 	ldw	r4,-32(fp)
    9d6c:	0009e0c0 	call	9e0c <alt_release_fd>
    ALT_ERRNO = -status;
    9d70:	0009dac0 	call	9dac <alt_get_errno>
    9d74:	e0fff717 	ldw	r3,-36(fp)
    9d78:	00c7c83a 	sub	r3,zero,r3
    9d7c:	10c00015 	stw	r3,0(r2)
    return -1;
    9d80:	00bfffc4 	movi	r2,-1
    9d84:	e0bffe15 	stw	r2,-8(fp)
    9d88:	00000206 	br	9d94 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    9d8c:	e0bff817 	ldw	r2,-32(fp)
    9d90:	e0bffe15 	stw	r2,-8(fp)
    9d94:	e0bffe17 	ldw	r2,-8(fp)
}
    9d98:	e037883a 	mov	sp,fp
    9d9c:	dfc00117 	ldw	ra,4(sp)
    9da0:	df000017 	ldw	fp,0(sp)
    9da4:	dec00204 	addi	sp,sp,8
    9da8:	f800283a 	ret

00009dac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9dac:	defffd04 	addi	sp,sp,-12
    9db0:	dfc00215 	stw	ra,8(sp)
    9db4:	df000115 	stw	fp,4(sp)
    9db8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9dbc:	00800074 	movhi	r2,1
    9dc0:	10aa0f04 	addi	r2,r2,-22468
    9dc4:	10800017 	ldw	r2,0(r2)
    9dc8:	1005003a 	cmpeq	r2,r2,zero
    9dcc:	1000061e 	bne	r2,zero,9de8 <alt_get_errno+0x3c>
    9dd0:	00800074 	movhi	r2,1
    9dd4:	10aa0f04 	addi	r2,r2,-22468
    9dd8:	10800017 	ldw	r2,0(r2)
    9ddc:	103ee83a 	callr	r2
    9de0:	e0bfff15 	stw	r2,-4(fp)
    9de4:	00000306 	br	9df4 <alt_get_errno+0x48>
    9de8:	00800074 	movhi	r2,1
    9dec:	10aac704 	addi	r2,r2,-21732
    9df0:	e0bfff15 	stw	r2,-4(fp)
    9df4:	e0bfff17 	ldw	r2,-4(fp)
}
    9df8:	e037883a 	mov	sp,fp
    9dfc:	dfc00117 	ldw	ra,4(sp)
    9e00:	df000017 	ldw	fp,0(sp)
    9e04:	dec00204 	addi	sp,sp,8
    9e08:	f800283a 	ret

00009e0c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    9e0c:	defffc04 	addi	sp,sp,-16
    9e10:	dfc00315 	stw	ra,12(sp)
    9e14:	df000215 	stw	fp,8(sp)
    9e18:	dc000115 	stw	r16,4(sp)
    9e1c:	df000104 	addi	fp,sp,4
    9e20:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    9e24:	e0bfff17 	ldw	r2,-4(fp)
    9e28:	108000d0 	cmplti	r2,r2,3
    9e2c:	10000f1e 	bne	r2,zero,9e6c <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    9e30:	e13fff17 	ldw	r4,-4(fp)
    9e34:	04000074 	movhi	r16,1
    9e38:	8429a704 	addi	r16,r16,-22884
    9e3c:	01400304 	movi	r5,12
    9e40:	0008d640 	call	8d64 <__mulsi3>
    9e44:	1405883a 	add	r2,r2,r16
    9e48:	10800204 	addi	r2,r2,8
    9e4c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    9e50:	e13fff17 	ldw	r4,-4(fp)
    9e54:	04000074 	movhi	r16,1
    9e58:	8429a704 	addi	r16,r16,-22884
    9e5c:	01400304 	movi	r5,12
    9e60:	0008d640 	call	8d64 <__mulsi3>
    9e64:	1405883a 	add	r2,r2,r16
    9e68:	10000015 	stw	zero,0(r2)
  }
}
    9e6c:	e037883a 	mov	sp,fp
    9e70:	dfc00217 	ldw	ra,8(sp)
    9e74:	df000117 	ldw	fp,4(sp)
    9e78:	dc000017 	ldw	r16,0(sp)
    9e7c:	dec00304 	addi	sp,sp,12
    9e80:	f800283a 	ret

00009e84 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    9e84:	deffff04 	addi	sp,sp,-4
    9e88:	df000015 	stw	fp,0(sp)
    9e8c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    9e90:	000170fa 	wrctl	ienable,zero
}
    9e94:	e037883a 	mov	sp,fp
    9e98:	df000017 	ldw	fp,0(sp)
    9e9c:	dec00104 	addi	sp,sp,4
    9ea0:	f800283a 	ret

00009ea4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    9ea4:	defff904 	addi	sp,sp,-28
    9ea8:	dfc00615 	stw	ra,24(sp)
    9eac:	df000515 	stw	fp,20(sp)
    9eb0:	df000504 	addi	fp,sp,20
    9eb4:	e13ffd15 	stw	r4,-12(fp)
    9eb8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    9ebc:	e0bffe17 	ldw	r2,-8(fp)
    9ec0:	10800017 	ldw	r2,0(r2)
    9ec4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    9ec8:	e13ffd17 	ldw	r4,-12(fp)
    9ecc:	0008b800 	call	8b80 <strlen>
    9ed0:	10800044 	addi	r2,r2,1
    9ed4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9ed8:	00000d06 	br	9f10 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    9edc:	e0bffc17 	ldw	r2,-16(fp)
    9ee0:	11000217 	ldw	r4,8(r2)
    9ee4:	e1bffb17 	ldw	r6,-20(fp)
    9ee8:	e17ffd17 	ldw	r5,-12(fp)
    9eec:	000a15c0 	call	a15c <memcmp>
    9ef0:	1004c03a 	cmpne	r2,r2,zero
    9ef4:	1000031e 	bne	r2,zero,9f04 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    9ef8:	e0bffc17 	ldw	r2,-16(fp)
    9efc:	e0bfff15 	stw	r2,-4(fp)
    9f00:	00000706 	br	9f20 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    9f04:	e0bffc17 	ldw	r2,-16(fp)
    9f08:	10800017 	ldw	r2,0(r2)
    9f0c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9f10:	e0fffe17 	ldw	r3,-8(fp)
    9f14:	e0bffc17 	ldw	r2,-16(fp)
    9f18:	10fff01e 	bne	r2,r3,9edc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    9f1c:	e03fff15 	stw	zero,-4(fp)
    9f20:	e0bfff17 	ldw	r2,-4(fp)
}
    9f24:	e037883a 	mov	sp,fp
    9f28:	dfc00117 	ldw	ra,4(sp)
    9f2c:	df000017 	ldw	fp,0(sp)
    9f30:	dec00204 	addi	sp,sp,8
    9f34:	f800283a 	ret

00009f38 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    9f38:	defffa04 	addi	sp,sp,-24
    9f3c:	dfc00515 	stw	ra,20(sp)
    9f40:	df000415 	stw	fp,16(sp)
    9f44:	df000404 	addi	fp,sp,16
    9f48:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    9f4c:	00800074 	movhi	r2,1
    9f50:	10aa0a04 	addi	r2,r2,-22488
    9f54:	10800017 	ldw	r2,0(r2)
    9f58:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9f5c:	00003306 	br	a02c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    9f60:	e0bffd17 	ldw	r2,-12(fp)
    9f64:	11000217 	ldw	r4,8(r2)
    9f68:	0008b800 	call	8b80 <strlen>
    9f6c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    9f70:	e0bffd17 	ldw	r2,-12(fp)
    9f74:	10c00217 	ldw	r3,8(r2)
    9f78:	e0bffc17 	ldw	r2,-16(fp)
    9f7c:	1885883a 	add	r2,r3,r2
    9f80:	10bfffc4 	addi	r2,r2,-1
    9f84:	10800003 	ldbu	r2,0(r2)
    9f88:	10803fcc 	andi	r2,r2,255
    9f8c:	1080201c 	xori	r2,r2,128
    9f90:	10bfe004 	addi	r2,r2,-128
    9f94:	10800bd8 	cmpnei	r2,r2,47
    9f98:	1000031e 	bne	r2,zero,9fa8 <alt_find_file+0x70>
    {
      len -= 1;
    9f9c:	e0bffc17 	ldw	r2,-16(fp)
    9fa0:	10bfffc4 	addi	r2,r2,-1
    9fa4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9fa8:	e0bffc17 	ldw	r2,-16(fp)
    9fac:	1007883a 	mov	r3,r2
    9fb0:	e0bffe17 	ldw	r2,-8(fp)
    9fb4:	1885883a 	add	r2,r3,r2
    9fb8:	10800003 	ldbu	r2,0(r2)
    9fbc:	10803fcc 	andi	r2,r2,255
    9fc0:	1080201c 	xori	r2,r2,128
    9fc4:	10bfe004 	addi	r2,r2,-128
    9fc8:	10800be0 	cmpeqi	r2,r2,47
    9fcc:	10000a1e 	bne	r2,zero,9ff8 <alt_find_file+0xc0>
    9fd0:	e0bffc17 	ldw	r2,-16(fp)
    9fd4:	1007883a 	mov	r3,r2
    9fd8:	e0bffe17 	ldw	r2,-8(fp)
    9fdc:	1885883a 	add	r2,r3,r2
    9fe0:	10800003 	ldbu	r2,0(r2)
    9fe4:	10803fcc 	andi	r2,r2,255
    9fe8:	1080201c 	xori	r2,r2,128
    9fec:	10bfe004 	addi	r2,r2,-128
    9ff0:	1004c03a 	cmpne	r2,r2,zero
    9ff4:	10000a1e 	bne	r2,zero,a020 <alt_find_file+0xe8>
    9ff8:	e0bffd17 	ldw	r2,-12(fp)
    9ffc:	11000217 	ldw	r4,8(r2)
    a000:	e1bffc17 	ldw	r6,-16(fp)
    a004:	e17ffe17 	ldw	r5,-8(fp)
    a008:	000a15c0 	call	a15c <memcmp>
    a00c:	1004c03a 	cmpne	r2,r2,zero
    a010:	1000031e 	bne	r2,zero,a020 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    a014:	e0bffd17 	ldw	r2,-12(fp)
    a018:	e0bfff15 	stw	r2,-4(fp)
    a01c:	00000806 	br	a040 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    a020:	e0bffd17 	ldw	r2,-12(fp)
    a024:	10800017 	ldw	r2,0(r2)
    a028:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a02c:	00c00074 	movhi	r3,1
    a030:	18ea0a04 	addi	r3,r3,-22488
    a034:	e0bffd17 	ldw	r2,-12(fp)
    a038:	10ffc91e 	bne	r2,r3,9f60 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    a03c:	e03fff15 	stw	zero,-4(fp)
    a040:	e0bfff17 	ldw	r2,-4(fp)
}
    a044:	e037883a 	mov	sp,fp
    a048:	dfc00117 	ldw	ra,4(sp)
    a04c:	df000017 	ldw	fp,0(sp)
    a050:	dec00204 	addi	sp,sp,8
    a054:	f800283a 	ret

0000a058 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    a058:	defffa04 	addi	sp,sp,-24
    a05c:	dfc00515 	stw	ra,20(sp)
    a060:	df000415 	stw	fp,16(sp)
    a064:	dc000315 	stw	r16,12(sp)
    a068:	df000304 	addi	fp,sp,12
    a06c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    a070:	00bffa04 	movi	r2,-24
    a074:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a078:	e03ffe15 	stw	zero,-8(fp)
    a07c:	00002006 	br	a100 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    a080:	e13ffe17 	ldw	r4,-8(fp)
    a084:	04000074 	movhi	r16,1
    a088:	8429a704 	addi	r16,r16,-22884
    a08c:	01400304 	movi	r5,12
    a090:	0008d640 	call	8d64 <__mulsi3>
    a094:	1405883a 	add	r2,r2,r16
    a098:	10800017 	ldw	r2,0(r2)
    a09c:	1004c03a 	cmpne	r2,r2,zero
    a0a0:	1000141e 	bne	r2,zero,a0f4 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    a0a4:	e13ffe17 	ldw	r4,-8(fp)
    a0a8:	04000074 	movhi	r16,1
    a0ac:	8429a704 	addi	r16,r16,-22884
    a0b0:	01400304 	movi	r5,12
    a0b4:	0008d640 	call	8d64 <__mulsi3>
    a0b8:	1407883a 	add	r3,r2,r16
    a0bc:	e0bfff17 	ldw	r2,-4(fp)
    a0c0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    a0c4:	00800074 	movhi	r2,1
    a0c8:	10aa0e04 	addi	r2,r2,-22472
    a0cc:	10c00017 	ldw	r3,0(r2)
    a0d0:	e0bffe17 	ldw	r2,-8(fp)
    a0d4:	1880040e 	bge	r3,r2,a0e8 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    a0d8:	00c00074 	movhi	r3,1
    a0dc:	18ea0e04 	addi	r3,r3,-22472
    a0e0:	e0bffe17 	ldw	r2,-8(fp)
    a0e4:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    a0e8:	e0bffe17 	ldw	r2,-8(fp)
    a0ec:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    a0f0:	00000606 	br	a10c <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a0f4:	e0bffe17 	ldw	r2,-8(fp)
    a0f8:	10800044 	addi	r2,r2,1
    a0fc:	e0bffe15 	stw	r2,-8(fp)
    a100:	e0bffe17 	ldw	r2,-8(fp)
    a104:	10800810 	cmplti	r2,r2,32
    a108:	103fdd1e 	bne	r2,zero,a080 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    a10c:	e0bffd17 	ldw	r2,-12(fp)
}
    a110:	e037883a 	mov	sp,fp
    a114:	dfc00217 	ldw	ra,8(sp)
    a118:	df000117 	ldw	fp,4(sp)
    a11c:	dc000017 	ldw	r16,0(sp)
    a120:	dec00304 	addi	sp,sp,12
    a124:	f800283a 	ret

0000a128 <atexit>:
    a128:	200b883a 	mov	r5,r4
    a12c:	000d883a 	mov	r6,zero
    a130:	0009883a 	mov	r4,zero
    a134:	000f883a 	mov	r7,zero
    a138:	000a1981 	jmpi	a198 <__register_exitproc>

0000a13c <exit>:
    a13c:	defffe04 	addi	sp,sp,-8
    a140:	dc400015 	stw	r17,0(sp)
    a144:	000b883a 	mov	r5,zero
    a148:	2023883a 	mov	r17,r4
    a14c:	dfc00115 	stw	ra,4(sp)
    a150:	000a3080 	call	a308 <__call_exitprocs>
    a154:	8809883a 	mov	r4,r17
    a158:	000a5040 	call	a504 <_exit>

0000a15c <memcmp>:
    a15c:	31ffffc4 	addi	r7,r6,-1
    a160:	3000061e 	bne	r6,zero,a17c <memcmp+0x20>
    a164:	00000a06 	br	a190 <memcmp+0x34>
    a168:	39ffffc4 	addi	r7,r7,-1
    a16c:	00bfffc4 	movi	r2,-1
    a170:	21000044 	addi	r4,r4,1
    a174:	29400044 	addi	r5,r5,1
    a178:	38800526 	beq	r7,r2,a190 <memcmp+0x34>
    a17c:	20c00003 	ldbu	r3,0(r4)
    a180:	28800003 	ldbu	r2,0(r5)
    a184:	18bff826 	beq	r3,r2,a168 <memcmp+0xc>
    a188:	1885c83a 	sub	r2,r3,r2
    a18c:	f800283a 	ret
    a190:	0005883a 	mov	r2,zero
    a194:	f800283a 	ret

0000a198 <__register_exitproc>:
    a198:	defff904 	addi	sp,sp,-28
    a19c:	00800074 	movhi	r2,1
    a1a0:	10aa0804 	addi	r2,r2,-22496
    a1a4:	dc400115 	stw	r17,4(sp)
    a1a8:	14400017 	ldw	r17,0(r2)
    a1ac:	dc000015 	stw	r16,0(sp)
    a1b0:	dd400515 	stw	r21,20(sp)
    a1b4:	8c000c17 	ldw	r16,48(r17)
    a1b8:	dd000415 	stw	r20,16(sp)
    a1bc:	dcc00315 	stw	r19,12(sp)
    a1c0:	dc800215 	stw	r18,8(sp)
    a1c4:	dfc00615 	stw	ra,24(sp)
    a1c8:	2025883a 	mov	r18,r4
    a1cc:	282b883a 	mov	r21,r5
    a1d0:	3029883a 	mov	r20,r6
    a1d4:	3827883a 	mov	r19,r7
    a1d8:	80002626 	beq	r16,zero,a274 <__register_exitproc+0xdc>
    a1dc:	81400117 	ldw	r5,4(r16)
    a1e0:	008007c4 	movi	r2,31
    a1e4:	11403716 	blt	r2,r5,a2c4 <__register_exitproc+0x12c>
    a1e8:	90002026 	beq	r18,zero,a26c <__register_exitproc+0xd4>
    a1ec:	81802217 	ldw	r6,136(r16)
    a1f0:	30002926 	beq	r6,zero,a298 <__register_exitproc+0x100>
    a1f4:	81400117 	ldw	r5,4(r16)
    a1f8:	00c00044 	movi	r3,1
    a1fc:	31004017 	ldw	r4,256(r6)
    a200:	1946983a 	sll	r3,r3,r5
    a204:	2945883a 	add	r2,r5,r5
    a208:	1085883a 	add	r2,r2,r2
    a20c:	1185883a 	add	r2,r2,r6
    a210:	20c8b03a 	or	r4,r4,r3
    a214:	14c02015 	stw	r19,128(r2)
    a218:	15000015 	stw	r20,0(r2)
    a21c:	00800084 	movi	r2,2
    a220:	31004015 	stw	r4,256(r6)
    a224:	90801826 	beq	r18,r2,a288 <__register_exitproc+0xf0>
    a228:	2945883a 	add	r2,r5,r5
    a22c:	1085883a 	add	r2,r2,r2
    a230:	1405883a 	add	r2,r2,r16
    a234:	28c00044 	addi	r3,r5,1
    a238:	0009883a 	mov	r4,zero
    a23c:	15400215 	stw	r21,8(r2)
    a240:	80c00115 	stw	r3,4(r16)
    a244:	2005883a 	mov	r2,r4
    a248:	dfc00617 	ldw	ra,24(sp)
    a24c:	dd400517 	ldw	r21,20(sp)
    a250:	dd000417 	ldw	r20,16(sp)
    a254:	dcc00317 	ldw	r19,12(sp)
    a258:	dc800217 	ldw	r18,8(sp)
    a25c:	dc400117 	ldw	r17,4(sp)
    a260:	dc000017 	ldw	r16,0(sp)
    a264:	dec00704 	addi	sp,sp,28
    a268:	f800283a 	ret
    a26c:	81400117 	ldw	r5,4(r16)
    a270:	003fed06 	br	a228 <__register_exitproc+0x90>
    a274:	00800074 	movhi	r2,1
    a278:	10ab0c04 	addi	r2,r2,-21456
    a27c:	1021883a 	mov	r16,r2
    a280:	88800c15 	stw	r2,48(r17)
    a284:	003fd506 	br	a1dc <__register_exitproc+0x44>
    a288:	30804117 	ldw	r2,260(r6)
    a28c:	10c4b03a 	or	r2,r2,r3
    a290:	30804115 	stw	r2,260(r6)
    a294:	003fe406 	br	a228 <__register_exitproc+0x90>
    a298:	00800034 	movhi	r2,0
    a29c:	10800004 	addi	r2,r2,0
    a2a0:	10000b26 	beq	r2,zero,a2d0 <__register_exitproc+0x138>
    a2a4:	01004204 	movi	r4,264
    a2a8:	103ee83a 	callr	r2
    a2ac:	10000826 	beq	r2,zero,a2d0 <__register_exitproc+0x138>
    a2b0:	100d883a 	mov	r6,r2
    a2b4:	10004015 	stw	zero,256(r2)
    a2b8:	10004115 	stw	zero,260(r2)
    a2bc:	80802215 	stw	r2,136(r16)
    a2c0:	003fcc06 	br	a1f4 <__register_exitproc+0x5c>
    a2c4:	00800034 	movhi	r2,0
    a2c8:	10800004 	addi	r2,r2,0
    a2cc:	1000021e 	bne	r2,zero,a2d8 <__register_exitproc+0x140>
    a2d0:	013fffc4 	movi	r4,-1
    a2d4:	003fdb06 	br	a244 <__register_exitproc+0xac>
    a2d8:	01002304 	movi	r4,140
    a2dc:	103ee83a 	callr	r2
    a2e0:	1007883a 	mov	r3,r2
    a2e4:	103ffa26 	beq	r2,zero,a2d0 <__register_exitproc+0x138>
    a2e8:	88800c17 	ldw	r2,48(r17)
    a2ec:	1821883a 	mov	r16,r3
    a2f0:	18000115 	stw	zero,4(r3)
    a2f4:	18800015 	stw	r2,0(r3)
    a2f8:	88c00c15 	stw	r3,48(r17)
    a2fc:	903fdb26 	beq	r18,zero,a26c <__register_exitproc+0xd4>
    a300:	003fba06 	br	a1ec <__register_exitproc+0x54>

0000a304 <register_fini>:
    a304:	f800283a 	ret

0000a308 <__call_exitprocs>:
    a308:	defff304 	addi	sp,sp,-52
    a30c:	00800074 	movhi	r2,1
    a310:	10aa0804 	addi	r2,r2,-22496
    a314:	df000b15 	stw	fp,44(sp)
    a318:	17000017 	ldw	fp,0(r2)
    a31c:	00800034 	movhi	r2,0
    a320:	10800004 	addi	r2,r2,0
    a324:	1005003a 	cmpeq	r2,r2,zero
    a328:	d8800215 	stw	r2,8(sp)
    a32c:	e0800c04 	addi	r2,fp,48
    a330:	dd800915 	stw	r22,36(sp)
    a334:	dd400815 	stw	r21,32(sp)
    a338:	dfc00c15 	stw	ra,48(sp)
    a33c:	ddc00a15 	stw	r23,40(sp)
    a340:	dd000715 	stw	r20,28(sp)
    a344:	dcc00615 	stw	r19,24(sp)
    a348:	dc800515 	stw	r18,20(sp)
    a34c:	dc400415 	stw	r17,16(sp)
    a350:	dc000315 	stw	r16,12(sp)
    a354:	282d883a 	mov	r22,r5
    a358:	d9000115 	stw	r4,4(sp)
    a35c:	d8800015 	stw	r2,0(sp)
    a360:	282b003a 	cmpeq	r21,r5,zero
    a364:	e4400c17 	ldw	r17,48(fp)
    a368:	88001226 	beq	r17,zero,a3b4 <__call_exitprocs+0xac>
    a36c:	ddc00017 	ldw	r23,0(sp)
    a370:	88800117 	ldw	r2,4(r17)
    a374:	8c802217 	ldw	r18,136(r17)
    a378:	143fffc4 	addi	r16,r2,-1
    a37c:	80000b16 	blt	r16,zero,a3ac <__call_exitprocs+0xa4>
    a380:	9027003a 	cmpeq	r19,r18,zero
    a384:	a800171e 	bne	r21,zero,a3e4 <__call_exitprocs+0xdc>
    a388:	9800051e 	bne	r19,zero,a3a0 <__call_exitprocs+0x98>
    a38c:	8409883a 	add	r4,r16,r16
    a390:	2105883a 	add	r2,r4,r4
    a394:	1485883a 	add	r2,r2,r18
    a398:	10c02017 	ldw	r3,128(r2)
    a39c:	b0c01226 	beq	r22,r3,a3e8 <__call_exitprocs+0xe0>
    a3a0:	843fffc4 	addi	r16,r16,-1
    a3a4:	00bfffc4 	movi	r2,-1
    a3a8:	80bff61e 	bne	r16,r2,a384 <__call_exitprocs+0x7c>
    a3ac:	d8800217 	ldw	r2,8(sp)
    a3b0:	10003226 	beq	r2,zero,a47c <__call_exitprocs+0x174>
    a3b4:	dfc00c17 	ldw	ra,48(sp)
    a3b8:	df000b17 	ldw	fp,44(sp)
    a3bc:	ddc00a17 	ldw	r23,40(sp)
    a3c0:	dd800917 	ldw	r22,36(sp)
    a3c4:	dd400817 	ldw	r21,32(sp)
    a3c8:	dd000717 	ldw	r20,28(sp)
    a3cc:	dcc00617 	ldw	r19,24(sp)
    a3d0:	dc800517 	ldw	r18,20(sp)
    a3d4:	dc400417 	ldw	r17,16(sp)
    a3d8:	dc000317 	ldw	r16,12(sp)
    a3dc:	dec00d04 	addi	sp,sp,52
    a3e0:	f800283a 	ret
    a3e4:	8409883a 	add	r4,r16,r16
    a3e8:	88c00117 	ldw	r3,4(r17)
    a3ec:	2105883a 	add	r2,r4,r4
    a3f0:	1445883a 	add	r2,r2,r17
    a3f4:	18ffffc4 	addi	r3,r3,-1
    a3f8:	11800217 	ldw	r6,8(r2)
    a3fc:	1c001826 	beq	r3,r16,a460 <__call_exitprocs+0x158>
    a400:	10000215 	stw	zero,8(r2)
    a404:	303fe626 	beq	r6,zero,a3a0 <__call_exitprocs+0x98>
    a408:	8d000117 	ldw	r20,4(r17)
    a40c:	9800121e 	bne	r19,zero,a458 <__call_exitprocs+0x150>
    a410:	00c00044 	movi	r3,1
    a414:	1c06983a 	sll	r3,r3,r16
    a418:	90804017 	ldw	r2,256(r18)
    a41c:	1884703a 	and	r2,r3,r2
    a420:	10000d26 	beq	r2,zero,a458 <__call_exitprocs+0x150>
    a424:	90804117 	ldw	r2,260(r18)
    a428:	1884703a 	and	r2,r3,r2
    a42c:	10000e1e 	bne	r2,zero,a468 <__call_exitprocs+0x160>
    a430:	2105883a 	add	r2,r4,r4
    a434:	1485883a 	add	r2,r2,r18
    a438:	11400017 	ldw	r5,0(r2)
    a43c:	d9000117 	ldw	r4,4(sp)
    a440:	303ee83a 	callr	r6
    a444:	88800117 	ldw	r2,4(r17)
    a448:	a0bfc61e 	bne	r20,r2,a364 <__call_exitprocs+0x5c>
    a44c:	b8800017 	ldw	r2,0(r23)
    a450:	147fd326 	beq	r2,r17,a3a0 <__call_exitprocs+0x98>
    a454:	003fc306 	br	a364 <__call_exitprocs+0x5c>
    a458:	303ee83a 	callr	r6
    a45c:	003ff906 	br	a444 <__call_exitprocs+0x13c>
    a460:	8c000115 	stw	r16,4(r17)
    a464:	003fe706 	br	a404 <__call_exitprocs+0xfc>
    a468:	2105883a 	add	r2,r4,r4
    a46c:	1485883a 	add	r2,r2,r18
    a470:	11000017 	ldw	r4,0(r2)
    a474:	303ee83a 	callr	r6
    a478:	003ff206 	br	a444 <__call_exitprocs+0x13c>
    a47c:	88800117 	ldw	r2,4(r17)
    a480:	10000b1e 	bne	r2,zero,a4b0 <__call_exitprocs+0x1a8>
    a484:	89000017 	ldw	r4,0(r17)
    a488:	20000a26 	beq	r4,zero,a4b4 <__call_exitprocs+0x1ac>
    a48c:	b9000015 	stw	r4,0(r23)
    a490:	90000226 	beq	r18,zero,a49c <__call_exitprocs+0x194>
    a494:	9009883a 	mov	r4,r18
    a498:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    a49c:	8809883a 	mov	r4,r17
    a4a0:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    a4a4:	bc400017 	ldw	r17,0(r23)
    a4a8:	883fb11e 	bne	r17,zero,a370 <__call_exitprocs+0x68>
    a4ac:	003fc106 	br	a3b4 <__call_exitprocs+0xac>
    a4b0:	89000017 	ldw	r4,0(r17)
    a4b4:	882f883a 	mov	r23,r17
    a4b8:	2023883a 	mov	r17,r4
    a4bc:	883fac1e 	bne	r17,zero,a370 <__call_exitprocs+0x68>
    a4c0:	003fbc06 	br	a3b4 <__call_exitprocs+0xac>

0000a4c4 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    a4c4:	defffd04 	addi	sp,sp,-12
    a4c8:	df000215 	stw	fp,8(sp)
    a4cc:	df000204 	addi	fp,sp,8
    a4d0:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    a4d4:	e0bfff17 	ldw	r2,-4(fp)
    a4d8:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    a4dc:	e0bffe17 	ldw	r2,-8(fp)
    a4e0:	1005003a 	cmpeq	r2,r2,zero
    a4e4:	1000021e 	bne	r2,zero,a4f0 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    a4e8:	002af070 	cmpltui	zero,zero,43969
    a4ec:	00000106 	br	a4f4 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    a4f0:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    a4f4:	e037883a 	mov	sp,fp
    a4f8:	df000017 	ldw	fp,0(sp)
    a4fc:	dec00104 	addi	sp,sp,4
    a500:	f800283a 	ret

0000a504 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    a504:	defffd04 	addi	sp,sp,-12
    a508:	dfc00215 	stw	ra,8(sp)
    a50c:	df000115 	stw	fp,4(sp)
    a510:	df000104 	addi	fp,sp,4
    a514:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    a518:	e13fff17 	ldw	r4,-4(fp)
    a51c:	000a4c40 	call	a4c4 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    a520:	003fff06 	br	a520 <_exit+0x1c>
    a524:	0000a304 	movi	zero,652
