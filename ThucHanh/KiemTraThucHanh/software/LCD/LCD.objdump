
LCD.elf:     file format elf32-littlenios2
LCD.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x0000189c memsz 0x0000189c flags r-x
    LOAD off    0x000028bc vaddr 0x000098bc paddr 0x00009b90 align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x00002e64 vaddr 0x00009e64 paddr 0x00009e64 align 2**12
         filesz 0x00000000 memsz 0x0000009c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00001868  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  00009888  00009888  00002888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000002d4  000098bc  00009b90  000028bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000009c  00009e64  00009e64  00002e64  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  00002b90  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003e8  00000000  00000000  00002bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000005bc  00000000  00000000  00002fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000065a1  00000000  00000000  0000355c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000182d  00000000  00000000  00009afd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000049c4  00000000  00000000  0000b32a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000718  00000000  00000000  0000fcf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000a03  00000000  00000000  00010408  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000c43  00000000  00000000  00010e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00011a50  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000038  00000000  00000000  00011a60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00013064  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  00013067  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00013073  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00013074  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  00013075  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  00013080  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  0001308b  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000006  00000000  00000000  00013096  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 0000002c  00000000  00000000  0001309c  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     0004c08f  00000000  00000000  000130c8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .text	00000000 .text
00009888 l    d  .rodata	00000000 .rodata
000098bc l    d  .rwdata	00000000 .rwdata
00009e64 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000083a8 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
000085ac l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000098bc l     O .rwdata	0000002c jtag_uart_0
000086e8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
00008a78 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00008af4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00008bd4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00008d18 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00008e68 l     F .text	000000f8 alt_file_locked
000090ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00009664 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 impure.c
00009a90 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 alt_exit.c
00009824 l     F .text	00000040 alt_sim_halt
00008618 g     F .text	0000006c alt_main
00009b90 g       *ABS*	00000000 __flash_rwdata_start
00008130 g     F .text	00000084 lcd_data
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00009e70 g     O .bss	00000004 errno
00009e68 g     O .bss	00000004 alt_argv
00011b70 g       *ABS*	00000000 _gp
00009910 g     O .rwdata	00000180 alt_fd_list
000091e4 g     F .text	00000094 alt_find_dev
00008df0 g     F .text	00000078 alt_io_redirect
00009888 g       *ABS*	00000000 __DTOR_END__
000087d0 g     F .text	00000104 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000084e4 g     F .text	00000008 __udivsi3
000080b0 g     F .text	00000080 command
00009b80 g     O .rwdata	00000004 alt_max_fd
00009b8c g     O .rwdata	00000004 _global_impure_ptr
00009f00 g       *ABS*	00000000 __bss_end
000098e8 g     O .rwdata	00000028 alt_dev_null
00008ad8 g     F .text	0000001c alt_dcache_flush_all
00009b90 g       *ABS*	00000000 __ram_rwdata_end
00009b78 g     O .rwdata	00000008 alt_dev_list
000098bc g       *ABS*	00000000 __ram_rodata_end
000084ec g     F .text	00000008 __umodsi3
00009f00 g       *ABS*	00000000 end
00009884 g       *ABS*	00000000 __CTOR_LIST__
00010000 g       *ABS*	00000000 __alt_stack_pointer
000088d4 g     F .text	000000a4 altera_avalon_jtag_uart_write
000081b4 g     F .text	00000088 lcd_string
00009668 g     F .text	000001bc __call_exitprocs
00008020 g     F .text	0000003c _start
000086b8 g     F .text	00000030 alt_sys_init
000094f8 g     F .text	0000016c __register_exitproc
000084f4 g     F .text	00000038 __mulsi3
000098bc g       *ABS*	00000000 __ram_rwdata_start
00009888 g       *ABS*	00000000 __ram_rodata_start
00008720 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00009398 g     F .text	000000d0 alt_get_fd
0000949c g     F .text	0000003c memcmp
00009f00 g       *ABS*	00000000 __alt_stack_base
00009278 g     F .text	00000120 alt_find_file
00008b20 g     F .text	000000b4 alt_dev_llist_insert
00009e64 g       *ABS*	00000000 __bss_start
0000823c g     F .text	0000005c lcd_init
00008298 g     F .text	00000110 main
00009e6c g     O .bss	00000004 alt_envp
00008778 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00009e74 g     O .bss	0000008c _atexit0
00009b84 g     O .rwdata	00000004 alt_errno
00008424 g     F .text	00000060 __divsi3
00009888 g       *ABS*	00000000 __CTOR_END__
00009888 g       *ABS*	00000000 __flash_rodata_start
00009888 g       *ABS*	00000000 __DTOR_LIST__
0000805c g     F .text	00000054 delay
00008684 g     F .text	00000034 alt_irq_init
0000914c g     F .text	00000078 alt_release_fd
00009468 g     F .text	00000014 atexit
00009b88 g     O .rwdata	00000004 _impure_ptr
00009e64 g     O .bss	00000004 alt_argc
00008c98 g     F .text	00000064 _do_dtors
00009b70 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
00009b90 g       *ABS*	00000000 _edata
00009f00 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
000091c4 g     F .text	00000020 altera_nios2_qsys_irq_init
0000947c g     F .text	00000020 exit
00008484 g     F .text	00000060 __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
00009864 g     F .text	00000020 _exit
000094d8 g     F .text	00000020 strlen
00008f60 g     F .text	0000018c open
00008cfc g     F .text	0000001c alt_icache_flush_all
00008c34 g     F .text	00000064 _do_ctors
00008978 g     F .text	00000100 close
0000852c g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00008020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d686dc14 	ori	gp,gp,7024
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a79914 	ori	r2,r2,40548

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e7c014 	ori	r3,r3,40704

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	000852c0 	call	852c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00086180 	call	8618 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <alt_after_alt_main>

0000805c <delay>:
#include "sys/alt_stdio.h"
#include <stdio.h>
#include "system.h"
#include "altera_avalon_pio_regs.h"
void delay(int a)
{
    805c:	defffc04 	addi	sp,sp,-16
    8060:	dfc00315 	stw	ra,12(sp)
    8064:	df000215 	stw	fp,8(sp)
    8068:	df000204 	addi	fp,sp,8
    806c:	e13fff15 	stw	r4,-4(fp)
	volatile int i=0;
    8070:	e03ffe15 	stw	zero,-8(fp)
	while(i<a*10000)
    8074:	00000306 	br	8084 <delay+0x28>
	{
		i++;
    8078:	e0bffe17 	ldw	r2,-8(fp)
    807c:	10800044 	addi	r2,r2,1
    8080:	e0bffe15 	stw	r2,-8(fp)
#include "system.h"
#include "altera_avalon_pio_regs.h"
void delay(int a)
{
	volatile int i=0;
	while(i<a*10000)
    8084:	e13fff17 	ldw	r4,-4(fp)
    8088:	0149c404 	movi	r5,10000
    808c:	00084f40 	call	84f4 <__mulsi3>
    8090:	1007883a 	mov	r3,r2
    8094:	e0bffe17 	ldw	r2,-8(fp)
    8098:	10fff716 	blt	r2,r3,8078 <delay+0x1c>
	{
		i++;
	}
}
    809c:	e037883a 	mov	sp,fp
    80a0:	dfc00117 	ldw	ra,4(sp)
    80a4:	df000017 	ldw	fp,0(sp)
    80a8:	dec00204 	addi	sp,sp,8
    80ac:	f800283a 	ret

000080b0 <command>:
void command(data)
{
    80b0:	defffd04 	addi	sp,sp,-12
    80b4:	dfc00215 	stw	ra,8(sp)
    80b8:	df000115 	stw	fp,4(sp)
    80bc:	df000104 	addi	fp,sp,4
    80c0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_RS_BASE, 0x00);
    80c4:	00800074 	movhi	r2,1
    80c8:	10841c04 	addi	r2,r2,4208
    80cc:	10000035 	stwio	zero,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_RW_BASE, 0x00);
    80d0:	00800074 	movhi	r2,1
    80d4:	10842004 	addi	r2,r2,4224
    80d8:	10000035 	stwio	zero,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, data&0xFF);
    80dc:	e0bfff17 	ldw	r2,-4(fp)
    80e0:	10c03fcc 	andi	r3,r2,255
    80e4:	00800074 	movhi	r2,1
    80e8:	10841804 	addi	r2,r2,4192
    80ec:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_EN_BASE, 0x01);
    80f0:	00c00074 	movhi	r3,1
    80f4:	18c42404 	addi	r3,r3,4240
    80f8:	00800044 	movi	r2,1
    80fc:	18800035 	stwio	r2,0(r3)
	delay(20);
    8100:	01000504 	movi	r4,20
    8104:	000805c0 	call	805c <delay>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_EN_BASE, 0x00);
    8108:	00800074 	movhi	r2,1
    810c:	10842404 	addi	r2,r2,4240
    8110:	10000035 	stwio	zero,0(r2)
	delay(5);
    8114:	01000144 	movi	r4,5
    8118:	000805c0 	call	805c <delay>
}
    811c:	e037883a 	mov	sp,fp
    8120:	dfc00117 	ldw	ra,4(sp)
    8124:	df000017 	ldw	fp,0(sp)
    8128:	dec00204 	addi	sp,sp,8
    812c:	f800283a 	ret

00008130 <lcd_data>:
void lcd_data(char data)
{
    8130:	defffd04 	addi	sp,sp,-12
    8134:	dfc00215 	stw	ra,8(sp)
    8138:	df000115 	stw	fp,4(sp)
    813c:	df000104 	addi	fp,sp,4
    8140:	e13fff05 	stb	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_RS_BASE, 0x01);
    8144:	00c00074 	movhi	r3,1
    8148:	18c41c04 	addi	r3,r3,4208
    814c:	00800044 	movi	r2,1
    8150:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_RW_BASE, 0x00);
    8154:	00800074 	movhi	r2,1
    8158:	10842004 	addi	r2,r2,4224
    815c:	10000035 	stwio	zero,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, data&0xFF);
    8160:	e0bfff07 	ldb	r2,-4(fp)
    8164:	10c03fcc 	andi	r3,r2,255
    8168:	00800074 	movhi	r2,1
    816c:	10841804 	addi	r2,r2,4192
    8170:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_EN_BASE, 0x01);
    8174:	00c00074 	movhi	r3,1
    8178:	18c42404 	addi	r3,r3,4240
    817c:	00800044 	movi	r2,1
    8180:	18800035 	stwio	r2,0(r3)
	delay(20);
    8184:	01000504 	movi	r4,20
    8188:	000805c0 	call	805c <delay>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_EN_BASE, 0x00);
    818c:	00800074 	movhi	r2,1
    8190:	10842404 	addi	r2,r2,4240
    8194:	10000035 	stwio	zero,0(r2)
	delay(5);
    8198:	01000144 	movi	r4,5
    819c:	000805c0 	call	805c <delay>
}
    81a0:	e037883a 	mov	sp,fp
    81a4:	dfc00117 	ldw	ra,4(sp)
    81a8:	df000017 	ldw	fp,0(sp)
    81ac:	dec00204 	addi	sp,sp,8
    81b0:	f800283a 	ret

000081b4 <lcd_string>:
void lcd_string(char *str)
{
    81b4:	defffc04 	addi	sp,sp,-16
    81b8:	dfc00315 	stw	ra,12(sp)
    81bc:	df000215 	stw	fp,8(sp)
    81c0:	df000204 	addi	fp,sp,8
    81c4:	e13fff15 	stw	r4,-4(fp)
	char i=0;
    81c8:	e03ffe05 	stb	zero,-8(fp)
	while(str[i] != 0)
    81cc:	00000c06 	br	8200 <lcd_string+0x4c>
	{
		lcd_data(str[i]);
    81d0:	e0bffe07 	ldb	r2,-8(fp)
    81d4:	1007883a 	mov	r3,r2
    81d8:	e0bfff17 	ldw	r2,-4(fp)
    81dc:	1885883a 	add	r2,r3,r2
    81e0:	10800003 	ldbu	r2,0(r2)
    81e4:	11003fcc 	andi	r4,r2,255
    81e8:	2100201c 	xori	r4,r4,128
    81ec:	213fe004 	addi	r4,r4,-128
    81f0:	00081300 	call	8130 <lcd_data>
		i++;
    81f4:	e0bffe03 	ldbu	r2,-8(fp)
    81f8:	10800044 	addi	r2,r2,1
    81fc:	e0bffe05 	stb	r2,-8(fp)
	delay(5);
}
void lcd_string(char *str)
{
	char i=0;
	while(str[i] != 0)
    8200:	e0bffe07 	ldb	r2,-8(fp)
    8204:	1007883a 	mov	r3,r2
    8208:	e0bfff17 	ldw	r2,-4(fp)
    820c:	1885883a 	add	r2,r3,r2
    8210:	10800003 	ldbu	r2,0(r2)
    8214:	10803fcc 	andi	r2,r2,255
    8218:	1080201c 	xori	r2,r2,128
    821c:	10bfe004 	addi	r2,r2,-128
    8220:	1004c03a 	cmpne	r2,r2,zero
    8224:	103fea1e 	bne	r2,zero,81d0 <lcd_string+0x1c>
	{
		lcd_data(str[i]);
		i++;
	}
}
    8228:	e037883a 	mov	sp,fp
    822c:	dfc00117 	ldw	ra,4(sp)
    8230:	df000017 	ldw	fp,0(sp)
    8234:	dec00204 	addi	sp,sp,8
    8238:	f800283a 	ret

0000823c <lcd_init>:
void lcd_init()
{
    823c:	defffe04 	addi	sp,sp,-8
    8240:	dfc00115 	stw	ra,4(sp)
    8244:	df000015 	stw	fp,0(sp)
    8248:	d839883a 	mov	fp,sp
	command(0x38); delay(100);
    824c:	01000e04 	movi	r4,56
    8250:	00080b00 	call	80b0 <command>
    8254:	01001904 	movi	r4,100
    8258:	000805c0 	call	805c <delay>
	command(0x0c); delay(100);
    825c:	01000304 	movi	r4,12
    8260:	00080b00 	call	80b0 <command>
    8264:	01001904 	movi	r4,100
    8268:	000805c0 	call	805c <delay>
	command(0x06); delay(100);
    826c:	01000184 	movi	r4,6
    8270:	00080b00 	call	80b0 <command>
    8274:	01001904 	movi	r4,100
    8278:	000805c0 	call	805c <delay>
	command(0x01);
    827c:	01000044 	movi	r4,1
    8280:	00080b00 	call	80b0 <command>
}
    8284:	e037883a 	mov	sp,fp
    8288:	dfc00117 	ldw	ra,4(sp)
    828c:	df000017 	ldw	fp,0(sp)
    8290:	dec00204 	addi	sp,sp,8
    8294:	f800283a 	ret

00008298 <main>:
int main()
{
    8298:	defff904 	addi	sp,sp,-28
    829c:	dfc00615 	stw	ra,24(sp)
    82a0:	df000515 	stw	fp,20(sp)
    82a4:	df000504 	addi	fp,sp,20
	int i,j;
	char data[10]={'0','1','2','3','4','5','6','7','8','9'};
    82a8:	00800c04 	movi	r2,48
    82ac:	e0bffd05 	stb	r2,-12(fp)
    82b0:	00800c44 	movi	r2,49
    82b4:	e0bffd45 	stb	r2,-11(fp)
    82b8:	00800c84 	movi	r2,50
    82bc:	e0bffd85 	stb	r2,-10(fp)
    82c0:	00800cc4 	movi	r2,51
    82c4:	e0bffdc5 	stb	r2,-9(fp)
    82c8:	00800d04 	movi	r2,52
    82cc:	e0bffe05 	stb	r2,-8(fp)
    82d0:	00800d44 	movi	r2,53
    82d4:	e0bffe45 	stb	r2,-7(fp)
    82d8:	00800d84 	movi	r2,54
    82dc:	e0bffe85 	stb	r2,-6(fp)
    82e0:	00800dc4 	movi	r2,55
    82e4:	e0bffec5 	stb	r2,-5(fp)
    82e8:	00800e04 	movi	r2,56
    82ec:	e0bfff05 	stb	r2,-4(fp)
    82f0:	00800e44 	movi	r2,57
    82f4:	e0bfff45 	stb	r2,-3(fp)
	lcd_init();
    82f8:	000823c0 	call	823c <lcd_init>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_ON_BASE, 0x01);
    82fc:	00c00074 	movhi	r3,1
    8300:	18c42c04 	addi	r3,r3,4272
    8304:	00800044 	movi	r2,1
    8308:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BLON_BASE, 0x01);
    830c:	00c00074 	movhi	r3,1
    8310:	18c42804 	addi	r3,r3,4256
    8314:	00800044 	movi	r2,1
    8318:	18800035 	stwio	r2,0(r3)

	//lcd_data('B');
	while(1)
	{
		for (i = 0; i < 100; i++)
    831c:	e03ffc15 	stw	zero,-16(fp)
    8320:	00001d06 	br	8398 <main+0x100>
		{
			command(0x02); //xoa hien thi LCD
    8324:	01000084 	movi	r4,2
    8328:	00080b00 	call	80b0 <command>
			lcd_data(data[i/10]);
    832c:	e13ffc17 	ldw	r4,-16(fp)
    8330:	01400284 	movi	r5,10
    8334:	00084240 	call	8424 <__divsi3>
    8338:	1007883a 	mov	r3,r2
    833c:	e0bffd04 	addi	r2,fp,-12
    8340:	10c5883a 	add	r2,r2,r3
    8344:	10800003 	ldbu	r2,0(r2)
    8348:	11003fcc 	andi	r4,r2,255
    834c:	2100201c 	xori	r4,r4,128
    8350:	213fe004 	addi	r4,r4,-128
    8354:	00081300 	call	8130 <lcd_data>
			lcd_data(data[i%10]);
    8358:	e13ffc17 	ldw	r4,-16(fp)
    835c:	01400284 	movi	r5,10
    8360:	00084840 	call	8484 <__modsi3>
    8364:	1007883a 	mov	r3,r2
    8368:	e0bffd04 	addi	r2,fp,-12
    836c:	10c5883a 	add	r2,r2,r3
    8370:	10800003 	ldbu	r2,0(r2)
    8374:	11003fcc 	andi	r4,r2,255
    8378:	2100201c 	xori	r4,r4,128
    837c:	213fe004 	addi	r4,r4,-128
    8380:	00081300 	call	8130 <lcd_data>
			delay(10);
    8384:	01000284 	movi	r4,10
    8388:	000805c0 	call	805c <delay>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BLON_BASE, 0x01);

	//lcd_data('B');
	while(1)
	{
		for (i = 0; i < 100; i++)
    838c:	e0bffc17 	ldw	r2,-16(fp)
    8390:	10800044 	addi	r2,r2,1
    8394:	e0bffc15 	stw	r2,-16(fp)
    8398:	e0bffc17 	ldw	r2,-16(fp)
    839c:	10801910 	cmplti	r2,r2,100
    83a0:	103fe01e 	bne	r2,zero,8324 <main+0x8c>
			command(0x02); //xoa hien thi LCD
			lcd_data(data[i/10]);
			lcd_data(data[i%10]);
			delay(10);
		}
	}
    83a4:	003fdd06 	br	831c <main+0x84>

000083a8 <udivmodsi4>:
    83a8:	29001b2e 	bgeu	r5,r4,8418 <udivmodsi4+0x70>
    83ac:	28001a16 	blt	r5,zero,8418 <udivmodsi4+0x70>
    83b0:	00800044 	movi	r2,1
    83b4:	0007883a 	mov	r3,zero
    83b8:	01c007c4 	movi	r7,31
    83bc:	00000306 	br	83cc <udivmodsi4+0x24>
    83c0:	19c01326 	beq	r3,r7,8410 <udivmodsi4+0x68>
    83c4:	18c00044 	addi	r3,r3,1
    83c8:	28000416 	blt	r5,zero,83dc <udivmodsi4+0x34>
    83cc:	294b883a 	add	r5,r5,r5
    83d0:	1085883a 	add	r2,r2,r2
    83d4:	293ffa36 	bltu	r5,r4,83c0 <udivmodsi4+0x18>
    83d8:	10000d26 	beq	r2,zero,8410 <udivmodsi4+0x68>
    83dc:	0007883a 	mov	r3,zero
    83e0:	21400236 	bltu	r4,r5,83ec <udivmodsi4+0x44>
    83e4:	2149c83a 	sub	r4,r4,r5
    83e8:	1886b03a 	or	r3,r3,r2
    83ec:	1004d07a 	srli	r2,r2,1
    83f0:	280ad07a 	srli	r5,r5,1
    83f4:	103ffa1e 	bne	r2,zero,83e0 <udivmodsi4+0x38>
    83f8:	30000226 	beq	r6,zero,8404 <udivmodsi4+0x5c>
    83fc:	2005883a 	mov	r2,r4
    8400:	f800283a 	ret
    8404:	1809883a 	mov	r4,r3
    8408:	2005883a 	mov	r2,r4
    840c:	f800283a 	ret
    8410:	0007883a 	mov	r3,zero
    8414:	003ff806 	br	83f8 <udivmodsi4+0x50>
    8418:	00800044 	movi	r2,1
    841c:	0007883a 	mov	r3,zero
    8420:	003fef06 	br	83e0 <udivmodsi4+0x38>

00008424 <__divsi3>:
    8424:	defffe04 	addi	sp,sp,-8
    8428:	dc000015 	stw	r16,0(sp)
    842c:	dfc00115 	stw	ra,4(sp)
    8430:	0021883a 	mov	r16,zero
    8434:	20000c16 	blt	r4,zero,8468 <__divsi3+0x44>
    8438:	000d883a 	mov	r6,zero
    843c:	28000e16 	blt	r5,zero,8478 <__divsi3+0x54>
    8440:	00083a80 	call	83a8 <udivmodsi4>
    8444:	1007883a 	mov	r3,r2
    8448:	8005003a 	cmpeq	r2,r16,zero
    844c:	1000011e 	bne	r2,zero,8454 <__divsi3+0x30>
    8450:	00c7c83a 	sub	r3,zero,r3
    8454:	1805883a 	mov	r2,r3
    8458:	dfc00117 	ldw	ra,4(sp)
    845c:	dc000017 	ldw	r16,0(sp)
    8460:	dec00204 	addi	sp,sp,8
    8464:	f800283a 	ret
    8468:	0109c83a 	sub	r4,zero,r4
    846c:	04000044 	movi	r16,1
    8470:	000d883a 	mov	r6,zero
    8474:	283ff20e 	bge	r5,zero,8440 <__divsi3+0x1c>
    8478:	014bc83a 	sub	r5,zero,r5
    847c:	8021003a 	cmpeq	r16,r16,zero
    8480:	003fef06 	br	8440 <__divsi3+0x1c>

00008484 <__modsi3>:
    8484:	deffff04 	addi	sp,sp,-4
    8488:	dfc00015 	stw	ra,0(sp)
    848c:	01800044 	movi	r6,1
    8490:	2807883a 	mov	r3,r5
    8494:	20000416 	blt	r4,zero,84a8 <__modsi3+0x24>
    8498:	28000c16 	blt	r5,zero,84cc <__modsi3+0x48>
    849c:	dfc00017 	ldw	ra,0(sp)
    84a0:	dec00104 	addi	sp,sp,4
    84a4:	00083a81 	jmpi	83a8 <udivmodsi4>
    84a8:	0109c83a 	sub	r4,zero,r4
    84ac:	28000b16 	blt	r5,zero,84dc <__modsi3+0x58>
    84b0:	180b883a 	mov	r5,r3
    84b4:	01800044 	movi	r6,1
    84b8:	00083a80 	call	83a8 <udivmodsi4>
    84bc:	0085c83a 	sub	r2,zero,r2
    84c0:	dfc00017 	ldw	ra,0(sp)
    84c4:	dec00104 	addi	sp,sp,4
    84c8:	f800283a 	ret
    84cc:	014bc83a 	sub	r5,zero,r5
    84d0:	dfc00017 	ldw	ra,0(sp)
    84d4:	dec00104 	addi	sp,sp,4
    84d8:	00083a81 	jmpi	83a8 <udivmodsi4>
    84dc:	0147c83a 	sub	r3,zero,r5
    84e0:	003ff306 	br	84b0 <__modsi3+0x2c>

000084e4 <__udivsi3>:
    84e4:	000d883a 	mov	r6,zero
    84e8:	00083a81 	jmpi	83a8 <udivmodsi4>

000084ec <__umodsi3>:
    84ec:	01800044 	movi	r6,1
    84f0:	00083a81 	jmpi	83a8 <udivmodsi4>

000084f4 <__mulsi3>:
    84f4:	20000a26 	beq	r4,zero,8520 <__mulsi3+0x2c>
    84f8:	0007883a 	mov	r3,zero
    84fc:	2080004c 	andi	r2,r4,1
    8500:	1005003a 	cmpeq	r2,r2,zero
    8504:	2008d07a 	srli	r4,r4,1
    8508:	1000011e 	bne	r2,zero,8510 <__mulsi3+0x1c>
    850c:	1947883a 	add	r3,r3,r5
    8510:	294b883a 	add	r5,r5,r5
    8514:	203ff91e 	bne	r4,zero,84fc <__mulsi3+0x8>
    8518:	1805883a 	mov	r2,r3
    851c:	f800283a 	ret
    8520:	0007883a 	mov	r3,zero
    8524:	1805883a 	mov	r2,r3
    8528:	f800283a 	ret

0000852c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    852c:	defffe04 	addi	sp,sp,-8
    8530:	dfc00115 	stw	ra,4(sp)
    8534:	df000015 	stw	fp,0(sp)
    8538:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    853c:	01000074 	movhi	r4,1
    8540:	2126e404 	addi	r4,r4,-25712
    8544:	01400074 	movhi	r5,1
    8548:	29662f04 	addi	r5,r5,-26436
    854c:	01800074 	movhi	r6,1
    8550:	31a6e404 	addi	r6,r6,-25712
    8554:	00085ac0 	call	85ac <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    8558:	01000074 	movhi	r4,1
    855c:	21200804 	addi	r4,r4,-32736
    8560:	01400074 	movhi	r5,1
    8564:	29600804 	addi	r5,r5,-32736
    8568:	01800074 	movhi	r6,1
    856c:	31a00804 	addi	r6,r6,-32736
    8570:	00085ac0 	call	85ac <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    8574:	01000074 	movhi	r4,1
    8578:	21262204 	addi	r4,r4,-26488
    857c:	01400074 	movhi	r5,1
    8580:	29662204 	addi	r5,r5,-26488
    8584:	01800074 	movhi	r6,1
    8588:	31a62f04 	addi	r6,r6,-26436
    858c:	00085ac0 	call	85ac <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8590:	0008ad80 	call	8ad8 <alt_dcache_flush_all>
  alt_icache_flush_all();
    8594:	0008cfc0 	call	8cfc <alt_icache_flush_all>
}
    8598:	e037883a 	mov	sp,fp
    859c:	dfc00117 	ldw	ra,4(sp)
    85a0:	df000017 	ldw	fp,0(sp)
    85a4:	dec00204 	addi	sp,sp,8
    85a8:	f800283a 	ret

000085ac <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    85ac:	defffc04 	addi	sp,sp,-16
    85b0:	df000315 	stw	fp,12(sp)
    85b4:	df000304 	addi	fp,sp,12
    85b8:	e13ffd15 	stw	r4,-12(fp)
    85bc:	e17ffe15 	stw	r5,-8(fp)
    85c0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    85c4:	e0fffe17 	ldw	r3,-8(fp)
    85c8:	e0bffd17 	ldw	r2,-12(fp)
    85cc:	18800e26 	beq	r3,r2,8608 <alt_load_section+0x5c>
  {
    while( to != end )
    85d0:	00000a06 	br	85fc <alt_load_section+0x50>
    {
      *to++ = *from++;
    85d4:	e0bffd17 	ldw	r2,-12(fp)
    85d8:	10c00017 	ldw	r3,0(r2)
    85dc:	e0bffe17 	ldw	r2,-8(fp)
    85e0:	10c00015 	stw	r3,0(r2)
    85e4:	e0bffe17 	ldw	r2,-8(fp)
    85e8:	10800104 	addi	r2,r2,4
    85ec:	e0bffe15 	stw	r2,-8(fp)
    85f0:	e0bffd17 	ldw	r2,-12(fp)
    85f4:	10800104 	addi	r2,r2,4
    85f8:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    85fc:	e0fffe17 	ldw	r3,-8(fp)
    8600:	e0bfff17 	ldw	r2,-4(fp)
    8604:	18bff31e 	bne	r3,r2,85d4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    8608:	e037883a 	mov	sp,fp
    860c:	df000017 	ldw	fp,0(sp)
    8610:	dec00104 	addi	sp,sp,4
    8614:	f800283a 	ret

00008618 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8618:	defffd04 	addi	sp,sp,-12
    861c:	dfc00215 	stw	ra,8(sp)
    8620:	df000115 	stw	fp,4(sp)
    8624:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8628:	0009883a 	mov	r4,zero
    862c:	00086840 	call	8684 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8630:	00086b80 	call	86b8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    8634:	01000074 	movhi	r4,1
    8638:	21262204 	addi	r4,r4,-26488
    863c:	01400074 	movhi	r5,1
    8640:	29662204 	addi	r5,r5,-26488
    8644:	01800074 	movhi	r6,1
    8648:	31a62204 	addi	r6,r6,-26488
    864c:	0008df00 	call	8df0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    8650:	0008c340 	call	8c34 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    8654:	01000074 	movhi	r4,1
    8658:	21232604 	addi	r4,r4,-29544
    865c:	00094680 	call	9468 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    8660:	d120bd17 	ldw	r4,-32012(gp)
    8664:	d160be17 	ldw	r5,-32008(gp)
    8668:	d1a0bf17 	ldw	r6,-32004(gp)
    866c:	00082980 	call	8298 <main>
    8670:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    8674:	01000044 	movi	r4,1
    8678:	00089780 	call	8978 <close>
  exit (result);
    867c:	e13fff17 	ldw	r4,-4(fp)
    8680:	000947c0 	call	947c <exit>

00008684 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8684:	defffd04 	addi	sp,sp,-12
    8688:	dfc00215 	stw	ra,8(sp)
    868c:	df000115 	stw	fp,4(sp)
    8690:	df000104 	addi	fp,sp,4
    8694:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    8698:	00091c40 	call	91c4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    869c:	00800044 	movi	r2,1
    86a0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    86a4:	e037883a 	mov	sp,fp
    86a8:	dfc00117 	ldw	ra,4(sp)
    86ac:	df000017 	ldw	fp,0(sp)
    86b0:	dec00204 	addi	sp,sp,8
    86b4:	f800283a 	ret

000086b8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    86b8:	defffe04 	addi	sp,sp,-8
    86bc:	dfc00115 	stw	ra,4(sp)
    86c0:	df000015 	stw	fp,0(sp)
    86c4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    86c8:	01000074 	movhi	r4,1
    86cc:	21262f04 	addi	r4,r4,-26436
    86d0:	00086e80 	call	86e8 <alt_dev_reg>
}
    86d4:	e037883a 	mov	sp,fp
    86d8:	dfc00117 	ldw	ra,4(sp)
    86dc:	df000017 	ldw	fp,0(sp)
    86e0:	dec00204 	addi	sp,sp,8
    86e4:	f800283a 	ret

000086e8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    86e8:	defffd04 	addi	sp,sp,-12
    86ec:	dfc00215 	stw	ra,8(sp)
    86f0:	df000115 	stw	fp,4(sp)
    86f4:	df000104 	addi	fp,sp,4
    86f8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    86fc:	e13fff17 	ldw	r4,-4(fp)
    8700:	01400074 	movhi	r5,1
    8704:	2966de04 	addi	r5,r5,-25736
    8708:	0008b200 	call	8b20 <alt_dev_llist_insert>
}
    870c:	e037883a 	mov	sp,fp
    8710:	dfc00117 	ldw	ra,4(sp)
    8714:	df000017 	ldw	fp,0(sp)
    8718:	dec00204 	addi	sp,sp,8
    871c:	f800283a 	ret

00008720 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    8720:	defffa04 	addi	sp,sp,-24
    8724:	dfc00515 	stw	ra,20(sp)
    8728:	df000415 	stw	fp,16(sp)
    872c:	df000404 	addi	fp,sp,16
    8730:	e13ffd15 	stw	r4,-12(fp)
    8734:	e17ffe15 	stw	r5,-8(fp)
    8738:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    873c:	e0bffd17 	ldw	r2,-12(fp)
    8740:	10800017 	ldw	r2,0(r2)
    8744:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    8748:	e0bffc17 	ldw	r2,-16(fp)
    874c:	11000a04 	addi	r4,r2,40
    8750:	e0bffd17 	ldw	r2,-12(fp)
    8754:	11c00217 	ldw	r7,8(r2)
    8758:	e17ffe17 	ldw	r5,-8(fp)
    875c:	e1bfff17 	ldw	r6,-4(fp)
    8760:	00087d00 	call	87d0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    8764:	e037883a 	mov	sp,fp
    8768:	dfc00117 	ldw	ra,4(sp)
    876c:	df000017 	ldw	fp,0(sp)
    8770:	dec00204 	addi	sp,sp,8
    8774:	f800283a 	ret

00008778 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    8778:	defffa04 	addi	sp,sp,-24
    877c:	dfc00515 	stw	ra,20(sp)
    8780:	df000415 	stw	fp,16(sp)
    8784:	df000404 	addi	fp,sp,16
    8788:	e13ffd15 	stw	r4,-12(fp)
    878c:	e17ffe15 	stw	r5,-8(fp)
    8790:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8794:	e0bffd17 	ldw	r2,-12(fp)
    8798:	10800017 	ldw	r2,0(r2)
    879c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    87a0:	e0bffc17 	ldw	r2,-16(fp)
    87a4:	11000a04 	addi	r4,r2,40
    87a8:	e0bffd17 	ldw	r2,-12(fp)
    87ac:	11c00217 	ldw	r7,8(r2)
    87b0:	e17ffe17 	ldw	r5,-8(fp)
    87b4:	e1bfff17 	ldw	r6,-4(fp)
    87b8:	00088d40 	call	88d4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    87bc:	e037883a 	mov	sp,fp
    87c0:	dfc00117 	ldw	ra,4(sp)
    87c4:	df000017 	ldw	fp,0(sp)
    87c8:	dec00204 	addi	sp,sp,8
    87cc:	f800283a 	ret

000087d0 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    87d0:	defff604 	addi	sp,sp,-40
    87d4:	df000915 	stw	fp,36(sp)
    87d8:	df000904 	addi	fp,sp,36
    87dc:	e13ffb15 	stw	r4,-20(fp)
    87e0:	e17ffc15 	stw	r5,-16(fp)
    87e4:	e1bffd15 	stw	r6,-12(fp)
    87e8:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
    87ec:	e0bffb17 	ldw	r2,-20(fp)
    87f0:	10800017 	ldw	r2,0(r2)
    87f4:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
    87f8:	e0bffc17 	ldw	r2,-16(fp)
    87fc:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
    8800:	e0bffd17 	ldw	r2,-12(fp)
    8804:	1007883a 	mov	r3,r2
    8808:	e0bffc17 	ldw	r2,-16(fp)
    880c:	10c5883a 	add	r2,r2,r3
    8810:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
    8814:	00001606 	br	8870 <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    8818:	e0bffa17 	ldw	r2,-24(fp)
    881c:	10800037 	ldwio	r2,0(r2)
    8820:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    8824:	e0bff717 	ldw	r2,-36(fp)
    8828:	10a0000c 	andi	r2,r2,32768
    882c:	1005003a 	cmpeq	r2,r2,zero
    8830:	1000081e 	bne	r2,zero,8854 <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    8834:	e0bff717 	ldw	r2,-36(fp)
    8838:	1007883a 	mov	r3,r2
    883c:	e0bff917 	ldw	r2,-28(fp)
    8840:	10c00005 	stb	r3,0(r2)
    8844:	e0bff917 	ldw	r2,-28(fp)
    8848:	10800044 	addi	r2,r2,1
    884c:	e0bff915 	stw	r2,-28(fp)
    8850:	00000706 	br	8870 <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
    8854:	e0fff917 	ldw	r3,-28(fp)
    8858:	e0bffc17 	ldw	r2,-16(fp)
    885c:	1880071e 	bne	r3,r2,887c <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
    8860:	e0bffe17 	ldw	r2,-8(fp)
    8864:	1090000c 	andi	r2,r2,16384
    8868:	1004c03a 	cmpne	r2,r2,zero
    886c:	1000031e 	bne	r2,zero,887c <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    8870:	e0fff917 	ldw	r3,-28(fp)
    8874:	e0bff817 	ldw	r2,-32(fp)
    8878:	18bfe736 	bltu	r3,r2,8818 <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
    887c:	e0fff917 	ldw	r3,-28(fp)
    8880:	e0bffc17 	ldw	r2,-16(fp)
    8884:	18800526 	beq	r3,r2,889c <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    8888:	e0fff917 	ldw	r3,-28(fp)
    888c:	e0bffc17 	ldw	r2,-16(fp)
    8890:	1887c83a 	sub	r3,r3,r2
    8894:	e0ffff15 	stw	r3,-4(fp)
    8898:	00000906 	br	88c0 <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
    889c:	e0bffe17 	ldw	r2,-8(fp)
    88a0:	1090000c 	andi	r2,r2,16384
    88a4:	1005003a 	cmpeq	r2,r2,zero
    88a8:	1000031e 	bne	r2,zero,88b8 <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
    88ac:	00bffd44 	movi	r2,-11
    88b0:	e0bfff15 	stw	r2,-4(fp)
    88b4:	00000206 	br	88c0 <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
    88b8:	00bffec4 	movi	r2,-5
    88bc:	e0bfff15 	stw	r2,-4(fp)
    88c0:	e0bfff17 	ldw	r2,-4(fp)
}
    88c4:	e037883a 	mov	sp,fp
    88c8:	df000017 	ldw	fp,0(sp)
    88cc:	dec00104 	addi	sp,sp,4
    88d0:	f800283a 	ret

000088d4 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    88d4:	defff904 	addi	sp,sp,-28
    88d8:	df000615 	stw	fp,24(sp)
    88dc:	df000604 	addi	fp,sp,24
    88e0:	e13ffc15 	stw	r4,-16(fp)
    88e4:	e17ffd15 	stw	r5,-12(fp)
    88e8:	e1bffe15 	stw	r6,-8(fp)
    88ec:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    88f0:	e0bffc17 	ldw	r2,-16(fp)
    88f4:	10800017 	ldw	r2,0(r2)
    88f8:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
    88fc:	e0bffe17 	ldw	r2,-8(fp)
    8900:	1007883a 	mov	r3,r2
    8904:	e0bffd17 	ldw	r2,-12(fp)
    8908:	10c5883a 	add	r2,r2,r3
    890c:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    8910:	00001106 	br	8958 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8914:	e0bffb17 	ldw	r2,-20(fp)
    8918:	10800104 	addi	r2,r2,4
    891c:	10800037 	ldwio	r2,0(r2)
    8920:	10bfffec 	andhi	r2,r2,65535
    8924:	1005003a 	cmpeq	r2,r2,zero
    8928:	10000b1e 	bne	r2,zero,8958 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    892c:	e13ffb17 	ldw	r4,-20(fp)
    8930:	e0bffd17 	ldw	r2,-12(fp)
    8934:	10800003 	ldbu	r2,0(r2)
    8938:	10c03fcc 	andi	r3,r2,255
    893c:	18c0201c 	xori	r3,r3,128
    8940:	18ffe004 	addi	r3,r3,-128
    8944:	e0bffd17 	ldw	r2,-12(fp)
    8948:	10800044 	addi	r2,r2,1
    894c:	e0bffd15 	stw	r2,-12(fp)
    8950:	2005883a 	mov	r2,r4
    8954:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    8958:	e0fffd17 	ldw	r3,-12(fp)
    895c:	e0bffa17 	ldw	r2,-24(fp)
    8960:	18bfec36 	bltu	r3,r2,8914 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    8964:	e0bffe17 	ldw	r2,-8(fp)
}
    8968:	e037883a 	mov	sp,fp
    896c:	df000017 	ldw	fp,0(sp)
    8970:	dec00104 	addi	sp,sp,4
    8974:	f800283a 	ret

00008978 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    8978:	defff804 	addi	sp,sp,-32
    897c:	dfc00715 	stw	ra,28(sp)
    8980:	df000615 	stw	fp,24(sp)
    8984:	df000604 	addi	fp,sp,24
    8988:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    898c:	e0bffc17 	ldw	r2,-16(fp)
    8990:	1004803a 	cmplt	r2,r2,zero
    8994:	1000091e 	bne	r2,zero,89bc <close+0x44>
    8998:	e13ffc17 	ldw	r4,-16(fp)
    899c:	01400304 	movi	r5,12
    89a0:	00084f40 	call	84f4 <__mulsi3>
    89a4:	1007883a 	mov	r3,r2
    89a8:	00800074 	movhi	r2,1
    89ac:	10a64404 	addi	r2,r2,-26352
    89b0:	1887883a 	add	r3,r3,r2
    89b4:	e0ffff15 	stw	r3,-4(fp)
    89b8:	00000106 	br	89c0 <close+0x48>
    89bc:	e03fff15 	stw	zero,-4(fp)
    89c0:	e0bfff17 	ldw	r2,-4(fp)
    89c4:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    89c8:	e0bffb17 	ldw	r2,-20(fp)
    89cc:	1005003a 	cmpeq	r2,r2,zero
    89d0:	10001d1e 	bne	r2,zero,8a48 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    89d4:	e0bffb17 	ldw	r2,-20(fp)
    89d8:	10800017 	ldw	r2,0(r2)
    89dc:	10800417 	ldw	r2,16(r2)
    89e0:	1005003a 	cmpeq	r2,r2,zero
    89e4:	1000071e 	bne	r2,zero,8a04 <close+0x8c>
    89e8:	e0bffb17 	ldw	r2,-20(fp)
    89ec:	10800017 	ldw	r2,0(r2)
    89f0:	10800417 	ldw	r2,16(r2)
    89f4:	e13ffb17 	ldw	r4,-20(fp)
    89f8:	103ee83a 	callr	r2
    89fc:	e0bffe15 	stw	r2,-8(fp)
    8a00:	00000106 	br	8a08 <close+0x90>
    8a04:	e03ffe15 	stw	zero,-8(fp)
    8a08:	e0bffe17 	ldw	r2,-8(fp)
    8a0c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    8a10:	e13ffc17 	ldw	r4,-16(fp)
    8a14:	000914c0 	call	914c <alt_release_fd>
    if (rval < 0)
    8a18:	e0bffa17 	ldw	r2,-24(fp)
    8a1c:	1004403a 	cmpge	r2,r2,zero
    8a20:	1000071e 	bne	r2,zero,8a40 <close+0xc8>
    {
      ALT_ERRNO = -rval;
    8a24:	0008a780 	call	8a78 <alt_get_errno>
    8a28:	e0fffa17 	ldw	r3,-24(fp)
    8a2c:	00c7c83a 	sub	r3,zero,r3
    8a30:	10c00015 	stw	r3,0(r2)
      return -1;
    8a34:	00bfffc4 	movi	r2,-1
    8a38:	e0bffd15 	stw	r2,-12(fp)
    8a3c:	00000806 	br	8a60 <close+0xe8>
    }
    return 0;
    8a40:	e03ffd15 	stw	zero,-12(fp)
    8a44:	00000606 	br	8a60 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    8a48:	0008a780 	call	8a78 <alt_get_errno>
    8a4c:	1007883a 	mov	r3,r2
    8a50:	00801444 	movi	r2,81
    8a54:	18800015 	stw	r2,0(r3)
    return -1;
    8a58:	00bfffc4 	movi	r2,-1
    8a5c:	e0bffd15 	stw	r2,-12(fp)
    8a60:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    8a64:	e037883a 	mov	sp,fp
    8a68:	dfc00117 	ldw	ra,4(sp)
    8a6c:	df000017 	ldw	fp,0(sp)
    8a70:	dec00204 	addi	sp,sp,8
    8a74:	f800283a 	ret

00008a78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8a78:	defffd04 	addi	sp,sp,-12
    8a7c:	dfc00215 	stw	ra,8(sp)
    8a80:	df000115 	stw	fp,4(sp)
    8a84:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    8a88:	00800074 	movhi	r2,1
    8a8c:	10a6e104 	addi	r2,r2,-25724
    8a90:	10800017 	ldw	r2,0(r2)
    8a94:	1005003a 	cmpeq	r2,r2,zero
    8a98:	1000061e 	bne	r2,zero,8ab4 <alt_get_errno+0x3c>
    8a9c:	00800074 	movhi	r2,1
    8aa0:	10a6e104 	addi	r2,r2,-25724
    8aa4:	10800017 	ldw	r2,0(r2)
    8aa8:	103ee83a 	callr	r2
    8aac:	e0bfff15 	stw	r2,-4(fp)
    8ab0:	00000306 	br	8ac0 <alt_get_errno+0x48>
    8ab4:	00800074 	movhi	r2,1
    8ab8:	10a79c04 	addi	r2,r2,-24976
    8abc:	e0bfff15 	stw	r2,-4(fp)
    8ac0:	e0bfff17 	ldw	r2,-4(fp)
}
    8ac4:	e037883a 	mov	sp,fp
    8ac8:	dfc00117 	ldw	ra,4(sp)
    8acc:	df000017 	ldw	fp,0(sp)
    8ad0:	dec00204 	addi	sp,sp,8
    8ad4:	f800283a 	ret

00008ad8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8ad8:	deffff04 	addi	sp,sp,-4
    8adc:	df000015 	stw	fp,0(sp)
    8ae0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    8ae4:	e037883a 	mov	sp,fp
    8ae8:	df000017 	ldw	fp,0(sp)
    8aec:	dec00104 	addi	sp,sp,4
    8af0:	f800283a 	ret

00008af4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    8af4:	defffc04 	addi	sp,sp,-16
    8af8:	df000315 	stw	fp,12(sp)
    8afc:	df000304 	addi	fp,sp,12
    8b00:	e13ffd15 	stw	r4,-12(fp)
    8b04:	e17ffe15 	stw	r5,-8(fp)
    8b08:	e1bfff15 	stw	r6,-4(fp)
  return len;
    8b0c:	e0bfff17 	ldw	r2,-4(fp)
}
    8b10:	e037883a 	mov	sp,fp
    8b14:	df000017 	ldw	fp,0(sp)
    8b18:	dec00104 	addi	sp,sp,4
    8b1c:	f800283a 	ret

00008b20 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    8b20:	defff904 	addi	sp,sp,-28
    8b24:	dfc00615 	stw	ra,24(sp)
    8b28:	df000515 	stw	fp,20(sp)
    8b2c:	df000504 	addi	fp,sp,20
    8b30:	e13ffd15 	stw	r4,-12(fp)
    8b34:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    8b38:	e0bffd17 	ldw	r2,-12(fp)
    8b3c:	1005003a 	cmpeq	r2,r2,zero
    8b40:	1000041e 	bne	r2,zero,8b54 <alt_dev_llist_insert+0x34>
    8b44:	e0bffd17 	ldw	r2,-12(fp)
    8b48:	10800217 	ldw	r2,8(r2)
    8b4c:	1004c03a 	cmpne	r2,r2,zero
    8b50:	1000071e 	bne	r2,zero,8b70 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    8b54:	0008bd40 	call	8bd4 <alt_get_errno>
    8b58:	1007883a 	mov	r3,r2
    8b5c:	00800584 	movi	r2,22
    8b60:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    8b64:	00bffa84 	movi	r2,-22
    8b68:	e0bfff15 	stw	r2,-4(fp)
    8b6c:	00001306 	br	8bbc <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    8b70:	e0fffd17 	ldw	r3,-12(fp)
    8b74:	e0bffe17 	ldw	r2,-8(fp)
    8b78:	e0bffb15 	stw	r2,-20(fp)
    8b7c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    8b80:	e0fffc17 	ldw	r3,-16(fp)
    8b84:	e0bffb17 	ldw	r2,-20(fp)
    8b88:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    8b8c:	e0bffb17 	ldw	r2,-20(fp)
    8b90:	10c00017 	ldw	r3,0(r2)
    8b94:	e0bffc17 	ldw	r2,-16(fp)
    8b98:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    8b9c:	e0bffb17 	ldw	r2,-20(fp)
    8ba0:	10c00017 	ldw	r3,0(r2)
    8ba4:	e0bffc17 	ldw	r2,-16(fp)
    8ba8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    8bac:	e0fffb17 	ldw	r3,-20(fp)
    8bb0:	e0bffc17 	ldw	r2,-16(fp)
    8bb4:	18800015 	stw	r2,0(r3)

  return 0;  
    8bb8:	e03fff15 	stw	zero,-4(fp)
    8bbc:	e0bfff17 	ldw	r2,-4(fp)
}
    8bc0:	e037883a 	mov	sp,fp
    8bc4:	dfc00117 	ldw	ra,4(sp)
    8bc8:	df000017 	ldw	fp,0(sp)
    8bcc:	dec00204 	addi	sp,sp,8
    8bd0:	f800283a 	ret

00008bd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8bd4:	defffd04 	addi	sp,sp,-12
    8bd8:	dfc00215 	stw	ra,8(sp)
    8bdc:	df000115 	stw	fp,4(sp)
    8be0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    8be4:	00800074 	movhi	r2,1
    8be8:	10a6e104 	addi	r2,r2,-25724
    8bec:	10800017 	ldw	r2,0(r2)
    8bf0:	1005003a 	cmpeq	r2,r2,zero
    8bf4:	1000061e 	bne	r2,zero,8c10 <alt_get_errno+0x3c>
    8bf8:	00800074 	movhi	r2,1
    8bfc:	10a6e104 	addi	r2,r2,-25724
    8c00:	10800017 	ldw	r2,0(r2)
    8c04:	103ee83a 	callr	r2
    8c08:	e0bfff15 	stw	r2,-4(fp)
    8c0c:	00000306 	br	8c1c <alt_get_errno+0x48>
    8c10:	00800074 	movhi	r2,1
    8c14:	10a79c04 	addi	r2,r2,-24976
    8c18:	e0bfff15 	stw	r2,-4(fp)
    8c1c:	e0bfff17 	ldw	r2,-4(fp)
}
    8c20:	e037883a 	mov	sp,fp
    8c24:	dfc00117 	ldw	ra,4(sp)
    8c28:	df000017 	ldw	fp,0(sp)
    8c2c:	dec00204 	addi	sp,sp,8
    8c30:	f800283a 	ret

00008c34 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    8c34:	defffd04 	addi	sp,sp,-12
    8c38:	dfc00215 	stw	ra,8(sp)
    8c3c:	df000115 	stw	fp,4(sp)
    8c40:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    8c44:	00bfff04 	movi	r2,-4
    8c48:	00c00074 	movhi	r3,1
    8c4c:	18e62204 	addi	r3,r3,-26488
    8c50:	1885883a 	add	r2,r3,r2
    8c54:	e0bfff15 	stw	r2,-4(fp)
    8c58:	00000606 	br	8c74 <_do_ctors+0x40>
        (*ctor) (); 
    8c5c:	e0bfff17 	ldw	r2,-4(fp)
    8c60:	10800017 	ldw	r2,0(r2)
    8c64:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    8c68:	e0bfff17 	ldw	r2,-4(fp)
    8c6c:	10bfff04 	addi	r2,r2,-4
    8c70:	e0bfff15 	stw	r2,-4(fp)
    8c74:	e0ffff17 	ldw	r3,-4(fp)
    8c78:	00800074 	movhi	r2,1
    8c7c:	10a62104 	addi	r2,r2,-26492
    8c80:	18bff62e 	bgeu	r3,r2,8c5c <_do_ctors+0x28>
        (*ctor) (); 
}
    8c84:	e037883a 	mov	sp,fp
    8c88:	dfc00117 	ldw	ra,4(sp)
    8c8c:	df000017 	ldw	fp,0(sp)
    8c90:	dec00204 	addi	sp,sp,8
    8c94:	f800283a 	ret

00008c98 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    8c98:	defffd04 	addi	sp,sp,-12
    8c9c:	dfc00215 	stw	ra,8(sp)
    8ca0:	df000115 	stw	fp,4(sp)
    8ca4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    8ca8:	00bfff04 	movi	r2,-4
    8cac:	00c00074 	movhi	r3,1
    8cb0:	18e62204 	addi	r3,r3,-26488
    8cb4:	1885883a 	add	r2,r3,r2
    8cb8:	e0bfff15 	stw	r2,-4(fp)
    8cbc:	00000606 	br	8cd8 <_do_dtors+0x40>
        (*dtor) (); 
    8cc0:	e0bfff17 	ldw	r2,-4(fp)
    8cc4:	10800017 	ldw	r2,0(r2)
    8cc8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    8ccc:	e0bfff17 	ldw	r2,-4(fp)
    8cd0:	10bfff04 	addi	r2,r2,-4
    8cd4:	e0bfff15 	stw	r2,-4(fp)
    8cd8:	e0ffff17 	ldw	r3,-4(fp)
    8cdc:	00800074 	movhi	r2,1
    8ce0:	10a62204 	addi	r2,r2,-26488
    8ce4:	18bff62e 	bgeu	r3,r2,8cc0 <_do_dtors+0x28>
        (*dtor) (); 
}
    8ce8:	e037883a 	mov	sp,fp
    8cec:	dfc00117 	ldw	ra,4(sp)
    8cf0:	df000017 	ldw	fp,0(sp)
    8cf4:	dec00204 	addi	sp,sp,8
    8cf8:	f800283a 	ret

00008cfc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    8cfc:	deffff04 	addi	sp,sp,-4
    8d00:	df000015 	stw	fp,0(sp)
    8d04:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    8d08:	e037883a 	mov	sp,fp
    8d0c:	df000017 	ldw	fp,0(sp)
    8d10:	dec00104 	addi	sp,sp,4
    8d14:	f800283a 	ret

00008d18 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    8d18:	defff804 	addi	sp,sp,-32
    8d1c:	dfc00715 	stw	ra,28(sp)
    8d20:	df000615 	stw	fp,24(sp)
    8d24:	dc000515 	stw	r16,20(sp)
    8d28:	df000504 	addi	fp,sp,20
    8d2c:	e13ffc15 	stw	r4,-16(fp)
    8d30:	e17ffd15 	stw	r5,-12(fp)
    8d34:	e1bffe15 	stw	r6,-8(fp)
    8d38:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    8d3c:	e13ffd17 	ldw	r4,-12(fp)
    8d40:	e17ffe17 	ldw	r5,-8(fp)
    8d44:	e1bfff17 	ldw	r6,-4(fp)
    8d48:	0008f600 	call	8f60 <open>
    8d4c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    8d50:	e0bffb17 	ldw	r2,-20(fp)
    8d54:	1004803a 	cmplt	r2,r2,zero
    8d58:	10001f1e 	bne	r2,zero,8dd8 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    8d5c:	e13ffb17 	ldw	r4,-20(fp)
    8d60:	04000074 	movhi	r16,1
    8d64:	84264404 	addi	r16,r16,-26352
    8d68:	01400304 	movi	r5,12
    8d6c:	00084f40 	call	84f4 <__mulsi3>
    8d70:	1405883a 	add	r2,r2,r16
    8d74:	10c00017 	ldw	r3,0(r2)
    8d78:	e0bffc17 	ldw	r2,-16(fp)
    8d7c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    8d80:	e13ffb17 	ldw	r4,-20(fp)
    8d84:	04000074 	movhi	r16,1
    8d88:	84264404 	addi	r16,r16,-26352
    8d8c:	01400304 	movi	r5,12
    8d90:	00084f40 	call	84f4 <__mulsi3>
    8d94:	1405883a 	add	r2,r2,r16
    8d98:	10800104 	addi	r2,r2,4
    8d9c:	10c00017 	ldw	r3,0(r2)
    8da0:	e0bffc17 	ldw	r2,-16(fp)
    8da4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    8da8:	e13ffb17 	ldw	r4,-20(fp)
    8dac:	04000074 	movhi	r16,1
    8db0:	84264404 	addi	r16,r16,-26352
    8db4:	01400304 	movi	r5,12
    8db8:	00084f40 	call	84f4 <__mulsi3>
    8dbc:	1405883a 	add	r2,r2,r16
    8dc0:	10800204 	addi	r2,r2,8
    8dc4:	10c00017 	ldw	r3,0(r2)
    8dc8:	e0bffc17 	ldw	r2,-16(fp)
    8dcc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    8dd0:	e13ffb17 	ldw	r4,-20(fp)
    8dd4:	000914c0 	call	914c <alt_release_fd>
  }
} 
    8dd8:	e037883a 	mov	sp,fp
    8ddc:	dfc00217 	ldw	ra,8(sp)
    8de0:	df000117 	ldw	fp,4(sp)
    8de4:	dc000017 	ldw	r16,0(sp)
    8de8:	dec00304 	addi	sp,sp,12
    8dec:	f800283a 	ret

00008df0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    8df0:	defffb04 	addi	sp,sp,-20
    8df4:	dfc00415 	stw	ra,16(sp)
    8df8:	df000315 	stw	fp,12(sp)
    8dfc:	df000304 	addi	fp,sp,12
    8e00:	e13ffd15 	stw	r4,-12(fp)
    8e04:	e17ffe15 	stw	r5,-8(fp)
    8e08:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    8e0c:	01000074 	movhi	r4,1
    8e10:	21264704 	addi	r4,r4,-26340
    8e14:	e17ffd17 	ldw	r5,-12(fp)
    8e18:	01800044 	movi	r6,1
    8e1c:	01c07fc4 	movi	r7,511
    8e20:	0008d180 	call	8d18 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    8e24:	01000074 	movhi	r4,1
    8e28:	21264404 	addi	r4,r4,-26352
    8e2c:	e17ffe17 	ldw	r5,-8(fp)
    8e30:	000d883a 	mov	r6,zero
    8e34:	01c07fc4 	movi	r7,511
    8e38:	0008d180 	call	8d18 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    8e3c:	01000074 	movhi	r4,1
    8e40:	21264a04 	addi	r4,r4,-26328
    8e44:	e17fff17 	ldw	r5,-4(fp)
    8e48:	01800044 	movi	r6,1
    8e4c:	01c07fc4 	movi	r7,511
    8e50:	0008d180 	call	8d18 <alt_open_fd>
}  
    8e54:	e037883a 	mov	sp,fp
    8e58:	dfc00117 	ldw	ra,4(sp)
    8e5c:	df000017 	ldw	fp,0(sp)
    8e60:	dec00204 	addi	sp,sp,8
    8e64:	f800283a 	ret

00008e68 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    8e68:	defffa04 	addi	sp,sp,-24
    8e6c:	dfc00515 	stw	ra,20(sp)
    8e70:	df000415 	stw	fp,16(sp)
    8e74:	dc000315 	stw	r16,12(sp)
    8e78:	df000304 	addi	fp,sp,12
    8e7c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    8e80:	e0bffe17 	ldw	r2,-8(fp)
    8e84:	10800217 	ldw	r2,8(r2)
    8e88:	10d00034 	orhi	r3,r2,16384
    8e8c:	e0bffe17 	ldw	r2,-8(fp)
    8e90:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    8e94:	e03ffd15 	stw	zero,-12(fp)
    8e98:	00002306 	br	8f28 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    8e9c:	e13ffd17 	ldw	r4,-12(fp)
    8ea0:	04000074 	movhi	r16,1
    8ea4:	84264404 	addi	r16,r16,-26352
    8ea8:	01400304 	movi	r5,12
    8eac:	00084f40 	call	84f4 <__mulsi3>
    8eb0:	1405883a 	add	r2,r2,r16
    8eb4:	10c00017 	ldw	r3,0(r2)
    8eb8:	e0bffe17 	ldw	r2,-8(fp)
    8ebc:	10800017 	ldw	r2,0(r2)
    8ec0:	1880161e 	bne	r3,r2,8f1c <alt_file_locked+0xb4>
    8ec4:	e13ffd17 	ldw	r4,-12(fp)
    8ec8:	04000074 	movhi	r16,1
    8ecc:	84264404 	addi	r16,r16,-26352
    8ed0:	01400304 	movi	r5,12
    8ed4:	00084f40 	call	84f4 <__mulsi3>
    8ed8:	1405883a 	add	r2,r2,r16
    8edc:	10800204 	addi	r2,r2,8
    8ee0:	10800017 	ldw	r2,0(r2)
    8ee4:	1004403a 	cmpge	r2,r2,zero
    8ee8:	10000c1e 	bne	r2,zero,8f1c <alt_file_locked+0xb4>
    8eec:	e13ffd17 	ldw	r4,-12(fp)
    8ef0:	01400304 	movi	r5,12
    8ef4:	00084f40 	call	84f4 <__mulsi3>
    8ef8:	1007883a 	mov	r3,r2
    8efc:	00800074 	movhi	r2,1
    8f00:	10a64404 	addi	r2,r2,-26352
    8f04:	1887883a 	add	r3,r3,r2
    8f08:	e0bffe17 	ldw	r2,-8(fp)
    8f0c:	18800326 	beq	r3,r2,8f1c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    8f10:	00bffcc4 	movi	r2,-13
    8f14:	e0bfff15 	stw	r2,-4(fp)
    8f18:	00000a06 	br	8f44 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    8f1c:	e0bffd17 	ldw	r2,-12(fp)
    8f20:	10800044 	addi	r2,r2,1
    8f24:	e0bffd15 	stw	r2,-12(fp)
    8f28:	00800074 	movhi	r2,1
    8f2c:	10a6e004 	addi	r2,r2,-25728
    8f30:	10800017 	ldw	r2,0(r2)
    8f34:	1007883a 	mov	r3,r2
    8f38:	e0bffd17 	ldw	r2,-12(fp)
    8f3c:	18bfd72e 	bgeu	r3,r2,8e9c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    8f40:	e03fff15 	stw	zero,-4(fp)
    8f44:	e0bfff17 	ldw	r2,-4(fp)
}
    8f48:	e037883a 	mov	sp,fp
    8f4c:	dfc00217 	ldw	ra,8(sp)
    8f50:	df000117 	ldw	fp,4(sp)
    8f54:	dc000017 	ldw	r16,0(sp)
    8f58:	dec00304 	addi	sp,sp,12
    8f5c:	f800283a 	ret

00008f60 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    8f60:	defff404 	addi	sp,sp,-48
    8f64:	dfc00b15 	stw	ra,44(sp)
    8f68:	df000a15 	stw	fp,40(sp)
    8f6c:	df000a04 	addi	fp,sp,40
    8f70:	e13ffb15 	stw	r4,-20(fp)
    8f74:	e17ffc15 	stw	r5,-16(fp)
    8f78:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    8f7c:	00bfffc4 	movi	r2,-1
    8f80:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    8f84:	00bffb44 	movi	r2,-19
    8f88:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    8f8c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    8f90:	e13ffb17 	ldw	r4,-20(fp)
    8f94:	01400074 	movhi	r5,1
    8f98:	2966de04 	addi	r5,r5,-25736
    8f9c:	00091e40 	call	91e4 <alt_find_dev>
    8fa0:	e0bffa15 	stw	r2,-24(fp)
    8fa4:	e0bffa17 	ldw	r2,-24(fp)
    8fa8:	1004c03a 	cmpne	r2,r2,zero
    8fac:	1000051e 	bne	r2,zero,8fc4 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    8fb0:	e13ffb17 	ldw	r4,-20(fp)
    8fb4:	00092780 	call	9278 <alt_find_file>
    8fb8:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    8fbc:	00800044 	movi	r2,1
    8fc0:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    8fc4:	e0bffa17 	ldw	r2,-24(fp)
    8fc8:	1005003a 	cmpeq	r2,r2,zero
    8fcc:	1000311e 	bne	r2,zero,9094 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    8fd0:	e13ffa17 	ldw	r4,-24(fp)
    8fd4:	00093980 	call	9398 <alt_get_fd>
    8fd8:	e0bff815 	stw	r2,-32(fp)
    8fdc:	e0bff817 	ldw	r2,-32(fp)
    8fe0:	1004403a 	cmpge	r2,r2,zero
    8fe4:	1000031e 	bne	r2,zero,8ff4 <open+0x94>
    {
      status = index;
    8fe8:	e0bff817 	ldw	r2,-32(fp)
    8fec:	e0bff715 	stw	r2,-36(fp)
    8ff0:	00002a06 	br	909c <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    8ff4:	e13ff817 	ldw	r4,-32(fp)
    8ff8:	01400304 	movi	r5,12
    8ffc:	00084f40 	call	84f4 <__mulsi3>
    9000:	1007883a 	mov	r3,r2
    9004:	00800074 	movhi	r2,1
    9008:	10a64404 	addi	r2,r2,-26352
    900c:	1885883a 	add	r2,r3,r2
    9010:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    9014:	e0fffc17 	ldw	r3,-16(fp)
    9018:	00900034 	movhi	r2,16384
    901c:	10bfffc4 	addi	r2,r2,-1
    9020:	1886703a 	and	r3,r3,r2
    9024:	e0bff917 	ldw	r2,-28(fp)
    9028:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    902c:	e0bff617 	ldw	r2,-40(fp)
    9030:	1004c03a 	cmpne	r2,r2,zero
    9034:	1000061e 	bne	r2,zero,9050 <open+0xf0>
    9038:	e13ff917 	ldw	r4,-28(fp)
    903c:	0008e680 	call	8e68 <alt_file_locked>
    9040:	e0bff715 	stw	r2,-36(fp)
    9044:	e0bff717 	ldw	r2,-36(fp)
    9048:	1004803a 	cmplt	r2,r2,zero
    904c:	1000131e 	bne	r2,zero,909c <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    9050:	e0bffa17 	ldw	r2,-24(fp)
    9054:	10800317 	ldw	r2,12(r2)
    9058:	1005003a 	cmpeq	r2,r2,zero
    905c:	1000091e 	bne	r2,zero,9084 <open+0x124>
    9060:	e0bffa17 	ldw	r2,-24(fp)
    9064:	10800317 	ldw	r2,12(r2)
    9068:	e13ff917 	ldw	r4,-28(fp)
    906c:	e17ffb17 	ldw	r5,-20(fp)
    9070:	e1bffc17 	ldw	r6,-16(fp)
    9074:	e1fffd17 	ldw	r7,-12(fp)
    9078:	103ee83a 	callr	r2
    907c:	e0bfff15 	stw	r2,-4(fp)
    9080:	00000106 	br	9088 <open+0x128>
    9084:	e03fff15 	stw	zero,-4(fp)
    9088:	e0bfff17 	ldw	r2,-4(fp)
    908c:	e0bff715 	stw	r2,-36(fp)
    9090:	00000206 	br	909c <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    9094:	00bffb44 	movi	r2,-19
    9098:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    909c:	e0bff717 	ldw	r2,-36(fp)
    90a0:	1004403a 	cmpge	r2,r2,zero
    90a4:	1000091e 	bne	r2,zero,90cc <open+0x16c>
  {
    alt_release_fd (index);  
    90a8:	e13ff817 	ldw	r4,-32(fp)
    90ac:	000914c0 	call	914c <alt_release_fd>
    ALT_ERRNO = -status;
    90b0:	00090ec0 	call	90ec <alt_get_errno>
    90b4:	e0fff717 	ldw	r3,-36(fp)
    90b8:	00c7c83a 	sub	r3,zero,r3
    90bc:	10c00015 	stw	r3,0(r2)
    return -1;
    90c0:	00bfffc4 	movi	r2,-1
    90c4:	e0bffe15 	stw	r2,-8(fp)
    90c8:	00000206 	br	90d4 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    90cc:	e0bff817 	ldw	r2,-32(fp)
    90d0:	e0bffe15 	stw	r2,-8(fp)
    90d4:	e0bffe17 	ldw	r2,-8(fp)
}
    90d8:	e037883a 	mov	sp,fp
    90dc:	dfc00117 	ldw	ra,4(sp)
    90e0:	df000017 	ldw	fp,0(sp)
    90e4:	dec00204 	addi	sp,sp,8
    90e8:	f800283a 	ret

000090ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    90ec:	defffd04 	addi	sp,sp,-12
    90f0:	dfc00215 	stw	ra,8(sp)
    90f4:	df000115 	stw	fp,4(sp)
    90f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    90fc:	00800074 	movhi	r2,1
    9100:	10a6e104 	addi	r2,r2,-25724
    9104:	10800017 	ldw	r2,0(r2)
    9108:	1005003a 	cmpeq	r2,r2,zero
    910c:	1000061e 	bne	r2,zero,9128 <alt_get_errno+0x3c>
    9110:	00800074 	movhi	r2,1
    9114:	10a6e104 	addi	r2,r2,-25724
    9118:	10800017 	ldw	r2,0(r2)
    911c:	103ee83a 	callr	r2
    9120:	e0bfff15 	stw	r2,-4(fp)
    9124:	00000306 	br	9134 <alt_get_errno+0x48>
    9128:	00800074 	movhi	r2,1
    912c:	10a79c04 	addi	r2,r2,-24976
    9130:	e0bfff15 	stw	r2,-4(fp)
    9134:	e0bfff17 	ldw	r2,-4(fp)
}
    9138:	e037883a 	mov	sp,fp
    913c:	dfc00117 	ldw	ra,4(sp)
    9140:	df000017 	ldw	fp,0(sp)
    9144:	dec00204 	addi	sp,sp,8
    9148:	f800283a 	ret

0000914c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    914c:	defffc04 	addi	sp,sp,-16
    9150:	dfc00315 	stw	ra,12(sp)
    9154:	df000215 	stw	fp,8(sp)
    9158:	dc000115 	stw	r16,4(sp)
    915c:	df000104 	addi	fp,sp,4
    9160:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    9164:	e0bfff17 	ldw	r2,-4(fp)
    9168:	108000d0 	cmplti	r2,r2,3
    916c:	10000f1e 	bne	r2,zero,91ac <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    9170:	e13fff17 	ldw	r4,-4(fp)
    9174:	04000074 	movhi	r16,1
    9178:	84264404 	addi	r16,r16,-26352
    917c:	01400304 	movi	r5,12
    9180:	00084f40 	call	84f4 <__mulsi3>
    9184:	1405883a 	add	r2,r2,r16
    9188:	10800204 	addi	r2,r2,8
    918c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    9190:	e13fff17 	ldw	r4,-4(fp)
    9194:	04000074 	movhi	r16,1
    9198:	84264404 	addi	r16,r16,-26352
    919c:	01400304 	movi	r5,12
    91a0:	00084f40 	call	84f4 <__mulsi3>
    91a4:	1405883a 	add	r2,r2,r16
    91a8:	10000015 	stw	zero,0(r2)
  }
}
    91ac:	e037883a 	mov	sp,fp
    91b0:	dfc00217 	ldw	ra,8(sp)
    91b4:	df000117 	ldw	fp,4(sp)
    91b8:	dc000017 	ldw	r16,0(sp)
    91bc:	dec00304 	addi	sp,sp,12
    91c0:	f800283a 	ret

000091c4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    91c4:	deffff04 	addi	sp,sp,-4
    91c8:	df000015 	stw	fp,0(sp)
    91cc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    91d0:	000170fa 	wrctl	ienable,zero
}
    91d4:	e037883a 	mov	sp,fp
    91d8:	df000017 	ldw	fp,0(sp)
    91dc:	dec00104 	addi	sp,sp,4
    91e0:	f800283a 	ret

000091e4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    91e4:	defff904 	addi	sp,sp,-28
    91e8:	dfc00615 	stw	ra,24(sp)
    91ec:	df000515 	stw	fp,20(sp)
    91f0:	df000504 	addi	fp,sp,20
    91f4:	e13ffd15 	stw	r4,-12(fp)
    91f8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    91fc:	e0bffe17 	ldw	r2,-8(fp)
    9200:	10800017 	ldw	r2,0(r2)
    9204:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    9208:	e13ffd17 	ldw	r4,-12(fp)
    920c:	00094d80 	call	94d8 <strlen>
    9210:	10800044 	addi	r2,r2,1
    9214:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9218:	00000d06 	br	9250 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    921c:	e0bffc17 	ldw	r2,-16(fp)
    9220:	11000217 	ldw	r4,8(r2)
    9224:	e1bffb17 	ldw	r6,-20(fp)
    9228:	e17ffd17 	ldw	r5,-12(fp)
    922c:	000949c0 	call	949c <memcmp>
    9230:	1004c03a 	cmpne	r2,r2,zero
    9234:	1000031e 	bne	r2,zero,9244 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    9238:	e0bffc17 	ldw	r2,-16(fp)
    923c:	e0bfff15 	stw	r2,-4(fp)
    9240:	00000706 	br	9260 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    9244:	e0bffc17 	ldw	r2,-16(fp)
    9248:	10800017 	ldw	r2,0(r2)
    924c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9250:	e0fffe17 	ldw	r3,-8(fp)
    9254:	e0bffc17 	ldw	r2,-16(fp)
    9258:	10fff01e 	bne	r2,r3,921c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    925c:	e03fff15 	stw	zero,-4(fp)
    9260:	e0bfff17 	ldw	r2,-4(fp)
}
    9264:	e037883a 	mov	sp,fp
    9268:	dfc00117 	ldw	ra,4(sp)
    926c:	df000017 	ldw	fp,0(sp)
    9270:	dec00204 	addi	sp,sp,8
    9274:	f800283a 	ret

00009278 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    9278:	defffa04 	addi	sp,sp,-24
    927c:	dfc00515 	stw	ra,20(sp)
    9280:	df000415 	stw	fp,16(sp)
    9284:	df000404 	addi	fp,sp,16
    9288:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    928c:	00800074 	movhi	r2,1
    9290:	10a6dc04 	addi	r2,r2,-25744
    9294:	10800017 	ldw	r2,0(r2)
    9298:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    929c:	00003306 	br	936c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    92a0:	e0bffd17 	ldw	r2,-12(fp)
    92a4:	11000217 	ldw	r4,8(r2)
    92a8:	00094d80 	call	94d8 <strlen>
    92ac:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    92b0:	e0bffd17 	ldw	r2,-12(fp)
    92b4:	10c00217 	ldw	r3,8(r2)
    92b8:	e0bffc17 	ldw	r2,-16(fp)
    92bc:	1885883a 	add	r2,r3,r2
    92c0:	10bfffc4 	addi	r2,r2,-1
    92c4:	10800003 	ldbu	r2,0(r2)
    92c8:	10803fcc 	andi	r2,r2,255
    92cc:	1080201c 	xori	r2,r2,128
    92d0:	10bfe004 	addi	r2,r2,-128
    92d4:	10800bd8 	cmpnei	r2,r2,47
    92d8:	1000031e 	bne	r2,zero,92e8 <alt_find_file+0x70>
    {
      len -= 1;
    92dc:	e0bffc17 	ldw	r2,-16(fp)
    92e0:	10bfffc4 	addi	r2,r2,-1
    92e4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    92e8:	e0bffc17 	ldw	r2,-16(fp)
    92ec:	1007883a 	mov	r3,r2
    92f0:	e0bffe17 	ldw	r2,-8(fp)
    92f4:	1885883a 	add	r2,r3,r2
    92f8:	10800003 	ldbu	r2,0(r2)
    92fc:	10803fcc 	andi	r2,r2,255
    9300:	1080201c 	xori	r2,r2,128
    9304:	10bfe004 	addi	r2,r2,-128
    9308:	10800be0 	cmpeqi	r2,r2,47
    930c:	10000a1e 	bne	r2,zero,9338 <alt_find_file+0xc0>
    9310:	e0bffc17 	ldw	r2,-16(fp)
    9314:	1007883a 	mov	r3,r2
    9318:	e0bffe17 	ldw	r2,-8(fp)
    931c:	1885883a 	add	r2,r3,r2
    9320:	10800003 	ldbu	r2,0(r2)
    9324:	10803fcc 	andi	r2,r2,255
    9328:	1080201c 	xori	r2,r2,128
    932c:	10bfe004 	addi	r2,r2,-128
    9330:	1004c03a 	cmpne	r2,r2,zero
    9334:	10000a1e 	bne	r2,zero,9360 <alt_find_file+0xe8>
    9338:	e0bffd17 	ldw	r2,-12(fp)
    933c:	11000217 	ldw	r4,8(r2)
    9340:	e1bffc17 	ldw	r6,-16(fp)
    9344:	e17ffe17 	ldw	r5,-8(fp)
    9348:	000949c0 	call	949c <memcmp>
    934c:	1004c03a 	cmpne	r2,r2,zero
    9350:	1000031e 	bne	r2,zero,9360 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    9354:	e0bffd17 	ldw	r2,-12(fp)
    9358:	e0bfff15 	stw	r2,-4(fp)
    935c:	00000806 	br	9380 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    9360:	e0bffd17 	ldw	r2,-12(fp)
    9364:	10800017 	ldw	r2,0(r2)
    9368:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    936c:	00c00074 	movhi	r3,1
    9370:	18e6dc04 	addi	r3,r3,-25744
    9374:	e0bffd17 	ldw	r2,-12(fp)
    9378:	10ffc91e 	bne	r2,r3,92a0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    937c:	e03fff15 	stw	zero,-4(fp)
    9380:	e0bfff17 	ldw	r2,-4(fp)
}
    9384:	e037883a 	mov	sp,fp
    9388:	dfc00117 	ldw	ra,4(sp)
    938c:	df000017 	ldw	fp,0(sp)
    9390:	dec00204 	addi	sp,sp,8
    9394:	f800283a 	ret

00009398 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    9398:	defffa04 	addi	sp,sp,-24
    939c:	dfc00515 	stw	ra,20(sp)
    93a0:	df000415 	stw	fp,16(sp)
    93a4:	dc000315 	stw	r16,12(sp)
    93a8:	df000304 	addi	fp,sp,12
    93ac:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    93b0:	00bffa04 	movi	r2,-24
    93b4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    93b8:	e03ffe15 	stw	zero,-8(fp)
    93bc:	00002006 	br	9440 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    93c0:	e13ffe17 	ldw	r4,-8(fp)
    93c4:	04000074 	movhi	r16,1
    93c8:	84264404 	addi	r16,r16,-26352
    93cc:	01400304 	movi	r5,12
    93d0:	00084f40 	call	84f4 <__mulsi3>
    93d4:	1405883a 	add	r2,r2,r16
    93d8:	10800017 	ldw	r2,0(r2)
    93dc:	1004c03a 	cmpne	r2,r2,zero
    93e0:	1000141e 	bne	r2,zero,9434 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    93e4:	e13ffe17 	ldw	r4,-8(fp)
    93e8:	04000074 	movhi	r16,1
    93ec:	84264404 	addi	r16,r16,-26352
    93f0:	01400304 	movi	r5,12
    93f4:	00084f40 	call	84f4 <__mulsi3>
    93f8:	1407883a 	add	r3,r2,r16
    93fc:	e0bfff17 	ldw	r2,-4(fp)
    9400:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    9404:	00800074 	movhi	r2,1
    9408:	10a6e004 	addi	r2,r2,-25728
    940c:	10c00017 	ldw	r3,0(r2)
    9410:	e0bffe17 	ldw	r2,-8(fp)
    9414:	1880040e 	bge	r3,r2,9428 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    9418:	00c00074 	movhi	r3,1
    941c:	18e6e004 	addi	r3,r3,-25728
    9420:	e0bffe17 	ldw	r2,-8(fp)
    9424:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    9428:	e0bffe17 	ldw	r2,-8(fp)
    942c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    9430:	00000606 	br	944c <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    9434:	e0bffe17 	ldw	r2,-8(fp)
    9438:	10800044 	addi	r2,r2,1
    943c:	e0bffe15 	stw	r2,-8(fp)
    9440:	e0bffe17 	ldw	r2,-8(fp)
    9444:	10800810 	cmplti	r2,r2,32
    9448:	103fdd1e 	bne	r2,zero,93c0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    944c:	e0bffd17 	ldw	r2,-12(fp)
}
    9450:	e037883a 	mov	sp,fp
    9454:	dfc00217 	ldw	ra,8(sp)
    9458:	df000117 	ldw	fp,4(sp)
    945c:	dc000017 	ldw	r16,0(sp)
    9460:	dec00304 	addi	sp,sp,12
    9464:	f800283a 	ret

00009468 <atexit>:
    9468:	200b883a 	mov	r5,r4
    946c:	000d883a 	mov	r6,zero
    9470:	0009883a 	mov	r4,zero
    9474:	000f883a 	mov	r7,zero
    9478:	00094f81 	jmpi	94f8 <__register_exitproc>

0000947c <exit>:
    947c:	defffe04 	addi	sp,sp,-8
    9480:	dc400015 	stw	r17,0(sp)
    9484:	000b883a 	mov	r5,zero
    9488:	2023883a 	mov	r17,r4
    948c:	dfc00115 	stw	ra,4(sp)
    9490:	00096680 	call	9668 <__call_exitprocs>
    9494:	8809883a 	mov	r4,r17
    9498:	00098640 	call	9864 <_exit>

0000949c <memcmp>:
    949c:	31ffffc4 	addi	r7,r6,-1
    94a0:	3000061e 	bne	r6,zero,94bc <memcmp+0x20>
    94a4:	00000a06 	br	94d0 <memcmp+0x34>
    94a8:	39ffffc4 	addi	r7,r7,-1
    94ac:	00bfffc4 	movi	r2,-1
    94b0:	21000044 	addi	r4,r4,1
    94b4:	29400044 	addi	r5,r5,1
    94b8:	38800526 	beq	r7,r2,94d0 <memcmp+0x34>
    94bc:	20c00003 	ldbu	r3,0(r4)
    94c0:	28800003 	ldbu	r2,0(r5)
    94c4:	18bff826 	beq	r3,r2,94a8 <memcmp+0xc>
    94c8:	1885c83a 	sub	r2,r3,r2
    94cc:	f800283a 	ret
    94d0:	0005883a 	mov	r2,zero
    94d4:	f800283a 	ret

000094d8 <strlen>:
    94d8:	20800007 	ldb	r2,0(r4)
    94dc:	10000526 	beq	r2,zero,94f4 <strlen+0x1c>
    94e0:	2007883a 	mov	r3,r4
    94e4:	18c00044 	addi	r3,r3,1
    94e8:	18800007 	ldb	r2,0(r3)
    94ec:	103ffd1e 	bne	r2,zero,94e4 <strlen+0xc>
    94f0:	1905c83a 	sub	r2,r3,r4
    94f4:	f800283a 	ret

000094f8 <__register_exitproc>:
    94f8:	defff904 	addi	sp,sp,-28
    94fc:	00800074 	movhi	r2,1
    9500:	10a6e304 	addi	r2,r2,-25716
    9504:	dc400115 	stw	r17,4(sp)
    9508:	14400017 	ldw	r17,0(r2)
    950c:	dc000015 	stw	r16,0(sp)
    9510:	dd400515 	stw	r21,20(sp)
    9514:	8c000c17 	ldw	r16,48(r17)
    9518:	dd000415 	stw	r20,16(sp)
    951c:	dcc00315 	stw	r19,12(sp)
    9520:	dc800215 	stw	r18,8(sp)
    9524:	dfc00615 	stw	ra,24(sp)
    9528:	2025883a 	mov	r18,r4
    952c:	282b883a 	mov	r21,r5
    9530:	3029883a 	mov	r20,r6
    9534:	3827883a 	mov	r19,r7
    9538:	80002626 	beq	r16,zero,95d4 <__register_exitproc+0xdc>
    953c:	81400117 	ldw	r5,4(r16)
    9540:	008007c4 	movi	r2,31
    9544:	11403716 	blt	r2,r5,9624 <__register_exitproc+0x12c>
    9548:	90002026 	beq	r18,zero,95cc <__register_exitproc+0xd4>
    954c:	81802217 	ldw	r6,136(r16)
    9550:	30002926 	beq	r6,zero,95f8 <__register_exitproc+0x100>
    9554:	81400117 	ldw	r5,4(r16)
    9558:	00c00044 	movi	r3,1
    955c:	31004017 	ldw	r4,256(r6)
    9560:	1946983a 	sll	r3,r3,r5
    9564:	2945883a 	add	r2,r5,r5
    9568:	1085883a 	add	r2,r2,r2
    956c:	1185883a 	add	r2,r2,r6
    9570:	20c8b03a 	or	r4,r4,r3
    9574:	14c02015 	stw	r19,128(r2)
    9578:	15000015 	stw	r20,0(r2)
    957c:	00800084 	movi	r2,2
    9580:	31004015 	stw	r4,256(r6)
    9584:	90801826 	beq	r18,r2,95e8 <__register_exitproc+0xf0>
    9588:	2945883a 	add	r2,r5,r5
    958c:	1085883a 	add	r2,r2,r2
    9590:	1405883a 	add	r2,r2,r16
    9594:	28c00044 	addi	r3,r5,1
    9598:	0009883a 	mov	r4,zero
    959c:	15400215 	stw	r21,8(r2)
    95a0:	80c00115 	stw	r3,4(r16)
    95a4:	2005883a 	mov	r2,r4
    95a8:	dfc00617 	ldw	ra,24(sp)
    95ac:	dd400517 	ldw	r21,20(sp)
    95b0:	dd000417 	ldw	r20,16(sp)
    95b4:	dcc00317 	ldw	r19,12(sp)
    95b8:	dc800217 	ldw	r18,8(sp)
    95bc:	dc400117 	ldw	r17,4(sp)
    95c0:	dc000017 	ldw	r16,0(sp)
    95c4:	dec00704 	addi	sp,sp,28
    95c8:	f800283a 	ret
    95cc:	81400117 	ldw	r5,4(r16)
    95d0:	003fed06 	br	9588 <__register_exitproc+0x90>
    95d4:	00800074 	movhi	r2,1
    95d8:	10a79d04 	addi	r2,r2,-24972
    95dc:	1021883a 	mov	r16,r2
    95e0:	88800c15 	stw	r2,48(r17)
    95e4:	003fd506 	br	953c <__register_exitproc+0x44>
    95e8:	30804117 	ldw	r2,260(r6)
    95ec:	10c4b03a 	or	r2,r2,r3
    95f0:	30804115 	stw	r2,260(r6)
    95f4:	003fe406 	br	9588 <__register_exitproc+0x90>
    95f8:	00800034 	movhi	r2,0
    95fc:	10800004 	addi	r2,r2,0
    9600:	10000b26 	beq	r2,zero,9630 <__register_exitproc+0x138>
    9604:	01004204 	movi	r4,264
    9608:	103ee83a 	callr	r2
    960c:	10000826 	beq	r2,zero,9630 <__register_exitproc+0x138>
    9610:	100d883a 	mov	r6,r2
    9614:	10004015 	stw	zero,256(r2)
    9618:	10004115 	stw	zero,260(r2)
    961c:	80802215 	stw	r2,136(r16)
    9620:	003fcc06 	br	9554 <__register_exitproc+0x5c>
    9624:	00800034 	movhi	r2,0
    9628:	10800004 	addi	r2,r2,0
    962c:	1000021e 	bne	r2,zero,9638 <__register_exitproc+0x140>
    9630:	013fffc4 	movi	r4,-1
    9634:	003fdb06 	br	95a4 <__register_exitproc+0xac>
    9638:	01002304 	movi	r4,140
    963c:	103ee83a 	callr	r2
    9640:	1007883a 	mov	r3,r2
    9644:	103ffa26 	beq	r2,zero,9630 <__register_exitproc+0x138>
    9648:	88800c17 	ldw	r2,48(r17)
    964c:	1821883a 	mov	r16,r3
    9650:	18000115 	stw	zero,4(r3)
    9654:	18800015 	stw	r2,0(r3)
    9658:	88c00c15 	stw	r3,48(r17)
    965c:	903fdb26 	beq	r18,zero,95cc <__register_exitproc+0xd4>
    9660:	003fba06 	br	954c <__register_exitproc+0x54>

00009664 <register_fini>:
    9664:	f800283a 	ret

00009668 <__call_exitprocs>:
    9668:	defff304 	addi	sp,sp,-52
    966c:	00800074 	movhi	r2,1
    9670:	10a6e304 	addi	r2,r2,-25716
    9674:	df000b15 	stw	fp,44(sp)
    9678:	17000017 	ldw	fp,0(r2)
    967c:	00800034 	movhi	r2,0
    9680:	10800004 	addi	r2,r2,0
    9684:	1005003a 	cmpeq	r2,r2,zero
    9688:	d8800215 	stw	r2,8(sp)
    968c:	e0800c04 	addi	r2,fp,48
    9690:	dd800915 	stw	r22,36(sp)
    9694:	dd400815 	stw	r21,32(sp)
    9698:	dfc00c15 	stw	ra,48(sp)
    969c:	ddc00a15 	stw	r23,40(sp)
    96a0:	dd000715 	stw	r20,28(sp)
    96a4:	dcc00615 	stw	r19,24(sp)
    96a8:	dc800515 	stw	r18,20(sp)
    96ac:	dc400415 	stw	r17,16(sp)
    96b0:	dc000315 	stw	r16,12(sp)
    96b4:	282d883a 	mov	r22,r5
    96b8:	d9000115 	stw	r4,4(sp)
    96bc:	d8800015 	stw	r2,0(sp)
    96c0:	282b003a 	cmpeq	r21,r5,zero
    96c4:	e4400c17 	ldw	r17,48(fp)
    96c8:	88001226 	beq	r17,zero,9714 <__call_exitprocs+0xac>
    96cc:	ddc00017 	ldw	r23,0(sp)
    96d0:	88800117 	ldw	r2,4(r17)
    96d4:	8c802217 	ldw	r18,136(r17)
    96d8:	143fffc4 	addi	r16,r2,-1
    96dc:	80000b16 	blt	r16,zero,970c <__call_exitprocs+0xa4>
    96e0:	9027003a 	cmpeq	r19,r18,zero
    96e4:	a800171e 	bne	r21,zero,9744 <__call_exitprocs+0xdc>
    96e8:	9800051e 	bne	r19,zero,9700 <__call_exitprocs+0x98>
    96ec:	8409883a 	add	r4,r16,r16
    96f0:	2105883a 	add	r2,r4,r4
    96f4:	1485883a 	add	r2,r2,r18
    96f8:	10c02017 	ldw	r3,128(r2)
    96fc:	b0c01226 	beq	r22,r3,9748 <__call_exitprocs+0xe0>
    9700:	843fffc4 	addi	r16,r16,-1
    9704:	00bfffc4 	movi	r2,-1
    9708:	80bff61e 	bne	r16,r2,96e4 <__call_exitprocs+0x7c>
    970c:	d8800217 	ldw	r2,8(sp)
    9710:	10003226 	beq	r2,zero,97dc <__call_exitprocs+0x174>
    9714:	dfc00c17 	ldw	ra,48(sp)
    9718:	df000b17 	ldw	fp,44(sp)
    971c:	ddc00a17 	ldw	r23,40(sp)
    9720:	dd800917 	ldw	r22,36(sp)
    9724:	dd400817 	ldw	r21,32(sp)
    9728:	dd000717 	ldw	r20,28(sp)
    972c:	dcc00617 	ldw	r19,24(sp)
    9730:	dc800517 	ldw	r18,20(sp)
    9734:	dc400417 	ldw	r17,16(sp)
    9738:	dc000317 	ldw	r16,12(sp)
    973c:	dec00d04 	addi	sp,sp,52
    9740:	f800283a 	ret
    9744:	8409883a 	add	r4,r16,r16
    9748:	88c00117 	ldw	r3,4(r17)
    974c:	2105883a 	add	r2,r4,r4
    9750:	1445883a 	add	r2,r2,r17
    9754:	18ffffc4 	addi	r3,r3,-1
    9758:	11800217 	ldw	r6,8(r2)
    975c:	1c001826 	beq	r3,r16,97c0 <__call_exitprocs+0x158>
    9760:	10000215 	stw	zero,8(r2)
    9764:	303fe626 	beq	r6,zero,9700 <__call_exitprocs+0x98>
    9768:	8d000117 	ldw	r20,4(r17)
    976c:	9800121e 	bne	r19,zero,97b8 <__call_exitprocs+0x150>
    9770:	00c00044 	movi	r3,1
    9774:	1c06983a 	sll	r3,r3,r16
    9778:	90804017 	ldw	r2,256(r18)
    977c:	1884703a 	and	r2,r3,r2
    9780:	10000d26 	beq	r2,zero,97b8 <__call_exitprocs+0x150>
    9784:	90804117 	ldw	r2,260(r18)
    9788:	1884703a 	and	r2,r3,r2
    978c:	10000e1e 	bne	r2,zero,97c8 <__call_exitprocs+0x160>
    9790:	2105883a 	add	r2,r4,r4
    9794:	1485883a 	add	r2,r2,r18
    9798:	11400017 	ldw	r5,0(r2)
    979c:	d9000117 	ldw	r4,4(sp)
    97a0:	303ee83a 	callr	r6
    97a4:	88800117 	ldw	r2,4(r17)
    97a8:	a0bfc61e 	bne	r20,r2,96c4 <__call_exitprocs+0x5c>
    97ac:	b8800017 	ldw	r2,0(r23)
    97b0:	147fd326 	beq	r2,r17,9700 <__call_exitprocs+0x98>
    97b4:	003fc306 	br	96c4 <__call_exitprocs+0x5c>
    97b8:	303ee83a 	callr	r6
    97bc:	003ff906 	br	97a4 <__call_exitprocs+0x13c>
    97c0:	8c000115 	stw	r16,4(r17)
    97c4:	003fe706 	br	9764 <__call_exitprocs+0xfc>
    97c8:	2105883a 	add	r2,r4,r4
    97cc:	1485883a 	add	r2,r2,r18
    97d0:	11000017 	ldw	r4,0(r2)
    97d4:	303ee83a 	callr	r6
    97d8:	003ff206 	br	97a4 <__call_exitprocs+0x13c>
    97dc:	88800117 	ldw	r2,4(r17)
    97e0:	10000b1e 	bne	r2,zero,9810 <__call_exitprocs+0x1a8>
    97e4:	89000017 	ldw	r4,0(r17)
    97e8:	20000a26 	beq	r4,zero,9814 <__call_exitprocs+0x1ac>
    97ec:	b9000015 	stw	r4,0(r23)
    97f0:	90000226 	beq	r18,zero,97fc <__call_exitprocs+0x194>
    97f4:	9009883a 	mov	r4,r18
    97f8:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    97fc:	8809883a 	mov	r4,r17
    9800:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    9804:	bc400017 	ldw	r17,0(r23)
    9808:	883fb11e 	bne	r17,zero,96d0 <__call_exitprocs+0x68>
    980c:	003fc106 	br	9714 <__call_exitprocs+0xac>
    9810:	89000017 	ldw	r4,0(r17)
    9814:	882f883a 	mov	r23,r17
    9818:	2023883a 	mov	r17,r4
    981c:	883fac1e 	bne	r17,zero,96d0 <__call_exitprocs+0x68>
    9820:	003fbc06 	br	9714 <__call_exitprocs+0xac>

00009824 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    9824:	defffd04 	addi	sp,sp,-12
    9828:	df000215 	stw	fp,8(sp)
    982c:	df000204 	addi	fp,sp,8
    9830:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    9834:	e0bfff17 	ldw	r2,-4(fp)
    9838:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    983c:	e0bffe17 	ldw	r2,-8(fp)
    9840:	1005003a 	cmpeq	r2,r2,zero
    9844:	1000021e 	bne	r2,zero,9850 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    9848:	002af070 	cmpltui	zero,zero,43969
    984c:	00000106 	br	9854 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    9850:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    9854:	e037883a 	mov	sp,fp
    9858:	df000017 	ldw	fp,0(sp)
    985c:	dec00104 	addi	sp,sp,4
    9860:	f800283a 	ret

00009864 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    9864:	defffd04 	addi	sp,sp,-12
    9868:	dfc00215 	stw	ra,8(sp)
    986c:	df000115 	stw	fp,4(sp)
    9870:	df000104 	addi	fp,sp,4
    9874:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    9878:	e13fff17 	ldw	r4,-4(fp)
    987c:	00098240 	call	9824 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    9880:	003fff06 	br	9880 <_exit+0x1c>
    9884:	00009664 	muli	zero,zero,601
