module Sorting_IP #(
    parameter DATA_WIDTH = 32,
    parameter ADDRESS_WIDTH = 4
)(
    input  wire                       clk,
    input  wire                       reset_n,
    input  wire [ADDRESS_WIDTH-1:0]   avalon_address,
    input  wire                       avalon_write,
    input  wire                       avalon_read,
    input  wire [DATA_WIDTH-1:0]      avalon_writedata,
    output reg  [DATA_WIDTH-1:0]      avalon_readdata,
    output reg                        avalon_waitrequest
);

    reg [3:0] data [0:4]; // Lưu 5 giá trị 4-bit
    reg [3:0] sorted_data [0:4]; // Lưu dãy đã sắp xếp
    reg [DATA_WIDTH-1:0] status_reg; // Đăng ký trạng thái

    // Đọc/ghi dữ liệu
    always @(posedge clk or negedge reset_n) begin
        if (!reset_n) begin
            avalon_waitrequest <= 0;
            status_reg <= 0;
        end else begin
            avalon_waitrequest <= 0;
            if (avalon_write) begin
                case (avalon_address)
                    0: data[0] <= avalon_writedata[3:0];
                    1: data[1] <= avalon_writedata[3:0];
                    2: data[2] <= avalon_writedata[3:0];
                    3: data[3] <= avalon_writedata[3:0];
                    4: data[4] <= avalon_writedata[3:0];
                    5: begin // Địa chỉ 5: kích hoạt sắp xếp
                        status_reg <= 1; // Bắt đầu sắp xếp
                        // Thuật toán sắp xếp nổi bọt đơn giản
                        sorted_data[0] <= data[0];
                        sorted_data[1] <= data[1];
                        sorted_data[2] <= data[2];
                        sorted_data[3] <= data[3];
                        sorted_data[4] <= data[4];
                        // Sắp xếp
                        begin
                            integer i, j;
                            reg [3:0] temp;
                            for (i = 0; i < 4; i = i + 1) begin
                                for (j = 0; j < 4 - i; j = j + 1) begin
                                    if (sorted_data[j] > sorted_data[j+1]) begin
                                        temp = sorted_data[j];
                                        sorted_data[j] = sorted_data[j+1];
                                        sorted_data[j+1] = temp;
                                    end
                                end
                            end
                        end
                        status_reg <= 2; // Hoàn tất sắp xếp
                    end
                endcase
            end
            if (avalon_read) begin
                case (avalon_address)
                    0: avalon_readdata <= {28'b0, sorted_data[0]};
                    1: avalon_readdata <= {28'b0, sorted_data[1]};
                    2: avalon_readdata <= {28'b0, sorted_data[2]};
                    3: avalon_readdata <= {28'b0, sorted_data[3]};
                    4: avalon_readdata <= {28'b0, sorted_data[4]};
                    5: avalon_readdata <= status_reg;
                    default: avalon_readdata <= 0;
                endcase
            end
        end
    end

endmodule