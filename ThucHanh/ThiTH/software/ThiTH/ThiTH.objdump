
ThiTH.elf:     file format elf32-littlenios2
ThiTH.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00002ef4 memsz 0x00002ef4 flags r-x
    LOAD off    0x00003f14 vaddr 0x0000af14 paddr 0x0000b1e8 align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x000044bc vaddr 0x0000b4bc paddr 0x0000b4bc align 2**12
         filesz 0x00000000 memsz 0x0000009c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00002ce0  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  0000ad00  0000ad00  00003d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000002d4  0000af14  0000b1e8  00003f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000009c  0000b4bc  0000b4bc  000044bc  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  000041e8  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000548  00000000  00000000  00004210  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000007c3  00000000  00000000  00004758  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000a2f2  00000000  00000000  00004f1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000025e6  00000000  00000000  0000f20d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00006e84  00000000  00000000  000117f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000009d8  00000000  00000000  00018678  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000ed1  00000000  00000000  00019050  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001aff  00000000  00000000  00019f21  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000040  00000000  00000000  0001ba20  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000190  00000000  00000000  0001ba60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0001d537  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  0001d53a  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0001d546  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0001d547  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  0001d548  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  0001d553  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  0001d55e  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000006  00000000  00000000  0001d569  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000017  00000000  00000000  0001d56f  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     0005c238  00000000  00000000  0001d586  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .text	00000000 .text
0000ad00 l    d  .rodata	00000000 .rodata
0000af14 l    d  .rwdata	00000000 .rwdata
0000b4bc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 source.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00008ba4 l     F .text	00000080 print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 fvwrite_small_str.c
00000000 l    df *ABS*	00000000 impure.c
0000af14 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00009530 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00009734 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00009960 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000aff4 l     O .rwdata	0000002c jtag_uart_0
00009a24 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00009f10 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009f8c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000a06c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000a1b0 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000a300 l     F .text	000000f8 alt_file_locked
0000a584 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000aadc l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000ac9c l     F .text	00000040 alt_sim_halt
000097a0 g     F .text	0000006c alt_main
000089ec g     F .text	00000090 _puts_r
0000b1e8 g       *ABS*	00000000 __flash_rwdata_start
00008954 g     F .text	00000054 printf
00009458 g     F .text	00000060 memmove
00000000  w      *UND*	00000000 __errno
000093a0 g     F .text	000000b8 __sfvwrite_small_str
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000b4bc g     O .bss	00000004 errno
0000b4c4 g     O .bss	00000004 alt_argv
000131c8 g       *ABS*	00000000 _gp
0000980c g     F .text	00000030 usleep
0000b048 g     O .rwdata	00000180 alt_fd_list
0000a67c g     F .text	00000094 alt_find_dev
0000840c g     F .text	0000003c wait_for_input
0000a288 g     F .text	00000078 alt_io_redirect
0000ad00 g       *ABS*	00000000 __DTOR_END__
00008a7c g     F .text	00000014 puts
00009b0c g     F .text	00000104 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000089a8 g     F .text	00000044 _printf_r
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000966c g     F .text	00000008 __udivsi3
0000b1e0 g     O .rwdata	00000004 alt_max_fd
0000b1cc g     O .rwdata	00000004 _global_impure_ptr
0000b558 g       *ABS*	00000000 __bss_end
0000836c g     F .text	00000034 lcd_clear
00008308 g     F .text	00000064 lcd_write_string
0000b020 g     O .rwdata	00000028 alt_dev_null
00009f70 g     F .text	0000001c alt_dcache_flush_all
0000b1e8 g       *ABS*	00000000 __ram_rwdata_end
0000b1d8 g     O .rwdata	00000008 alt_dev_list
0000983c g     F .text	00000124 write
0000af14 g       *ABS*	00000000 __ram_rodata_end
00009674 g     F .text	00000008 __umodsi3
0000b558 g       *ABS*	00000000 end
0000acfc g       *ABS*	00000000 __CTOR_LIST__
00010000 g       *ABS*	00000000 __alt_stack_pointer
00009c10 g     F .text	000000a4 altera_avalon_jtag_uart_write
00008c24 g     F .text	0000069c ___vfprintf_internal_r
00008b14 g     F .text	00000070 _sprintf_r
0000aae0 g     F .text	000001bc __call_exitprocs
00008020 g     F .text	0000003c _start
0000819c g     F .text	000000b4 lcd_write_cmd
000099f4 g     F .text	00000030 alt_sys_init
0000a970 g     F .text	0000016c __register_exitproc
0000967c g     F .text	00000038 __mulsi3
0000af14 g       *ABS*	00000000 __ram_rwdata_start
0000ad00 g       *ABS*	00000000 __ram_rodata_start
00009a5c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000a830 g     F .text	000000d0 alt_get_fd
00009cb4 g     F .text	0000015c alt_busy_sleep
0000a934 g     F .text	0000003c memcmp
0000b558 g       *ABS*	00000000 __alt_stack_base
0000a710 g     F .text	00000120 alt_find_file
00009fb8 g     F .text	000000b4 alt_dev_llist_insert
000092e4 g     F .text	000000bc __sfvwrite_small_dev
0000b4bc g       *ABS*	00000000 __bss_start
0000805c g     F .text	00000140 lcd_init
000084cc g     F .text	00000488 main
0000b4c8 g     O .bss	00000004 alt_envp
00009ab4 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0000b4cc g     O .bss	0000008c _atexit0
0000b1e4 g     O .rwdata	00000004 alt_errno
000095ac g     F .text	00000060 __divsi3
0000ad00 g       *ABS*	00000000 __CTOR_END__
0000ad00 g       *ABS*	00000000 __flash_rodata_start
0000ad00 g       *ABS*	00000000 __DTOR_LIST__
000099c0 g     F .text	00000034 alt_irq_init
0000a5e4 g     F .text	00000078 alt_release_fd
00008a90 g     F .text	00000084 sprintf
000083a0 g     F .text	0000006c lcd_set_cursor
0000a900 g     F .text	00000014 atexit
000094b8 g     F .text	00000078 _write_r
00008250 g     F .text	000000b8 lcd_write_data
0000b1c8 g     O .rwdata	00000004 _impure_ptr
0000b4c0 g     O .bss	00000004 alt_argc
0000a130 g     F .text	00000064 _do_dtors
0000b1d0 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000b1e8 g       *ABS*	00000000 _edata
0000b558 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
0000a65c g     F .text	00000020 altera_nios2_qsys_irq_init
0000a914 g     F .text	00000020 exit
0000960c g     F .text	00000060 __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
0000acdc g     F .text	00000020 _exit
00008b84 g     F .text	00000020 strlen
0000a3f8 g     F .text	0000018c open
0000a194 g     F .text	0000001c alt_icache_flush_all
000092c0 g     F .text	00000024 __vfprintf_internal
0000a0cc g     F .text	00000064 _do_ctors
00009e10 g     F .text	00000100 close
000096b4 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
00008448 g     F .text	00000084 read_switch_value



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00008020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d68c7214 	ori	gp,gp,12744
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10ad2f14 	ori	r2,r2,46268

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18ed5614 	ori	r3,r3,46424

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	00096b40 	call	96b4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00097a00 	call	97a0 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <alt_after_alt_main>

0000805c <lcd_init>:
void lcd_write_data(alt_u8 data);
void lcd_write_string(const char *str);
void lcd_clear();
void lcd_set_cursor(alt_u8 row, alt_u8 col);

void lcd_init() {
    805c:	defffe04 	addi	sp,sp,-8
    8060:	dfc00115 	stw	ra,4(sp)
    8064:	df000015 	stw	fp,0(sp)
    8068:	d839883a 	mov	fp,sp
    IOWR_ALTERA_AVALON_PIO_DATA(LCD_ON_BASE, 1);
    806c:	00c00074 	movhi	r3,1
    8070:	18c45c04 	addi	r3,r3,4464
    8074:	00800044 	movi	r2,1
    8078:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_AVALON_PIO_DATA(LCD_BLON_BASE, 1);
    807c:	00c00074 	movhi	r3,1
    8080:	18c45804 	addi	r3,r3,4448
    8084:	00800044 	movi	r2,1
    8088:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_AVALON_PIO_DATA(LCD_RW_BASE, 0);
    808c:	00800074 	movhi	r2,1
    8090:	10845004 	addi	r2,r2,4416
    8094:	10000035 	stwio	zero,0(r2)

    usleep(15000);
    8098:	010ea604 	movi	r4,15000
    809c:	000980c0 	call	980c <usleep>
    IOWR_ALTERA_AVALON_PIO_DATA(LCD_RS_BASE, 0);
    80a0:	00800074 	movhi	r2,1
    80a4:	10844c04 	addi	r2,r2,4400
    80a8:	10000035 	stwio	zero,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, 0x03);
    80ac:	00c00074 	movhi	r3,1
    80b0:	18c44804 	addi	r3,r3,4384
    80b4:	008000c4 	movi	r2,3
    80b8:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_AVALON_PIO_DATA(LCD_EN_BASE, 1);
    80bc:	00c00074 	movhi	r3,1
    80c0:	18c45404 	addi	r3,r3,4432
    80c4:	00800044 	movi	r2,1
    80c8:	18800035 	stwio	r2,0(r3)
    usleep(100);
    80cc:	01001904 	movi	r4,100
    80d0:	000980c0 	call	980c <usleep>
    IOWR_ALTERA_AVALON_PIO_DATA(LCD_EN_BASE, 0);
    80d4:	00800074 	movhi	r2,1
    80d8:	10845404 	addi	r2,r2,4432
    80dc:	10000035 	stwio	zero,0(r2)
    usleep(5000);
    80e0:	0104e204 	movi	r4,5000
    80e4:	000980c0 	call	980c <usleep>

    IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, 0x03);
    80e8:	00c00074 	movhi	r3,1
    80ec:	18c44804 	addi	r3,r3,4384
    80f0:	008000c4 	movi	r2,3
    80f4:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_AVALON_PIO_DATA(LCD_EN_BASE, 1);
    80f8:	00c00074 	movhi	r3,1
    80fc:	18c45404 	addi	r3,r3,4432
    8100:	00800044 	movi	r2,1
    8104:	18800035 	stwio	r2,0(r3)
    usleep(100);
    8108:	01001904 	movi	r4,100
    810c:	000980c0 	call	980c <usleep>
    IOWR_ALTERA_AVALON_PIO_DATA(LCD_EN_BASE, 0);
    8110:	00800074 	movhi	r2,1
    8114:	10845404 	addi	r2,r2,4432
    8118:	10000035 	stwio	zero,0(r2)
    usleep(200);
    811c:	01003204 	movi	r4,200
    8120:	000980c0 	call	980c <usleep>

    IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, 0x02);
    8124:	00c00074 	movhi	r3,1
    8128:	18c44804 	addi	r3,r3,4384
    812c:	00800084 	movi	r2,2
    8130:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_AVALON_PIO_DATA(LCD_EN_BASE, 1);
    8134:	00c00074 	movhi	r3,1
    8138:	18c45404 	addi	r3,r3,4432
    813c:	00800044 	movi	r2,1
    8140:	18800035 	stwio	r2,0(r3)
    usleep(100);
    8144:	01001904 	movi	r4,100
    8148:	000980c0 	call	980c <usleep>
    IOWR_ALTERA_AVALON_PIO_DATA(LCD_EN_BASE, 0);
    814c:	00800074 	movhi	r2,1
    8150:	10845404 	addi	r2,r2,4432
    8154:	10000035 	stwio	zero,0(r2)
    usleep(100);
    8158:	01001904 	movi	r4,100
    815c:	000980c0 	call	980c <usleep>

    lcd_write_cmd(0x28); // 4-bit mode, 2 lines
    8160:	01000a04 	movi	r4,40
    8164:	000819c0 	call	819c <lcd_write_cmd>
    lcd_write_cmd(0x0C); // Display on, cursor off
    8168:	01000304 	movi	r4,12
    816c:	000819c0 	call	819c <lcd_write_cmd>
    lcd_write_cmd(0x06); // Entry mode
    8170:	01000184 	movi	r4,6
    8174:	000819c0 	call	819c <lcd_write_cmd>
    lcd_write_cmd(0x01); // Clear display
    8178:	01000044 	movi	r4,1
    817c:	000819c0 	call	819c <lcd_write_cmd>
    usleep(2000);
    8180:	0101f404 	movi	r4,2000
    8184:	000980c0 	call	980c <usleep>
}
    8188:	e037883a 	mov	sp,fp
    818c:	dfc00117 	ldw	ra,4(sp)
    8190:	df000017 	ldw	fp,0(sp)
    8194:	dec00204 	addi	sp,sp,8
    8198:	f800283a 	ret

0000819c <lcd_write_cmd>:

void lcd_write_cmd(alt_u8 cmd) {
    819c:	defffd04 	addi	sp,sp,-12
    81a0:	dfc00215 	stw	ra,8(sp)
    81a4:	df000115 	stw	fp,4(sp)
    81a8:	df000104 	addi	fp,sp,4
    81ac:	e13fff05 	stb	r4,-4(fp)
    IOWR_ALTERA_AVALON_PIO_DATA(LCD_RS_BASE, 0);
    81b0:	00800074 	movhi	r2,1
    81b4:	10844c04 	addi	r2,r2,4400
    81b8:	10000035 	stwio	zero,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, (cmd >> 4) & 0x0F);
    81bc:	e0bfff03 	ldbu	r2,-4(fp)
    81c0:	1004d13a 	srli	r2,r2,4
    81c4:	10803fcc 	andi	r2,r2,255
    81c8:	10c003cc 	andi	r3,r2,15
    81cc:	00800074 	movhi	r2,1
    81d0:	10844804 	addi	r2,r2,4384
    81d4:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(LCD_EN_BASE, 1);
    81d8:	00c00074 	movhi	r3,1
    81dc:	18c45404 	addi	r3,r3,4432
    81e0:	00800044 	movi	r2,1
    81e4:	18800035 	stwio	r2,0(r3)
    usleep(100);
    81e8:	01001904 	movi	r4,100
    81ec:	000980c0 	call	980c <usleep>
    IOWR_ALTERA_AVALON_PIO_DATA(LCD_EN_BASE, 0);
    81f0:	00800074 	movhi	r2,1
    81f4:	10845404 	addi	r2,r2,4432
    81f8:	10000035 	stwio	zero,0(r2)

    IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, cmd & 0x0F);
    81fc:	e0bfff03 	ldbu	r2,-4(fp)
    8200:	10c003cc 	andi	r3,r2,15
    8204:	00800074 	movhi	r2,1
    8208:	10844804 	addi	r2,r2,4384
    820c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(LCD_EN_BASE, 1);
    8210:	00c00074 	movhi	r3,1
    8214:	18c45404 	addi	r3,r3,4432
    8218:	00800044 	movi	r2,1
    821c:	18800035 	stwio	r2,0(r3)
    usleep(100);
    8220:	01001904 	movi	r4,100
    8224:	000980c0 	call	980c <usleep>
    IOWR_ALTERA_AVALON_PIO_DATA(LCD_EN_BASE, 0);
    8228:	00800074 	movhi	r2,1
    822c:	10845404 	addi	r2,r2,4432
    8230:	10000035 	stwio	zero,0(r2)
    usleep(100);
    8234:	01001904 	movi	r4,100
    8238:	000980c0 	call	980c <usleep>
}
    823c:	e037883a 	mov	sp,fp
    8240:	dfc00117 	ldw	ra,4(sp)
    8244:	df000017 	ldw	fp,0(sp)
    8248:	dec00204 	addi	sp,sp,8
    824c:	f800283a 	ret

00008250 <lcd_write_data>:

void lcd_write_data(alt_u8 data) {
    8250:	defffd04 	addi	sp,sp,-12
    8254:	dfc00215 	stw	ra,8(sp)
    8258:	df000115 	stw	fp,4(sp)
    825c:	df000104 	addi	fp,sp,4
    8260:	e13fff05 	stb	r4,-4(fp)
    IOWR_ALTERA_AVALON_PIO_DATA(LCD_RS_BASE, 1);
    8264:	00c00074 	movhi	r3,1
    8268:	18c44c04 	addi	r3,r3,4400
    826c:	00800044 	movi	r2,1
    8270:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, (data >> 4) & 0x0F);
    8274:	e0bfff03 	ldbu	r2,-4(fp)
    8278:	1004d13a 	srli	r2,r2,4
    827c:	10803fcc 	andi	r2,r2,255
    8280:	10c003cc 	andi	r3,r2,15
    8284:	00800074 	movhi	r2,1
    8288:	10844804 	addi	r2,r2,4384
    828c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(LCD_EN_BASE, 1);
    8290:	00c00074 	movhi	r3,1
    8294:	18c45404 	addi	r3,r3,4432
    8298:	00800044 	movi	r2,1
    829c:	18800035 	stwio	r2,0(r3)
    usleep(100);
    82a0:	01001904 	movi	r4,100
    82a4:	000980c0 	call	980c <usleep>
    IOWR_ALTERA_AVALON_PIO_DATA(LCD_EN_BASE, 0);
    82a8:	00800074 	movhi	r2,1
    82ac:	10845404 	addi	r2,r2,4432
    82b0:	10000035 	stwio	zero,0(r2)

    IOWR_ALTERA_AVALON_PIO_DATA(LCD_DATA_BASE, data & 0x0F);
    82b4:	e0bfff03 	ldbu	r2,-4(fp)
    82b8:	10c003cc 	andi	r3,r2,15
    82bc:	00800074 	movhi	r2,1
    82c0:	10844804 	addi	r2,r2,4384
    82c4:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(LCD_EN_BASE, 1);
    82c8:	00c00074 	movhi	r3,1
    82cc:	18c45404 	addi	r3,r3,4432
    82d0:	00800044 	movi	r2,1
    82d4:	18800035 	stwio	r2,0(r3)
    usleep(100);
    82d8:	01001904 	movi	r4,100
    82dc:	000980c0 	call	980c <usleep>
    IOWR_ALTERA_AVALON_PIO_DATA(LCD_EN_BASE, 0);
    82e0:	00800074 	movhi	r2,1
    82e4:	10845404 	addi	r2,r2,4432
    82e8:	10000035 	stwio	zero,0(r2)
    usleep(100);
    82ec:	01001904 	movi	r4,100
    82f0:	000980c0 	call	980c <usleep>
}
    82f4:	e037883a 	mov	sp,fp
    82f8:	dfc00117 	ldw	ra,4(sp)
    82fc:	df000017 	ldw	fp,0(sp)
    8300:	dec00204 	addi	sp,sp,8
    8304:	f800283a 	ret

00008308 <lcd_write_string>:

void lcd_write_string(const char *str) {
    8308:	defffd04 	addi	sp,sp,-12
    830c:	dfc00215 	stw	ra,8(sp)
    8310:	df000115 	stw	fp,4(sp)
    8314:	df000104 	addi	fp,sp,4
    8318:	e13fff15 	stw	r4,-4(fp)
    while (*str) {
    831c:	00000706 	br	833c <lcd_write_string+0x34>
        lcd_write_data(*str++);
    8320:	e0bfff17 	ldw	r2,-4(fp)
    8324:	10800003 	ldbu	r2,0(r2)
    8328:	11003fcc 	andi	r4,r2,255
    832c:	e0bfff17 	ldw	r2,-4(fp)
    8330:	10800044 	addi	r2,r2,1
    8334:	e0bfff15 	stw	r2,-4(fp)
    8338:	00082500 	call	8250 <lcd_write_data>
    IOWR_ALTERA_AVALON_PIO_DATA(LCD_EN_BASE, 0);
    usleep(100);
}

void lcd_write_string(const char *str) {
    while (*str) {
    833c:	e0bfff17 	ldw	r2,-4(fp)
    8340:	10800003 	ldbu	r2,0(r2)
    8344:	10803fcc 	andi	r2,r2,255
    8348:	1080201c 	xori	r2,r2,128
    834c:	10bfe004 	addi	r2,r2,-128
    8350:	1004c03a 	cmpne	r2,r2,zero
    8354:	103ff21e 	bne	r2,zero,8320 <lcd_write_string+0x18>
        lcd_write_data(*str++);
    }
}
    8358:	e037883a 	mov	sp,fp
    835c:	dfc00117 	ldw	ra,4(sp)
    8360:	df000017 	ldw	fp,0(sp)
    8364:	dec00204 	addi	sp,sp,8
    8368:	f800283a 	ret

0000836c <lcd_clear>:

void lcd_clear() {
    836c:	defffe04 	addi	sp,sp,-8
    8370:	dfc00115 	stw	ra,4(sp)
    8374:	df000015 	stw	fp,0(sp)
    8378:	d839883a 	mov	fp,sp
    lcd_write_cmd(0x01);
    837c:	01000044 	movi	r4,1
    8380:	000819c0 	call	819c <lcd_write_cmd>
    usleep(2000);
    8384:	0101f404 	movi	r4,2000
    8388:	000980c0 	call	980c <usleep>
}
    838c:	e037883a 	mov	sp,fp
    8390:	dfc00117 	ldw	ra,4(sp)
    8394:	df000017 	ldw	fp,0(sp)
    8398:	dec00204 	addi	sp,sp,8
    839c:	f800283a 	ret

000083a0 <lcd_set_cursor>:

void lcd_set_cursor(alt_u8 row, alt_u8 col) {
    83a0:	defffb04 	addi	sp,sp,-20
    83a4:	dfc00415 	stw	ra,16(sp)
    83a8:	df000315 	stw	fp,12(sp)
    83ac:	df000304 	addi	fp,sp,12
    83b0:	e13ffe05 	stb	r4,-8(fp)
    83b4:	e17fff05 	stb	r5,-4(fp)
    alt_u8 addr = (row == 0) ? 0x80 : 0xC0;
    83b8:	e0bffe03 	ldbu	r2,-8(fp)
    83bc:	1004c03a 	cmpne	r2,r2,zero
    83c0:	1000031e 	bne	r2,zero,83d0 <lcd_set_cursor+0x30>
    83c4:	00bfe004 	movi	r2,-128
    83c8:	e0bfff45 	stb	r2,-3(fp)
    83cc:	00000206 	br	83d8 <lcd_set_cursor+0x38>
    83d0:	00bff004 	movi	r2,-64
    83d4:	e0bfff45 	stb	r2,-3(fp)
    83d8:	e0bfff43 	ldbu	r2,-3(fp)
    83dc:	e0bffd05 	stb	r2,-12(fp)
    addr += col;
    83e0:	e0fffd03 	ldbu	r3,-12(fp)
    83e4:	e0bfff03 	ldbu	r2,-4(fp)
    83e8:	1885883a 	add	r2,r3,r2
    83ec:	e0bffd05 	stb	r2,-12(fp)
    lcd_write_cmd(addr);
    83f0:	e13ffd03 	ldbu	r4,-12(fp)
    83f4:	000819c0 	call	819c <lcd_write_cmd>
}
    83f8:	e037883a 	mov	sp,fp
    83fc:	dfc00117 	ldw	ra,4(sp)
    8400:	df000017 	ldw	fp,0(sp)
    8404:	dec00204 	addi	sp,sp,8
    8408:	f800283a 	ret

0000840c <wait_for_input>:

void wait_for_input() {
    840c:	defffe04 	addi	sp,sp,-8
    8410:	dfc00115 	stw	ra,4(sp)
    8414:	df000015 	stw	fp,0(sp)
    8418:	d839883a 	mov	fp,sp
    printf("Nhan Enter sau khi bat switch...\n");
    841c:	01000074 	movhi	r4,1
    8420:	212b4004 	addi	r4,r4,-21248
    8424:	0008a7c0 	call	8a7c <puts>
    usleep(2000000);
    8428:	010007f4 	movhi	r4,31
    842c:	21212004 	addi	r4,r4,-31616
    8430:	000980c0 	call	980c <usleep>
}
    8434:	e037883a 	mov	sp,fp
    8438:	dfc00117 	ldw	ra,4(sp)
    843c:	df000017 	ldw	fp,0(sp)
    8440:	dec00204 	addi	sp,sp,8
    8444:	f800283a 	ret

00008448 <read_switch_value>:

int read_switch_value() {
    8448:	defffb04 	addi	sp,sp,-20
    844c:	dfc00415 	stw	ra,16(sp)
    8450:	df000315 	stw	fp,12(sp)
    8454:	df000304 	addi	fp,sp,12
    alt_u32 switch_val;
    alt_u32 prev_val = 0;
    8458:	e03ffe15 	stw	zero,-8(fp)
    int stable_count = 0;
    845c:	e03ffd15 	stw	zero,-12(fp)

    while (stable_count < 10) {
    8460:	00001006 	br	84a4 <read_switch_value+0x5c>
        switch_val = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
    8464:	00800074 	movhi	r2,1
    8468:	10844004 	addi	r2,r2,4352
    846c:	10800037 	ldwio	r2,0(r2)
    8470:	e0bfff15 	stw	r2,-4(fp)
        if (switch_val == prev_val) {
    8474:	e0ffff17 	ldw	r3,-4(fp)
    8478:	e0bffe17 	ldw	r2,-8(fp)
    847c:	1880041e 	bne	r3,r2,8490 <read_switch_value+0x48>
            stable_count++;
    8480:	e0bffd17 	ldw	r2,-12(fp)
    8484:	10800044 	addi	r2,r2,1
    8488:	e0bffd15 	stw	r2,-12(fp)
    848c:	00000306 	br	849c <read_switch_value+0x54>
        } else {
            stable_count = 0;
    8490:	e03ffd15 	stw	zero,-12(fp)
            prev_val = switch_val;
    8494:	e0bfff17 	ldw	r2,-4(fp)
    8498:	e0bffe15 	stw	r2,-8(fp)
        }
        usleep(10000); // 10ms delay
    849c:	0109c404 	movi	r4,10000
    84a0:	000980c0 	call	980c <usleep>
int read_switch_value() {
    alt_u32 switch_val;
    alt_u32 prev_val = 0;
    int stable_count = 0;

    while (stable_count < 10) {
    84a4:	e0bffd17 	ldw	r2,-12(fp)
    84a8:	10800290 	cmplti	r2,r2,10
    84ac:	103fed1e 	bne	r2,zero,8464 <read_switch_value+0x1c>
            prev_val = switch_val;
        }
        usleep(10000); // 10ms delay
    }

    return switch_val & 0x0F;
    84b0:	e0bfff17 	ldw	r2,-4(fp)
    84b4:	108003cc 	andi	r2,r2,15
}
    84b8:	e037883a 	mov	sp,fp
    84bc:	dfc00117 	ldw	ra,4(sp)
    84c0:	df000017 	ldw	fp,0(sp)
    84c4:	dec00204 	addi	sp,sp,8
    84c8:	f800283a 	ret

000084cc <main>:

int main() {
    84cc:	deffe704 	addi	sp,sp,-100
    84d0:	dfc01815 	stw	ra,96(sp)
    84d4:	df001715 	stw	fp,92(sp)
    84d8:	dc001615 	stw	r16,88(sp)
    84dc:	df001604 	addi	fp,sp,88
    int data[5];
    int i;
    char buf[32];

    printf("Bat dau chuong trinh...\n");
    84e0:	01000074 	movhi	r4,1
    84e4:	212b4904 	addi	r4,r4,-21212
    84e8:	0008a7c0 	call	8a7c <puts>

    lcd_init();
    84ec:	000805c0 	call	805c <lcd_init>
    lcd_clear();
    84f0:	000836c0 	call	836c <lcd_clear>
    lcd_set_cursor(0, 0);
    84f4:	0009883a 	mov	r4,zero
    84f8:	000b883a 	mov	r5,zero
    84fc:	00083a00 	call	83a0 <lcd_set_cursor>
    lcd_write_string("Nhap 5 gia tri:");
    8500:	01000074 	movhi	r4,1
    8504:	212b4f04 	addi	r4,r4,-21188
    8508:	00083080 	call	8308 <lcd_write_string>

    printf("Bat dau nhap du lieu...\n");
    850c:	01000074 	movhi	r4,1
    8510:	212b5304 	addi	r4,r4,-21172
    8514:	0008a7c0 	call	8a7c <puts>

    for (i = 0; i < 5; i++) {
    8518:	e03ff215 	stw	zero,-56(fp)
    851c:	00005606 	br	8678 <main+0x1ac>
        lcd_clear();
    8520:	000836c0 	call	836c <lcd_clear>
        sprintf(buf, "Nhap GT %d:", i + 1);
    8524:	e0bff217 	ldw	r2,-56(fp)
    8528:	11800044 	addi	r6,r2,1
    852c:	e13ff804 	addi	r4,fp,-32
    8530:	01400074 	movhi	r5,1
    8534:	296b5904 	addi	r5,r5,-21148
    8538:	0008a900 	call	8a90 <sprintf>
        lcd_set_cursor(0, 0);
    853c:	0009883a 	mov	r4,zero
    8540:	000b883a 	mov	r5,zero
    8544:	00083a00 	call	83a0 <lcd_set_cursor>
        lcd_write_string(buf);
    8548:	e13ff804 	addi	r4,fp,-32
    854c:	00083080 	call	8308 <lcd_write_string>
        lcd_set_cursor(1, 0);
    8550:	01000044 	movi	r4,1
    8554:	000b883a 	mov	r5,zero
    8558:	00083a00 	call	83a0 <lcd_set_cursor>
        lcd_write_string("Bat switch");
    855c:	01000074 	movhi	r4,1
    8560:	212b5c04 	addi	r4,r4,-21136
    8564:	00083080 	call	8308 <lcd_write_string>

        printf("Nhap gia tri %d (bat switch): ", i + 1);
    8568:	e0bff217 	ldw	r2,-56(fp)
    856c:	11400044 	addi	r5,r2,1
    8570:	01000074 	movhi	r4,1
    8574:	212b5f04 	addi	r4,r4,-21124
    8578:	00089540 	call	8954 <printf>

        wait_for_input();
    857c:	000840c0 	call	840c <wait_for_input>

        data[i] = read_switch_value();
    8580:	e43ff217 	ldw	r16,-56(fp)
    8584:	00084480 	call	8448 <read_switch_value>
    8588:	1007883a 	mov	r3,r2
    858c:	8405883a 	add	r2,r16,r16
    8590:	1085883a 	add	r2,r2,r2
    8594:	e13fed04 	addi	r4,fp,-76
    8598:	1105883a 	add	r2,r2,r4
    859c:	10800604 	addi	r2,r2,24
    85a0:	10c00015 	stw	r3,0(r2)

        printf("Gia tri %d: %d\n", i + 1, data[i]);
    85a4:	e0bff217 	ldw	r2,-56(fp)
    85a8:	11400044 	addi	r5,r2,1
    85ac:	e0bff217 	ldw	r2,-56(fp)
    85b0:	1085883a 	add	r2,r2,r2
    85b4:	1085883a 	add	r2,r2,r2
    85b8:	e0ffed04 	addi	r3,fp,-76
    85bc:	10c5883a 	add	r2,r2,r3
    85c0:	10800604 	addi	r2,r2,24
    85c4:	11800017 	ldw	r6,0(r2)
    85c8:	01000074 	movhi	r4,1
    85cc:	212b6704 	addi	r4,r4,-21092
    85d0:	00089540 	call	8954 <printf>

        IOWR_32DIRECT(MEM_BASE, i*4, data[i]);
    85d4:	e0bff217 	ldw	r2,-56(fp)
    85d8:	1085883a 	add	r2,r2,r2
    85dc:	1085883a 	add	r2,r2,r2
    85e0:	1007883a 	mov	r3,r2
    85e4:	00800074 	movhi	r2,1
    85e8:	10841004 	addi	r2,r2,4160
    85ec:	1889883a 	add	r4,r3,r2
    85f0:	e0bff217 	ldw	r2,-56(fp)
    85f4:	1085883a 	add	r2,r2,r2
    85f8:	1085883a 	add	r2,r2,r2
    85fc:	e0ffed04 	addi	r3,fp,-76
    8600:	10c5883a 	add	r2,r2,r3
    8604:	10800604 	addi	r2,r2,24
    8608:	10c00017 	ldw	r3,0(r2)
    860c:	2005883a 	mov	r2,r4
    8610:	10c00035 	stwio	r3,0(r2)

        lcd_clear();
    8614:	000836c0 	call	836c <lcd_clear>
        sprintf(buf, "GT %d: %d", i + 1, data[i]);
    8618:	e0bff217 	ldw	r2,-56(fp)
    861c:	11800044 	addi	r6,r2,1
    8620:	e0bff217 	ldw	r2,-56(fp)
    8624:	1085883a 	add	r2,r2,r2
    8628:	1085883a 	add	r2,r2,r2
    862c:	e13fed04 	addi	r4,fp,-76
    8630:	1105883a 	add	r2,r2,r4
    8634:	10800604 	addi	r2,r2,24
    8638:	11c00017 	ldw	r7,0(r2)
    863c:	e13ff804 	addi	r4,fp,-32
    8640:	01400074 	movhi	r5,1
    8644:	296b6b04 	addi	r5,r5,-21076
    8648:	0008a900 	call	8a90 <sprintf>
        lcd_set_cursor(0, 0);
    864c:	0009883a 	mov	r4,zero
    8650:	000b883a 	mov	r5,zero
    8654:	00083a00 	call	83a0 <lcd_set_cursor>
        lcd_write_string(buf);
    8658:	e13ff804 	addi	r4,fp,-32
    865c:	00083080 	call	8308 <lcd_write_string>
        usleep(1000000);
    8660:	010003f4 	movhi	r4,15
    8664:	21109004 	addi	r4,r4,16960
    8668:	000980c0 	call	980c <usleep>
    lcd_set_cursor(0, 0);
    lcd_write_string("Nhap 5 gia tri:");

    printf("Bat dau nhap du lieu...\n");

    for (i = 0; i < 5; i++) {
    866c:	e0bff217 	ldw	r2,-56(fp)
    8670:	10800044 	addi	r2,r2,1
    8674:	e0bff215 	stw	r2,-56(fp)
    8678:	e0bff217 	ldw	r2,-56(fp)
    867c:	10800150 	cmplti	r2,r2,5
    8680:	103fa71e 	bne	r2,zero,8520 <main+0x54>
        lcd_set_cursor(0, 0);
        lcd_write_string(buf);
        usleep(1000000);
    }

    printf("Da nhap xong 5 gia tri\n");
    8684:	01000074 	movhi	r4,1
    8688:	212b6e04 	addi	r4,r4,-21064
    868c:	0008a7c0 	call	8a7c <puts>

    lcd_clear();
    8690:	000836c0 	call	836c <lcd_clear>
    lcd_set_cursor(0, 0);
    8694:	0009883a 	mov	r4,zero
    8698:	000b883a 	mov	r5,zero
    869c:	00083a00 	call	83a0 <lcd_set_cursor>
    lcd_write_string("Dang sap xep...");
    86a0:	01000074 	movhi	r4,1
    86a4:	212b7404 	addi	r4,r4,-21040
    86a8:	00083080 	call	8308 <lcd_write_string>

    alt_u32 sort_data = 0;
    86ac:	e03ff115 	stw	zero,-60(fp)
    for (i = 0; i < 5; i++) {
    86b0:	e03ff215 	stw	zero,-56(fp)
    86b4:	00001306 	br	8704 <main+0x238>
        sort_data |= (data[i] & 0x0F) << (i * 4);
    86b8:	e0bff217 	ldw	r2,-56(fp)
    86bc:	1085883a 	add	r2,r2,r2
    86c0:	1085883a 	add	r2,r2,r2
    86c4:	e0ffed04 	addi	r3,fp,-76
    86c8:	10c5883a 	add	r2,r2,r3
    86cc:	10800604 	addi	r2,r2,24
    86d0:	10800017 	ldw	r2,0(r2)
    86d4:	10c003cc 	andi	r3,r2,15
    86d8:	e0bff217 	ldw	r2,-56(fp)
    86dc:	1085883a 	add	r2,r2,r2
    86e0:	1085883a 	add	r2,r2,r2
    86e4:	1884983a 	sll	r2,r3,r2
    86e8:	1007883a 	mov	r3,r2
    86ec:	e0bff117 	ldw	r2,-60(fp)
    86f0:	10c4b03a 	or	r2,r2,r3
    86f4:	e0bff115 	stw	r2,-60(fp)
    lcd_clear();
    lcd_set_cursor(0, 0);
    lcd_write_string("Dang sap xep...");

    alt_u32 sort_data = 0;
    for (i = 0; i < 5; i++) {
    86f8:	e0bff217 	ldw	r2,-56(fp)
    86fc:	10800044 	addi	r2,r2,1
    8700:	e0bff215 	stw	r2,-56(fp)
    8704:	e0bff217 	ldw	r2,-56(fp)
    8708:	10800150 	cmplti	r2,r2,5
    870c:	103fea1e 	bne	r2,zero,86b8 <main+0x1ec>
        sort_data |= (data[i] & 0x0F) << (i * 4);
    }

    printf("Du lieu gui den sort IP: 0x%08X\n", sort_data);
    8710:	01000074 	movhi	r4,1
    8714:	212b7804 	addi	r4,r4,-21024
    8718:	e17ff117 	ldw	r5,-60(fp)
    871c:	00089540 	call	8954 <printf>

    IOWR_32DIRECT(SORT_BASE, 0, sort_data);
    8720:	e0bff117 	ldw	r2,-60(fp)
    8724:	00c00074 	movhi	r3,1
    8728:	18c43c04 	addi	r3,r3,4336
    872c:	18800035 	stwio	r2,0(r3)

    printf("Dang doi sort IP hoan thanh...\n");
    8730:	01000074 	movhi	r4,1
    8734:	212b8104 	addi	r4,r4,-20988
    8738:	0008a7c0 	call	8a7c <puts>
    alt_u32 done_status;
    int timeout = 1000;
    873c:	0080fa04 	movi	r2,1000
    8740:	e0bfef15 	stw	r2,-68(fp)
    do {
        done_status = IORD_32DIRECT(SORT_BASE, 8);
    8744:	00800074 	movhi	r2,1
    8748:	10843e04 	addi	r2,r2,4344
    874c:	10800037 	ldwio	r2,0(r2)
    8750:	e0bff015 	stw	r2,-64(fp)
        usleep(1000);
    8754:	0100fa04 	movi	r4,1000
    8758:	000980c0 	call	980c <usleep>
        timeout--;
    875c:	e0bfef17 	ldw	r2,-68(fp)
    8760:	10bfffc4 	addi	r2,r2,-1
    8764:	e0bfef15 	stw	r2,-68(fp)
        if (timeout == 0) {
    8768:	e0bfef17 	ldw	r2,-68(fp)
    876c:	1004c03a 	cmpne	r2,r2,zero
    8770:	1000041e 	bne	r2,zero,8784 <main+0x2b8>
            printf("Timeout! Sort IP khong phan hoi\n");
    8774:	01000074 	movhi	r4,1
    8778:	212b8904 	addi	r4,r4,-20956
    877c:	0008a7c0 	call	8a7c <puts>
            break;
    8780:	00000306 	br	8790 <main+0x2c4>
        }
    } while (done_status != 1);
    8784:	e0bff017 	ldw	r2,-64(fp)
    8788:	10800058 	cmpnei	r2,r2,1
    878c:	103fed1e 	bne	r2,zero,8744 <main+0x278>

    if (done_status == 1) {
    8790:	e0bff017 	ldw	r2,-64(fp)
    8794:	10800058 	cmpnei	r2,r2,1
    8798:	1000601e 	bne	r2,zero,891c <main+0x450>
        printf("Sort IP da hoan thanh\n");
    879c:	01000074 	movhi	r4,1
    87a0:	212b9104 	addi	r4,r4,-20924
    87a4:	0008a7c0 	call	8a7c <puts>

        alt_u32 sorted = IORD_32DIRECT(SORT_BASE, 4);
    87a8:	00800074 	movhi	r2,1
    87ac:	10843d04 	addi	r2,r2,4340
    87b0:	10800037 	ldwio	r2,0(r2)
    87b4:	e0bfee15 	stw	r2,-72(fp)
        printf("Ket qua sap xep: 0x%08X\n", sorted);
    87b8:	01000074 	movhi	r4,1
    87bc:	212b9704 	addi	r4,r4,-20900
    87c0:	e17fee17 	ldw	r5,-72(fp)
    87c4:	00089540 	call	8954 <printf>

        lcd_clear();
    87c8:	000836c0 	call	836c <lcd_clear>
        lcd_set_cursor(0, 0);
    87cc:	0009883a 	mov	r4,zero
    87d0:	000b883a 	mov	r5,zero
    87d4:	00083a00 	call	83a0 <lcd_set_cursor>
        lcd_write_string("Ket qua sap xep:");
    87d8:	01000074 	movhi	r4,1
    87dc:	212b9e04 	addi	r4,r4,-20872
    87e0:	00083080 	call	8308 <lcd_write_string>

        for (i = 0; i < 5; i++) {
    87e4:	e03ff215 	stw	zero,-56(fp)
    87e8:	00002706 	br	8888 <main+0x3bc>
            int sorted_val = (sorted >> (i * 4)) & 0x0F;
    87ec:	e0bff217 	ldw	r2,-56(fp)
    87f0:	1085883a 	add	r2,r2,r2
    87f4:	1085883a 	add	r2,r2,r2
    87f8:	1007883a 	mov	r3,r2
    87fc:	e0bfee17 	ldw	r2,-72(fp)
    8800:	10c4d83a 	srl	r2,r2,r3
    8804:	108003cc 	andi	r2,r2,15
    8808:	e0bfed15 	stw	r2,-76(fp)
            printf("Gia tri %d: %d\n", i + 1, sorted_val);
    880c:	e0bff217 	ldw	r2,-56(fp)
    8810:	11400044 	addi	r5,r2,1
    8814:	01000074 	movhi	r4,1
    8818:	212b6704 	addi	r4,r4,-21092
    881c:	e1bfed17 	ldw	r6,-76(fp)
    8820:	00089540 	call	8954 <printf>

            sprintf(buf, "%d: %d", i + 1, sorted_val);
    8824:	e0bff217 	ldw	r2,-56(fp)
    8828:	11800044 	addi	r6,r2,1
    882c:	e13ff804 	addi	r4,fp,-32
    8830:	01400074 	movhi	r5,1
    8834:	296ba304 	addi	r5,r5,-20852
    8838:	e1ffed17 	ldw	r7,-76(fp)
    883c:	0008a900 	call	8a90 <sprintf>
            lcd_clear();
    8840:	000836c0 	call	836c <lcd_clear>
            lcd_set_cursor(0, 0);
    8844:	0009883a 	mov	r4,zero
    8848:	000b883a 	mov	r5,zero
    884c:	00083a00 	call	83a0 <lcd_set_cursor>
            lcd_write_string("Ket qua:");
    8850:	01000074 	movhi	r4,1
    8854:	212ba504 	addi	r4,r4,-20844
    8858:	00083080 	call	8308 <lcd_write_string>
            lcd_set_cursor(1, 0);
    885c:	01000044 	movi	r4,1
    8860:	000b883a 	mov	r5,zero
    8864:	00083a00 	call	83a0 <lcd_set_cursor>
            lcd_write_string(buf);
    8868:	e13ff804 	addi	r4,fp,-32
    886c:	00083080 	call	8308 <lcd_write_string>
            usleep(2000000);
    8870:	010007f4 	movhi	r4,31
    8874:	21212004 	addi	r4,r4,-31616
    8878:	000980c0 	call	980c <usleep>

        lcd_clear();
        lcd_set_cursor(0, 0);
        lcd_write_string("Ket qua sap xep:");

        for (i = 0; i < 5; i++) {
    887c:	e0bff217 	ldw	r2,-56(fp)
    8880:	10800044 	addi	r2,r2,1
    8884:	e0bff215 	stw	r2,-56(fp)
    8888:	e0bff217 	ldw	r2,-56(fp)
    888c:	10800150 	cmplti	r2,r2,5
    8890:	103fd61e 	bne	r2,zero,87ec <main+0x320>
            lcd_set_cursor(1, 0);
            lcd_write_string(buf);
            usleep(2000000);
        }

        lcd_clear();
    8894:	000836c0 	call	836c <lcd_clear>
        sprintf(buf, "%d %d %d %d %d",
    8898:	e0bfee17 	ldw	r2,-72(fp)
    889c:	118003cc 	andi	r6,r2,15
    88a0:	e0bfee17 	ldw	r2,-72(fp)
    88a4:	1004d13a 	srli	r2,r2,4
    88a8:	11c003cc 	andi	r7,r2,15
    88ac:	e0bfee17 	ldw	r2,-72(fp)
    88b0:	1004d23a 	srli	r2,r2,8
    88b4:	10c003cc 	andi	r3,r2,15
    88b8:	e0bfee17 	ldw	r2,-72(fp)
    88bc:	1004d33a 	srli	r2,r2,12
    88c0:	114003cc 	andi	r5,r2,15
    88c4:	e0bfee17 	ldw	r2,-72(fp)
    88c8:	1004d43a 	srli	r2,r2,16
    88cc:	108003cc 	andi	r2,r2,15
    88d0:	e13ff804 	addi	r4,fp,-32
    88d4:	d8c00015 	stw	r3,0(sp)
    88d8:	d9400115 	stw	r5,4(sp)
    88dc:	d8800215 	stw	r2,8(sp)
    88e0:	01400074 	movhi	r5,1
    88e4:	296ba804 	addi	r5,r5,-20832
    88e8:	0008a900 	call	8a90 <sprintf>
                (int)((sorted >> 0) & 0x0F),
                (int)((sorted >> 4) & 0x0F),
                (int)((sorted >> 8) & 0x0F),
                (int)((sorted >> 12) & 0x0F),
                (int)((sorted >> 16) & 0x0F));
        lcd_set_cursor(0, 0);
    88ec:	0009883a 	mov	r4,zero
    88f0:	000b883a 	mov	r5,zero
    88f4:	00083a00 	call	83a0 <lcd_set_cursor>
        lcd_write_string("KQ:");
    88f8:	01000074 	movhi	r4,1
    88fc:	212bac04 	addi	r4,r4,-20816
    8900:	00083080 	call	8308 <lcd_write_string>
        lcd_set_cursor(1, 0);
    8904:	01000044 	movi	r4,1
    8908:	000b883a 	mov	r5,zero
    890c:	00083a00 	call	83a0 <lcd_set_cursor>
        lcd_write_string(buf);
    8910:	e13ff804 	addi	r4,fp,-32
    8914:	00083080 	call	8308 <lcd_write_string>
    8918:	00000706 	br	8938 <main+0x46c>
    } else {
        lcd_clear();
    891c:	000836c0 	call	836c <lcd_clear>
        lcd_set_cursor(0, 0);
    8920:	0009883a 	mov	r4,zero
    8924:	000b883a 	mov	r5,zero
    8928:	00083a00 	call	83a0 <lcd_set_cursor>
        lcd_write_string("Loi sap xep!");
    892c:	01000074 	movhi	r4,1
    8930:	212bad04 	addi	r4,r4,-20812
    8934:	00083080 	call	8308 <lcd_write_string>
    }

    printf("Chuong trinh ket thuc\n");
    8938:	01000074 	movhi	r4,1
    893c:	212bb104 	addi	r4,r4,-20796
    8940:	0008a7c0 	call	8a7c <puts>
    while (1) {
        usleep(100000);
    8944:	010000b4 	movhi	r4,2
    8948:	2121a804 	addi	r4,r4,-31072
    894c:	000980c0 	call	980c <usleep>
    }
    8950:	003ffc06 	br	8944 <main+0x478>

00008954 <printf>:
    8954:	defffb04 	addi	sp,sp,-20
    8958:	dfc00115 	stw	ra,4(sp)
    895c:	d9400215 	stw	r5,8(sp)
    8960:	d9800315 	stw	r6,12(sp)
    8964:	d9c00415 	stw	r7,16(sp)
    8968:	00800074 	movhi	r2,1
    896c:	10ac7204 	addi	r2,r2,-20024
    8970:	11400017 	ldw	r5,0(r2)
    8974:	d8800204 	addi	r2,sp,8
    8978:	d8800015 	stw	r2,0(sp)
    897c:	29c00217 	ldw	r7,8(r5)
    8980:	100d883a 	mov	r6,r2
    8984:	00800074 	movhi	r2,1
    8988:	10a4b904 	addi	r2,r2,-27932
    898c:	200b883a 	mov	r5,r4
    8990:	38800115 	stw	r2,4(r7)
    8994:	3809883a 	mov	r4,r7
    8998:	00092c00 	call	92c0 <__vfprintf_internal>
    899c:	dfc00117 	ldw	ra,4(sp)
    89a0:	dec00504 	addi	sp,sp,20
    89a4:	f800283a 	ret

000089a8 <_printf_r>:
    89a8:	defffc04 	addi	sp,sp,-16
    89ac:	dfc00115 	stw	ra,4(sp)
    89b0:	d9800215 	stw	r6,8(sp)
    89b4:	d9c00315 	stw	r7,12(sp)
    89b8:	22000217 	ldw	r8,8(r4)
    89bc:	d8800204 	addi	r2,sp,8
    89c0:	d8800015 	stw	r2,0(sp)
    89c4:	100f883a 	mov	r7,r2
    89c8:	00800074 	movhi	r2,1
    89cc:	10a4b904 	addi	r2,r2,-27932
    89d0:	280d883a 	mov	r6,r5
    89d4:	40800115 	stw	r2,4(r8)
    89d8:	400b883a 	mov	r5,r8
    89dc:	0008c240 	call	8c24 <___vfprintf_internal_r>
    89e0:	dfc00117 	ldw	ra,4(sp)
    89e4:	dec00404 	addi	sp,sp,16
    89e8:	f800283a 	ret

000089ec <_puts_r>:
    89ec:	defffd04 	addi	sp,sp,-12
    89f0:	dc000015 	stw	r16,0(sp)
    89f4:	2021883a 	mov	r16,r4
    89f8:	2809883a 	mov	r4,r5
    89fc:	dfc00215 	stw	ra,8(sp)
    8a00:	dc400115 	stw	r17,4(sp)
    8a04:	2823883a 	mov	r17,r5
    8a08:	0008b840 	call	8b84 <strlen>
    8a0c:	80c00217 	ldw	r3,8(r16)
    8a10:	02000074 	movhi	r8,1
    8a14:	4224b904 	addi	r8,r8,-27932
    8a18:	880d883a 	mov	r6,r17
    8a1c:	100f883a 	mov	r7,r2
    8a20:	8009883a 	mov	r4,r16
    8a24:	180b883a 	mov	r5,r3
    8a28:	1a000115 	stw	r8,4(r3)
    8a2c:	403ee83a 	callr	r8
    8a30:	047fffc4 	movi	r17,-1
    8a34:	8009883a 	mov	r4,r16
    8a38:	01800074 	movhi	r6,1
    8a3c:	31abb704 	addi	r6,r6,-20772
    8a40:	01c00044 	movi	r7,1
    8a44:	1440071e 	bne	r2,r17,8a64 <_puts_r+0x78>
    8a48:	00ffffc4 	movi	r3,-1
    8a4c:	1805883a 	mov	r2,r3
    8a50:	dfc00217 	ldw	ra,8(sp)
    8a54:	dc400117 	ldw	r17,4(sp)
    8a58:	dc000017 	ldw	r16,0(sp)
    8a5c:	dec00304 	addi	sp,sp,12
    8a60:	f800283a 	ret
    8a64:	81400217 	ldw	r5,8(r16)
    8a68:	28c00117 	ldw	r3,4(r5)
    8a6c:	183ee83a 	callr	r3
    8a70:	0007883a 	mov	r3,zero
    8a74:	147ff51e 	bne	r2,r17,8a4c <_puts_r+0x60>
    8a78:	003ff306 	br	8a48 <_puts_r+0x5c>

00008a7c <puts>:
    8a7c:	00800074 	movhi	r2,1
    8a80:	10ac7204 	addi	r2,r2,-20024
    8a84:	200b883a 	mov	r5,r4
    8a88:	11000017 	ldw	r4,0(r2)
    8a8c:	00089ec1 	jmpi	89ec <_puts_r>

00008a90 <sprintf>:
    8a90:	defff504 	addi	sp,sp,-44
    8a94:	2015883a 	mov	r10,r4
    8a98:	dfc00815 	stw	ra,32(sp)
    8a9c:	d9800915 	stw	r6,36(sp)
    8aa0:	d9c00a15 	stw	r7,40(sp)
    8aa4:	d8800904 	addi	r2,sp,36
    8aa8:	d8800015 	stw	r2,0(sp)
    8aac:	00800074 	movhi	r2,1
    8ab0:	10ac7204 	addi	r2,r2,-20024
    8ab4:	11000017 	ldw	r4,0(r2)
    8ab8:	d9c00017 	ldw	r7,0(sp)
    8abc:	00808204 	movi	r2,520
    8ac0:	02200034 	movhi	r8,32768
    8ac4:	423fffc4 	addi	r8,r8,-1
    8ac8:	280d883a 	mov	r6,r5
    8acc:	d880010d 	sth	r2,4(sp)
    8ad0:	00c00074 	movhi	r3,1
    8ad4:	18e4e804 	addi	r3,r3,-27744
    8ad8:	d9400104 	addi	r5,sp,4
    8adc:	00bfffc4 	movi	r2,-1
    8ae0:	d8c00215 	stw	r3,8(sp)
    8ae4:	da800315 	stw	r10,12(sp)
    8ae8:	da000415 	stw	r8,16(sp)
    8aec:	d880018d 	sth	r2,6(sp)
    8af0:	da800515 	stw	r10,20(sp)
    8af4:	da000615 	stw	r8,24(sp)
    8af8:	d8000715 	stw	zero,28(sp)
    8afc:	0008c240 	call	8c24 <___vfprintf_internal_r>
    8b00:	d8c00517 	ldw	r3,20(sp)
    8b04:	18000005 	stb	zero,0(r3)
    8b08:	dfc00817 	ldw	ra,32(sp)
    8b0c:	dec00b04 	addi	sp,sp,44
    8b10:	f800283a 	ret

00008b14 <_sprintf_r>:
    8b14:	defff604 	addi	sp,sp,-40
    8b18:	2815883a 	mov	r10,r5
    8b1c:	dfc00815 	stw	ra,32(sp)
    8b20:	d9c00915 	stw	r7,36(sp)
    8b24:	d8800904 	addi	r2,sp,36
    8b28:	d8800015 	stw	r2,0(sp)
    8b2c:	100f883a 	mov	r7,r2
    8b30:	00808204 	movi	r2,520
    8b34:	02200034 	movhi	r8,32768
    8b38:	423fffc4 	addi	r8,r8,-1
    8b3c:	d880010d 	sth	r2,4(sp)
    8b40:	00c00074 	movhi	r3,1
    8b44:	18e4e804 	addi	r3,r3,-27744
    8b48:	d9400104 	addi	r5,sp,4
    8b4c:	00bfffc4 	movi	r2,-1
    8b50:	d8c00215 	stw	r3,8(sp)
    8b54:	da800315 	stw	r10,12(sp)
    8b58:	da000415 	stw	r8,16(sp)
    8b5c:	d880018d 	sth	r2,6(sp)
    8b60:	da800515 	stw	r10,20(sp)
    8b64:	da000615 	stw	r8,24(sp)
    8b68:	d8000715 	stw	zero,28(sp)
    8b6c:	0008c240 	call	8c24 <___vfprintf_internal_r>
    8b70:	d8c00517 	ldw	r3,20(sp)
    8b74:	18000005 	stb	zero,0(r3)
    8b78:	dfc00817 	ldw	ra,32(sp)
    8b7c:	dec00a04 	addi	sp,sp,40
    8b80:	f800283a 	ret

00008b84 <strlen>:
    8b84:	20800007 	ldb	r2,0(r4)
    8b88:	10000526 	beq	r2,zero,8ba0 <strlen+0x1c>
    8b8c:	2007883a 	mov	r3,r4
    8b90:	18c00044 	addi	r3,r3,1
    8b94:	18800007 	ldb	r2,0(r3)
    8b98:	103ffd1e 	bne	r2,zero,8b90 <strlen+0xc>
    8b9c:	1905c83a 	sub	r2,r3,r4
    8ba0:	f800283a 	ret

00008ba4 <print_repeat>:
    8ba4:	defffb04 	addi	sp,sp,-20
    8ba8:	dc800315 	stw	r18,12(sp)
    8bac:	dc400215 	stw	r17,8(sp)
    8bb0:	dc000115 	stw	r16,4(sp)
    8bb4:	dfc00415 	stw	ra,16(sp)
    8bb8:	2025883a 	mov	r18,r4
    8bbc:	2823883a 	mov	r17,r5
    8bc0:	3821883a 	mov	r16,r7
    8bc4:	d9800005 	stb	r6,0(sp)
    8bc8:	9009883a 	mov	r4,r18
    8bcc:	880b883a 	mov	r5,r17
    8bd0:	d80d883a 	mov	r6,sp
    8bd4:	01c00044 	movi	r7,1
    8bd8:	04000b0e 	bge	zero,r16,8c08 <print_repeat+0x64>
    8bdc:	88c00117 	ldw	r3,4(r17)
    8be0:	843fffc4 	addi	r16,r16,-1
    8be4:	183ee83a 	callr	r3
    8be8:	103ff726 	beq	r2,zero,8bc8 <print_repeat+0x24>
    8bec:	00bfffc4 	movi	r2,-1
    8bf0:	dfc00417 	ldw	ra,16(sp)
    8bf4:	dc800317 	ldw	r18,12(sp)
    8bf8:	dc400217 	ldw	r17,8(sp)
    8bfc:	dc000117 	ldw	r16,4(sp)
    8c00:	dec00504 	addi	sp,sp,20
    8c04:	f800283a 	ret
    8c08:	0005883a 	mov	r2,zero
    8c0c:	dfc00417 	ldw	ra,16(sp)
    8c10:	dc800317 	ldw	r18,12(sp)
    8c14:	dc400217 	ldw	r17,8(sp)
    8c18:	dc000117 	ldw	r16,4(sp)
    8c1c:	dec00504 	addi	sp,sp,20
    8c20:	f800283a 	ret

00008c24 <___vfprintf_internal_r>:
    8c24:	deffe304 	addi	sp,sp,-116
    8c28:	df001b15 	stw	fp,108(sp)
    8c2c:	ddc01a15 	stw	r23,104(sp)
    8c30:	dd001715 	stw	r20,92(sp)
    8c34:	dc801515 	stw	r18,84(sp)
    8c38:	dc001315 	stw	r16,76(sp)
    8c3c:	dfc01c15 	stw	ra,112(sp)
    8c40:	dd801915 	stw	r22,100(sp)
    8c44:	dd401815 	stw	r21,96(sp)
    8c48:	dcc01615 	stw	r19,88(sp)
    8c4c:	dc401415 	stw	r17,80(sp)
    8c50:	d9001015 	stw	r4,64(sp)
    8c54:	2829883a 	mov	r20,r5
    8c58:	d9c01115 	stw	r7,68(sp)
    8c5c:	3025883a 	mov	r18,r6
    8c60:	0021883a 	mov	r16,zero
    8c64:	d8000f15 	stw	zero,60(sp)
    8c68:	d8000e15 	stw	zero,56(sp)
    8c6c:	0039883a 	mov	fp,zero
    8c70:	d8000915 	stw	zero,36(sp)
    8c74:	d8000d15 	stw	zero,52(sp)
    8c78:	d8000c15 	stw	zero,48(sp)
    8c7c:	d8000b15 	stw	zero,44(sp)
    8c80:	002f883a 	mov	r23,zero
    8c84:	91400003 	ldbu	r5,0(r18)
    8c88:	01c00044 	movi	r7,1
    8c8c:	94800044 	addi	r18,r18,1
    8c90:	29003fcc 	andi	r4,r5,255
    8c94:	2100201c 	xori	r4,r4,128
    8c98:	213fe004 	addi	r4,r4,-128
    8c9c:	20001526 	beq	r4,zero,8cf4 <___vfprintf_internal_r+0xd0>
    8ca0:	81c03526 	beq	r16,r7,8d78 <___vfprintf_internal_r+0x154>
    8ca4:	3c002016 	blt	r7,r16,8d28 <___vfprintf_internal_r+0x104>
    8ca8:	803ff61e 	bne	r16,zero,8c84 <___vfprintf_internal_r+0x60>
    8cac:	00800944 	movi	r2,37
    8cb0:	2081501e 	bne	r4,r2,91f4 <___vfprintf_internal_r+0x5d0>
    8cb4:	073fffc4 	movi	fp,-1
    8cb8:	00800284 	movi	r2,10
    8cbc:	d9c00c15 	stw	r7,48(sp)
    8cc0:	d8000f15 	stw	zero,60(sp)
    8cc4:	d8000e15 	stw	zero,56(sp)
    8cc8:	df000915 	stw	fp,36(sp)
    8ccc:	d8800d15 	stw	r2,52(sp)
    8cd0:	d8000b15 	stw	zero,44(sp)
    8cd4:	91400003 	ldbu	r5,0(r18)
    8cd8:	3821883a 	mov	r16,r7
    8cdc:	94800044 	addi	r18,r18,1
    8ce0:	29003fcc 	andi	r4,r5,255
    8ce4:	2100201c 	xori	r4,r4,128
    8ce8:	213fe004 	addi	r4,r4,-128
    8cec:	01c00044 	movi	r7,1
    8cf0:	203feb1e 	bne	r4,zero,8ca0 <___vfprintf_internal_r+0x7c>
    8cf4:	b805883a 	mov	r2,r23
    8cf8:	dfc01c17 	ldw	ra,112(sp)
    8cfc:	df001b17 	ldw	fp,108(sp)
    8d00:	ddc01a17 	ldw	r23,104(sp)
    8d04:	dd801917 	ldw	r22,100(sp)
    8d08:	dd401817 	ldw	r21,96(sp)
    8d0c:	dd001717 	ldw	r20,92(sp)
    8d10:	dcc01617 	ldw	r19,88(sp)
    8d14:	dc801517 	ldw	r18,84(sp)
    8d18:	dc401417 	ldw	r17,80(sp)
    8d1c:	dc001317 	ldw	r16,76(sp)
    8d20:	dec01d04 	addi	sp,sp,116
    8d24:	f800283a 	ret
    8d28:	00800084 	movi	r2,2
    8d2c:	80801726 	beq	r16,r2,8d8c <___vfprintf_internal_r+0x168>
    8d30:	008000c4 	movi	r2,3
    8d34:	80bfd31e 	bne	r16,r2,8c84 <___vfprintf_internal_r+0x60>
    8d38:	2c7ff404 	addi	r17,r5,-48
    8d3c:	88c03fcc 	andi	r3,r17,255
    8d40:	00800244 	movi	r2,9
    8d44:	10c02136 	bltu	r2,r3,8dcc <___vfprintf_internal_r+0x1a8>
    8d48:	d8c00917 	ldw	r3,36(sp)
    8d4c:	18012716 	blt	r3,zero,91ec <___vfprintf_internal_r+0x5c8>
    8d50:	d9000917 	ldw	r4,36(sp)
    8d54:	01400284 	movi	r5,10
    8d58:	000967c0 	call	967c <__mulsi3>
    8d5c:	1007883a 	mov	r3,r2
    8d60:	88803fcc 	andi	r2,r17,255
    8d64:	1080201c 	xori	r2,r2,128
    8d68:	10bfe004 	addi	r2,r2,-128
    8d6c:	1887883a 	add	r3,r3,r2
    8d70:	d8c00915 	stw	r3,36(sp)
    8d74:	003fc306 	br	8c84 <___vfprintf_internal_r+0x60>
    8d78:	00800c04 	movi	r2,48
    8d7c:	2080b326 	beq	r4,r2,904c <___vfprintf_internal_r+0x428>
    8d80:	00800944 	movi	r2,37
    8d84:	20812726 	beq	r4,r2,9224 <___vfprintf_internal_r+0x600>
    8d88:	04000084 	movi	r16,2
    8d8c:	2c7ff404 	addi	r17,r5,-48
    8d90:	88c03fcc 	andi	r3,r17,255
    8d94:	00800244 	movi	r2,9
    8d98:	10c00a36 	bltu	r2,r3,8dc4 <___vfprintf_internal_r+0x1a0>
    8d9c:	e000b416 	blt	fp,zero,9070 <___vfprintf_internal_r+0x44c>
    8da0:	e009883a 	mov	r4,fp
    8da4:	01400284 	movi	r5,10
    8da8:	000967c0 	call	967c <__mulsi3>
    8dac:	1007883a 	mov	r3,r2
    8db0:	88803fcc 	andi	r2,r17,255
    8db4:	1080201c 	xori	r2,r2,128
    8db8:	10bfe004 	addi	r2,r2,-128
    8dbc:	18b9883a 	add	fp,r3,r2
    8dc0:	003fb006 	br	8c84 <___vfprintf_internal_r+0x60>
    8dc4:	00800b84 	movi	r2,46
    8dc8:	2080a326 	beq	r4,r2,9058 <___vfprintf_internal_r+0x434>
    8dcc:	00801b04 	movi	r2,108
    8dd0:	2080a326 	beq	r4,r2,9060 <___vfprintf_internal_r+0x43c>
    8dd4:	d8c00917 	ldw	r3,36(sp)
    8dd8:	1800a716 	blt	r3,zero,9078 <___vfprintf_internal_r+0x454>
    8ddc:	d8000f15 	stw	zero,60(sp)
    8de0:	28bfea04 	addi	r2,r5,-88
    8de4:	10803fcc 	andi	r2,r2,255
    8de8:	00c00804 	movi	r3,32
    8dec:	18802836 	bltu	r3,r2,8e90 <___vfprintf_internal_r+0x26c>
    8df0:	1085883a 	add	r2,r2,r2
    8df4:	1085883a 	add	r2,r2,r2
    8df8:	00c00074 	movhi	r3,1
    8dfc:	18e38304 	addi	r3,r3,-29172
    8e00:	10c5883a 	add	r2,r2,r3
    8e04:	11000017 	ldw	r4,0(r2)
    8e08:	2000683a 	jmp	r4
    8e0c:	00008e98 	cmpnei	zero,zero,570
    8e10:	00008e90 	cmplti	zero,zero,570
    8e14:	00008e90 	cmplti	zero,zero,570
    8e18:	00008e90 	cmplti	zero,zero,570
    8e1c:	00008e90 	cmplti	zero,zero,570
    8e20:	00008e90 	cmplti	zero,zero,570
    8e24:	00008e90 	cmplti	zero,zero,570
    8e28:	00008e90 	cmplti	zero,zero,570
    8e2c:	00008e90 	cmplti	zero,zero,570
    8e30:	00008e90 	cmplti	zero,zero,570
    8e34:	00008e90 	cmplti	zero,zero,570
    8e38:	000090c4 	movi	zero,579
    8e3c:	00008eac 	andhi	zero,zero,570
    8e40:	00008e90 	cmplti	zero,zero,570
    8e44:	00008e90 	cmplti	zero,zero,570
    8e48:	00008e90 	cmplti	zero,zero,570
    8e4c:	00008e90 	cmplti	zero,zero,570
    8e50:	00008eac 	andhi	zero,zero,570
    8e54:	00008e90 	cmplti	zero,zero,570
    8e58:	00008e90 	cmplti	zero,zero,570
    8e5c:	00008e90 	cmplti	zero,zero,570
    8e60:	00008e90 	cmplti	zero,zero,570
    8e64:	00008e90 	cmplti	zero,zero,570
    8e68:	0000912c 	andhi	zero,zero,580
    8e6c:	00008e90 	cmplti	zero,zero,570
    8e70:	00008e90 	cmplti	zero,zero,570
    8e74:	00008e90 	cmplti	zero,zero,570
    8e78:	0000913c 	xorhi	zero,zero,580
    8e7c:	00008e90 	cmplti	zero,zero,570
    8e80:	00009010 	cmplti	zero,zero,576
    8e84:	00008e90 	cmplti	zero,zero,570
    8e88:	00008e90 	cmplti	zero,zero,570
    8e8c:	00009008 	cmpgei	zero,zero,576
    8e90:	0021883a 	mov	r16,zero
    8e94:	003f7b06 	br	8c84 <___vfprintf_internal_r+0x60>
    8e98:	00c00404 	movi	r3,16
    8e9c:	00800044 	movi	r2,1
    8ea0:	d8c00d15 	stw	r3,52(sp)
    8ea4:	d8000c15 	stw	zero,48(sp)
    8ea8:	d8800b15 	stw	r2,44(sp)
    8eac:	d8c00e17 	ldw	r3,56(sp)
    8eb0:	1805003a 	cmpeq	r2,r3,zero
    8eb4:	10005a1e 	bne	r2,zero,9020 <___vfprintf_internal_r+0x3fc>
    8eb8:	d8800c17 	ldw	r2,48(sp)
    8ebc:	1000781e 	bne	r2,zero,90a0 <___vfprintf_internal_r+0x47c>
    8ec0:	d8801117 	ldw	r2,68(sp)
    8ec4:	d8000a15 	stw	zero,40(sp)
    8ec8:	14400017 	ldw	r17,0(r2)
    8ecc:	11c00104 	addi	r7,r2,4
    8ed0:	d9c01115 	stw	r7,68(sp)
    8ed4:	88005a26 	beq	r17,zero,9040 <___vfprintf_internal_r+0x41c>
    8ed8:	d8c00b17 	ldw	r3,44(sp)
    8edc:	dcc00044 	addi	r19,sp,1
    8ee0:	05800244 	movi	r22,9
    8ee4:	182b003a 	cmpeq	r21,r3,zero
    8ee8:	dcc01215 	stw	r19,72(sp)
    8eec:	00000506 	br	8f04 <___vfprintf_internal_r+0x2e0>
    8ef0:	21000c04 	addi	r4,r4,48
    8ef4:	99000005 	stb	r4,0(r19)
    8ef8:	9cc00044 	addi	r19,r19,1
    8efc:	80000f26 	beq	r16,zero,8f3c <___vfprintf_internal_r+0x318>
    8f00:	8023883a 	mov	r17,r16
    8f04:	d9400d17 	ldw	r5,52(sp)
    8f08:	8809883a 	mov	r4,r17
    8f0c:	000966c0 	call	966c <__udivsi3>
    8f10:	d9000d17 	ldw	r4,52(sp)
    8f14:	100b883a 	mov	r5,r2
    8f18:	1021883a 	mov	r16,r2
    8f1c:	000967c0 	call	967c <__mulsi3>
    8f20:	8889c83a 	sub	r4,r17,r2
    8f24:	b13ff20e 	bge	r22,r4,8ef0 <___vfprintf_internal_r+0x2cc>
    8f28:	a8009f1e 	bne	r21,zero,91a8 <___vfprintf_internal_r+0x584>
    8f2c:	21000dc4 	addi	r4,r4,55
    8f30:	99000005 	stb	r4,0(r19)
    8f34:	9cc00044 	addi	r19,r19,1
    8f38:	803ff11e 	bne	r16,zero,8f00 <___vfprintf_internal_r+0x2dc>
    8f3c:	d8801217 	ldw	r2,72(sp)
    8f40:	98a3c83a 	sub	r17,r19,r2
    8f44:	d8c00917 	ldw	r3,36(sp)
    8f48:	1c4bc83a 	sub	r5,r3,r17
    8f4c:	0140130e 	bge	zero,r5,8f9c <___vfprintf_internal_r+0x378>
    8f50:	d8c00044 	addi	r3,sp,1
    8f54:	18800804 	addi	r2,r3,32
    8f58:	9880102e 	bgeu	r19,r2,8f9c <___vfprintf_internal_r+0x378>
    8f5c:	00800c04 	movi	r2,48
    8f60:	28ffffc4 	addi	r3,r5,-1
    8f64:	98800005 	stb	r2,0(r19)
    8f68:	99000044 	addi	r4,r19,1
    8f6c:	00c0080e 	bge	zero,r3,8f90 <___vfprintf_internal_r+0x36c>
    8f70:	d8c00044 	addi	r3,sp,1
    8f74:	18800804 	addi	r2,r3,32
    8f78:	2080052e 	bgeu	r4,r2,8f90 <___vfprintf_internal_r+0x36c>
    8f7c:	00800c04 	movi	r2,48
    8f80:	20800005 	stb	r2,0(r4)
    8f84:	21000044 	addi	r4,r4,1
    8f88:	9945883a 	add	r2,r19,r5
    8f8c:	20bff81e 	bne	r4,r2,8f70 <___vfprintf_internal_r+0x34c>
    8f90:	d8801217 	ldw	r2,72(sp)
    8f94:	2027883a 	mov	r19,r4
    8f98:	20a3c83a 	sub	r17,r4,r2
    8f9c:	d8c00a17 	ldw	r3,40(sp)
    8fa0:	1c45883a 	add	r2,r3,r17
    8fa4:	e0a1c83a 	sub	r16,fp,r2
    8fa8:	d8800f17 	ldw	r2,60(sp)
    8fac:	10008026 	beq	r2,zero,91b0 <___vfprintf_internal_r+0x58c>
    8fb0:	1805003a 	cmpeq	r2,r3,zero
    8fb4:	1000ae26 	beq	r2,zero,9270 <___vfprintf_internal_r+0x64c>
    8fb8:	0400a516 	blt	zero,r16,9250 <___vfprintf_internal_r+0x62c>
    8fbc:	b805883a 	mov	r2,r23
    8fc0:	0440950e 	bge	zero,r17,9218 <___vfprintf_internal_r+0x5f4>
    8fc4:	102f883a 	mov	r23,r2
    8fc8:	1461883a 	add	r16,r2,r17
    8fcc:	00000206 	br	8fd8 <___vfprintf_internal_r+0x3b4>
    8fd0:	bdc00044 	addi	r23,r23,1
    8fd4:	85ffae26 	beq	r16,r23,8e90 <___vfprintf_internal_r+0x26c>
    8fd8:	9cffffc4 	addi	r19,r19,-1
    8fdc:	98800003 	ldbu	r2,0(r19)
    8fe0:	a0c00117 	ldw	r3,4(r20)
    8fe4:	d9001017 	ldw	r4,64(sp)
    8fe8:	d8800005 	stb	r2,0(sp)
    8fec:	a00b883a 	mov	r5,r20
    8ff0:	d80d883a 	mov	r6,sp
    8ff4:	01c00044 	movi	r7,1
    8ff8:	183ee83a 	callr	r3
    8ffc:	103ff426 	beq	r2,zero,8fd0 <___vfprintf_internal_r+0x3ac>
    9000:	05ffffc4 	movi	r23,-1
    9004:	003f3b06 	br	8cf4 <___vfprintf_internal_r+0xd0>
    9008:	00c00404 	movi	r3,16
    900c:	d8c00d15 	stw	r3,52(sp)
    9010:	d8000c15 	stw	zero,48(sp)
    9014:	d8c00e17 	ldw	r3,56(sp)
    9018:	1805003a 	cmpeq	r2,r3,zero
    901c:	103fa626 	beq	r2,zero,8eb8 <___vfprintf_internal_r+0x294>
    9020:	d8c00c17 	ldw	r3,48(sp)
    9024:	1800171e 	bne	r3,zero,9084 <___vfprintf_internal_r+0x460>
    9028:	d8c01117 	ldw	r3,68(sp)
    902c:	d8000a15 	stw	zero,40(sp)
    9030:	1c400017 	ldw	r17,0(r3)
    9034:	19c00104 	addi	r7,r3,4
    9038:	d9c01115 	stw	r7,68(sp)
    903c:	883fa61e 	bne	r17,zero,8ed8 <___vfprintf_internal_r+0x2b4>
    9040:	dcc00044 	addi	r19,sp,1
    9044:	dcc01215 	stw	r19,72(sp)
    9048:	003fbe06 	br	8f44 <___vfprintf_internal_r+0x320>
    904c:	04000084 	movi	r16,2
    9050:	d9c00f15 	stw	r7,60(sp)
    9054:	003f0b06 	br	8c84 <___vfprintf_internal_r+0x60>
    9058:	040000c4 	movi	r16,3
    905c:	003f0906 	br	8c84 <___vfprintf_internal_r+0x60>
    9060:	00800044 	movi	r2,1
    9064:	040000c4 	movi	r16,3
    9068:	d8800e15 	stw	r2,56(sp)
    906c:	003f0506 	br	8c84 <___vfprintf_internal_r+0x60>
    9070:	0007883a 	mov	r3,zero
    9074:	003f4e06 	br	8db0 <___vfprintf_internal_r+0x18c>
    9078:	00800044 	movi	r2,1
    907c:	d8800915 	stw	r2,36(sp)
    9080:	003f5706 	br	8de0 <___vfprintf_internal_r+0x1bc>
    9084:	d8801117 	ldw	r2,68(sp)
    9088:	14400017 	ldw	r17,0(r2)
    908c:	10800104 	addi	r2,r2,4
    9090:	d8801115 	stw	r2,68(sp)
    9094:	88000716 	blt	r17,zero,90b4 <___vfprintf_internal_r+0x490>
    9098:	d8000a15 	stw	zero,40(sp)
    909c:	003f8d06 	br	8ed4 <___vfprintf_internal_r+0x2b0>
    90a0:	d8c01117 	ldw	r3,68(sp)
    90a4:	1c400017 	ldw	r17,0(r3)
    90a8:	18c00104 	addi	r3,r3,4
    90ac:	d8c01115 	stw	r3,68(sp)
    90b0:	883ff90e 	bge	r17,zero,9098 <___vfprintf_internal_r+0x474>
    90b4:	00800044 	movi	r2,1
    90b8:	0463c83a 	sub	r17,zero,r17
    90bc:	d8800a15 	stw	r2,40(sp)
    90c0:	003f8406 	br	8ed4 <___vfprintf_internal_r+0x2b0>
    90c4:	04000044 	movi	r16,1
    90c8:	8700080e 	bge	r16,fp,90ec <___vfprintf_internal_r+0x4c8>
    90cc:	d9001017 	ldw	r4,64(sp)
    90d0:	a00b883a 	mov	r5,r20
    90d4:	01800804 	movi	r6,32
    90d8:	e1ffffc4 	addi	r7,fp,-1
    90dc:	0008ba40 	call	8ba4 <print_repeat>
    90e0:	103fc71e 	bne	r2,zero,9000 <___vfprintf_internal_r+0x3dc>
    90e4:	e5c5883a 	add	r2,fp,r23
    90e8:	15ffffc4 	addi	r23,r2,-1
    90ec:	d8c01117 	ldw	r3,68(sp)
    90f0:	d9001017 	ldw	r4,64(sp)
    90f4:	800f883a 	mov	r7,r16
    90f8:	18800017 	ldw	r2,0(r3)
    90fc:	a0c00117 	ldw	r3,4(r20)
    9100:	a00b883a 	mov	r5,r20
    9104:	d8800005 	stb	r2,0(sp)
    9108:	d80d883a 	mov	r6,sp
    910c:	183ee83a 	callr	r3
    9110:	103fbb1e 	bne	r2,zero,9000 <___vfprintf_internal_r+0x3dc>
    9114:	d8801117 	ldw	r2,68(sp)
    9118:	bdc00044 	addi	r23,r23,1
    911c:	0021883a 	mov	r16,zero
    9120:	10800104 	addi	r2,r2,4
    9124:	d8801115 	stw	r2,68(sp)
    9128:	003ed606 	br	8c84 <___vfprintf_internal_r+0x60>
    912c:	00800204 	movi	r2,8
    9130:	d8800d15 	stw	r2,52(sp)
    9134:	d8000c15 	stw	zero,48(sp)
    9138:	003fb606 	br	9014 <___vfprintf_internal_r+0x3f0>
    913c:	d8c01117 	ldw	r3,68(sp)
    9140:	1cc00017 	ldw	r19,0(r3)
    9144:	9809883a 	mov	r4,r19
    9148:	0008b840 	call	8b84 <strlen>
    914c:	e0a1c83a 	sub	r16,fp,r2
    9150:	1023883a 	mov	r17,r2
    9154:	0400070e 	bge	zero,r16,9174 <___vfprintf_internal_r+0x550>
    9158:	d9001017 	ldw	r4,64(sp)
    915c:	a00b883a 	mov	r5,r20
    9160:	01800804 	movi	r6,32
    9164:	800f883a 	mov	r7,r16
    9168:	0008ba40 	call	8ba4 <print_repeat>
    916c:	103fa41e 	bne	r2,zero,9000 <___vfprintf_internal_r+0x3dc>
    9170:	bc2f883a 	add	r23,r23,r16
    9174:	a0c00117 	ldw	r3,4(r20)
    9178:	d9001017 	ldw	r4,64(sp)
    917c:	980d883a 	mov	r6,r19
    9180:	a00b883a 	mov	r5,r20
    9184:	880f883a 	mov	r7,r17
    9188:	183ee83a 	callr	r3
    918c:	103f9c1e 	bne	r2,zero,9000 <___vfprintf_internal_r+0x3dc>
    9190:	d8801117 	ldw	r2,68(sp)
    9194:	bc6f883a 	add	r23,r23,r17
    9198:	0021883a 	mov	r16,zero
    919c:	10800104 	addi	r2,r2,4
    91a0:	d8801115 	stw	r2,68(sp)
    91a4:	003eb706 	br	8c84 <___vfprintf_internal_r+0x60>
    91a8:	210015c4 	addi	r4,r4,87
    91ac:	003f5106 	br	8ef4 <___vfprintf_internal_r+0x2d0>
    91b0:	04003b16 	blt	zero,r16,92a0 <___vfprintf_internal_r+0x67c>
    91b4:	d8c00a17 	ldw	r3,40(sp)
    91b8:	1805003a 	cmpeq	r2,r3,zero
    91bc:	103f7f1e 	bne	r2,zero,8fbc <___vfprintf_internal_r+0x398>
    91c0:	a0c00117 	ldw	r3,4(r20)
    91c4:	d9001017 	ldw	r4,64(sp)
    91c8:	00800b44 	movi	r2,45
    91cc:	d8800005 	stb	r2,0(sp)
    91d0:	a00b883a 	mov	r5,r20
    91d4:	d80d883a 	mov	r6,sp
    91d8:	01c00044 	movi	r7,1
    91dc:	183ee83a 	callr	r3
    91e0:	103f871e 	bne	r2,zero,9000 <___vfprintf_internal_r+0x3dc>
    91e4:	b8800044 	addi	r2,r23,1
    91e8:	003f7506 	br	8fc0 <___vfprintf_internal_r+0x39c>
    91ec:	0007883a 	mov	r3,zero
    91f0:	003edb06 	br	8d60 <___vfprintf_internal_r+0x13c>
    91f4:	a0c00117 	ldw	r3,4(r20)
    91f8:	d9001017 	ldw	r4,64(sp)
    91fc:	d9400005 	stb	r5,0(sp)
    9200:	d80d883a 	mov	r6,sp
    9204:	a00b883a 	mov	r5,r20
    9208:	183ee83a 	callr	r3
    920c:	103f7c1e 	bne	r2,zero,9000 <___vfprintf_internal_r+0x3dc>
    9210:	bdc00044 	addi	r23,r23,1
    9214:	003e9b06 	br	8c84 <___vfprintf_internal_r+0x60>
    9218:	102f883a 	mov	r23,r2
    921c:	0021883a 	mov	r16,zero
    9220:	003e9806 	br	8c84 <___vfprintf_internal_r+0x60>
    9224:	a0c00117 	ldw	r3,4(r20)
    9228:	d9000005 	stb	r4,0(sp)
    922c:	d9001017 	ldw	r4,64(sp)
    9230:	a00b883a 	mov	r5,r20
    9234:	d80d883a 	mov	r6,sp
    9238:	800f883a 	mov	r7,r16
    923c:	183ee83a 	callr	r3
    9240:	103f6f1e 	bne	r2,zero,9000 <___vfprintf_internal_r+0x3dc>
    9244:	bc2f883a 	add	r23,r23,r16
    9248:	0021883a 	mov	r16,zero
    924c:	003e8d06 	br	8c84 <___vfprintf_internal_r+0x60>
    9250:	d9001017 	ldw	r4,64(sp)
    9254:	a00b883a 	mov	r5,r20
    9258:	01800c04 	movi	r6,48
    925c:	800f883a 	mov	r7,r16
    9260:	0008ba40 	call	8ba4 <print_repeat>
    9264:	103f661e 	bne	r2,zero,9000 <___vfprintf_internal_r+0x3dc>
    9268:	bc05883a 	add	r2,r23,r16
    926c:	003f5406 	br	8fc0 <___vfprintf_internal_r+0x39c>
    9270:	a0c00117 	ldw	r3,4(r20)
    9274:	d9001017 	ldw	r4,64(sp)
    9278:	00800b44 	movi	r2,45
    927c:	d8800005 	stb	r2,0(sp)
    9280:	a00b883a 	mov	r5,r20
    9284:	d80d883a 	mov	r6,sp
    9288:	01c00044 	movi	r7,1
    928c:	183ee83a 	callr	r3
    9290:	103f5b1e 	bne	r2,zero,9000 <___vfprintf_internal_r+0x3dc>
    9294:	bdc00044 	addi	r23,r23,1
    9298:	043f480e 	bge	zero,r16,8fbc <___vfprintf_internal_r+0x398>
    929c:	003fec06 	br	9250 <___vfprintf_internal_r+0x62c>
    92a0:	d9001017 	ldw	r4,64(sp)
    92a4:	a00b883a 	mov	r5,r20
    92a8:	01800804 	movi	r6,32
    92ac:	800f883a 	mov	r7,r16
    92b0:	0008ba40 	call	8ba4 <print_repeat>
    92b4:	103f521e 	bne	r2,zero,9000 <___vfprintf_internal_r+0x3dc>
    92b8:	bc2f883a 	add	r23,r23,r16
    92bc:	003fbd06 	br	91b4 <___vfprintf_internal_r+0x590>

000092c0 <__vfprintf_internal>:
    92c0:	00800074 	movhi	r2,1
    92c4:	10ac7204 	addi	r2,r2,-20024
    92c8:	2013883a 	mov	r9,r4
    92cc:	11000017 	ldw	r4,0(r2)
    92d0:	2805883a 	mov	r2,r5
    92d4:	300f883a 	mov	r7,r6
    92d8:	480b883a 	mov	r5,r9
    92dc:	100d883a 	mov	r6,r2
    92e0:	0008c241 	jmpi	8c24 <___vfprintf_internal_r>

000092e4 <__sfvwrite_small_dev>:
    92e4:	2880000b 	ldhu	r2,0(r5)
    92e8:	defffa04 	addi	sp,sp,-24
    92ec:	dcc00315 	stw	r19,12(sp)
    92f0:	1080020c 	andi	r2,r2,8
    92f4:	dc800215 	stw	r18,8(sp)
    92f8:	dc400115 	stw	r17,4(sp)
    92fc:	dfc00515 	stw	ra,20(sp)
    9300:	dd000415 	stw	r20,16(sp)
    9304:	dc000015 	stw	r16,0(sp)
    9308:	2825883a 	mov	r18,r5
    930c:	2027883a 	mov	r19,r4
    9310:	3023883a 	mov	r17,r6
    9314:	10002026 	beq	r2,zero,9398 <__sfvwrite_small_dev+0xb4>
    9318:	2940008f 	ldh	r5,2(r5)
    931c:	28000f16 	blt	r5,zero,935c <__sfvwrite_small_dev+0x78>
    9320:	01c01b0e 	bge	zero,r7,9390 <__sfvwrite_small_dev+0xac>
    9324:	3821883a 	mov	r16,r7
    9328:	05010004 	movi	r20,1024
    932c:	00000206 	br	9338 <__sfvwrite_small_dev+0x54>
    9330:	0400170e 	bge	zero,r16,9390 <__sfvwrite_small_dev+0xac>
    9334:	9140008f 	ldh	r5,2(r18)
    9338:	880d883a 	mov	r6,r17
    933c:	9809883a 	mov	r4,r19
    9340:	800f883a 	mov	r7,r16
    9344:	a400010e 	bge	r20,r16,934c <__sfvwrite_small_dev+0x68>
    9348:	01c10004 	movi	r7,1024
    934c:	00094b80 	call	94b8 <_write_r>
    9350:	88a3883a 	add	r17,r17,r2
    9354:	80a1c83a 	sub	r16,r16,r2
    9358:	00bff516 	blt	zero,r2,9330 <__sfvwrite_small_dev+0x4c>
    935c:	9080000b 	ldhu	r2,0(r18)
    9360:	00ffffc4 	movi	r3,-1
    9364:	10801014 	ori	r2,r2,64
    9368:	9080000d 	sth	r2,0(r18)
    936c:	1805883a 	mov	r2,r3
    9370:	dfc00517 	ldw	ra,20(sp)
    9374:	dd000417 	ldw	r20,16(sp)
    9378:	dcc00317 	ldw	r19,12(sp)
    937c:	dc800217 	ldw	r18,8(sp)
    9380:	dc400117 	ldw	r17,4(sp)
    9384:	dc000017 	ldw	r16,0(sp)
    9388:	dec00604 	addi	sp,sp,24
    938c:	f800283a 	ret
    9390:	0007883a 	mov	r3,zero
    9394:	003ff506 	br	936c <__sfvwrite_small_dev+0x88>
    9398:	00ffffc4 	movi	r3,-1
    939c:	003ff306 	br	936c <__sfvwrite_small_dev+0x88>

000093a0 <__sfvwrite_small_str>:
    93a0:	2900000b 	ldhu	r4,0(r5)
    93a4:	defffd04 	addi	sp,sp,-12
    93a8:	dc000015 	stw	r16,0(sp)
    93ac:	20ffffcc 	andi	r3,r4,65535
    93b0:	1880020c 	andi	r2,r3,8
    93b4:	2821883a 	mov	r16,r5
    93b8:	dfc00215 	stw	ra,8(sp)
    93bc:	dc400115 	stw	r17,4(sp)
    93c0:	300b883a 	mov	r5,r6
    93c4:	10001d26 	beq	r2,zero,943c <__sfvwrite_small_str+0x9c>
    93c8:	8080008f 	ldh	r2,2(r16)
    93cc:	1000190e 	bge	r2,zero,9434 <__sfvwrite_small_str+0x94>
    93d0:	1880800c 	andi	r2,r3,512
    93d4:	10001726 	beq	r2,zero,9434 <__sfvwrite_small_str+0x94>
    93d8:	81800517 	ldw	r6,20(r16)
    93dc:	31c0020e 	bge	r6,r7,93e8 <__sfvwrite_small_str+0x48>
    93e0:	1880200c 	andi	r2,r3,128
    93e4:	1000131e 	bne	r2,zero,9434 <__sfvwrite_small_str+0x94>
    93e8:	3023883a 	mov	r17,r6
    93ec:	3980010e 	bge	r7,r6,93f4 <__sfvwrite_small_str+0x54>
    93f0:	3823883a 	mov	r17,r7
    93f4:	81000417 	ldw	r4,16(r16)
    93f8:	880d883a 	mov	r6,r17
    93fc:	00094580 	call	9458 <memmove>
    9400:	80800417 	ldw	r2,16(r16)
    9404:	80c00517 	ldw	r3,20(r16)
    9408:	0009883a 	mov	r4,zero
    940c:	1445883a 	add	r2,r2,r17
    9410:	1c47c83a 	sub	r3,r3,r17
    9414:	80800415 	stw	r2,16(r16)
    9418:	2005883a 	mov	r2,r4
    941c:	80c00515 	stw	r3,20(r16)
    9420:	dfc00217 	ldw	ra,8(sp)
    9424:	dc400117 	ldw	r17,4(sp)
    9428:	dc000017 	ldw	r16,0(sp)
    942c:	dec00304 	addi	sp,sp,12
    9430:	f800283a 	ret
    9434:	20801014 	ori	r2,r4,64
    9438:	8080000d 	sth	r2,0(r16)
    943c:	013fffc4 	movi	r4,-1
    9440:	2005883a 	mov	r2,r4
    9444:	dfc00217 	ldw	ra,8(sp)
    9448:	dc400117 	ldw	r17,4(sp)
    944c:	dc000017 	ldw	r16,0(sp)
    9450:	dec00304 	addi	sp,sp,12
    9454:	f800283a 	ret

00009458 <memmove>:
    9458:	2011883a 	mov	r8,r4
    945c:	2900022e 	bgeu	r5,r4,9468 <memmove+0x10>
    9460:	2989883a 	add	r4,r5,r6
    9464:	41000a36 	bltu	r8,r4,9490 <memmove+0x38>
    9468:	30000726 	beq	r6,zero,9488 <memmove+0x30>
    946c:	000f883a 	mov	r7,zero
    9470:	29c5883a 	add	r2,r5,r7
    9474:	11000003 	ldbu	r4,0(r2)
    9478:	3a07883a 	add	r3,r7,r8
    947c:	39c00044 	addi	r7,r7,1
    9480:	19000005 	stb	r4,0(r3)
    9484:	31fffa1e 	bne	r6,r7,9470 <memmove+0x18>
    9488:	4005883a 	mov	r2,r8
    948c:	f800283a 	ret
    9490:	303ffd26 	beq	r6,zero,9488 <memmove+0x30>
    9494:	4187883a 	add	r3,r8,r6
    9498:	198dc83a 	sub	r6,r3,r6
    949c:	213fffc4 	addi	r4,r4,-1
    94a0:	20800003 	ldbu	r2,0(r4)
    94a4:	18ffffc4 	addi	r3,r3,-1
    94a8:	18800005 	stb	r2,0(r3)
    94ac:	19bffb1e 	bne	r3,r6,949c <memmove+0x44>
    94b0:	4005883a 	mov	r2,r8
    94b4:	f800283a 	ret

000094b8 <_write_r>:
    94b8:	defffd04 	addi	sp,sp,-12
    94bc:	dc000015 	stw	r16,0(sp)
    94c0:	04000074 	movhi	r16,1
    94c4:	842d2f04 	addi	r16,r16,-19268
    94c8:	dc400115 	stw	r17,4(sp)
    94cc:	80000015 	stw	zero,0(r16)
    94d0:	2023883a 	mov	r17,r4
    94d4:	2809883a 	mov	r4,r5
    94d8:	300b883a 	mov	r5,r6
    94dc:	380d883a 	mov	r6,r7
    94e0:	dfc00215 	stw	ra,8(sp)
    94e4:	000983c0 	call	983c <write>
    94e8:	1007883a 	mov	r3,r2
    94ec:	00bfffc4 	movi	r2,-1
    94f0:	18800626 	beq	r3,r2,950c <_write_r+0x54>
    94f4:	1805883a 	mov	r2,r3
    94f8:	dfc00217 	ldw	ra,8(sp)
    94fc:	dc400117 	ldw	r17,4(sp)
    9500:	dc000017 	ldw	r16,0(sp)
    9504:	dec00304 	addi	sp,sp,12
    9508:	f800283a 	ret
    950c:	80800017 	ldw	r2,0(r16)
    9510:	103ff826 	beq	r2,zero,94f4 <_write_r+0x3c>
    9514:	88800015 	stw	r2,0(r17)
    9518:	1805883a 	mov	r2,r3
    951c:	dfc00217 	ldw	ra,8(sp)
    9520:	dc400117 	ldw	r17,4(sp)
    9524:	dc000017 	ldw	r16,0(sp)
    9528:	dec00304 	addi	sp,sp,12
    952c:	f800283a 	ret

00009530 <udivmodsi4>:
    9530:	29001b2e 	bgeu	r5,r4,95a0 <udivmodsi4+0x70>
    9534:	28001a16 	blt	r5,zero,95a0 <udivmodsi4+0x70>
    9538:	00800044 	movi	r2,1
    953c:	0007883a 	mov	r3,zero
    9540:	01c007c4 	movi	r7,31
    9544:	00000306 	br	9554 <udivmodsi4+0x24>
    9548:	19c01326 	beq	r3,r7,9598 <udivmodsi4+0x68>
    954c:	18c00044 	addi	r3,r3,1
    9550:	28000416 	blt	r5,zero,9564 <udivmodsi4+0x34>
    9554:	294b883a 	add	r5,r5,r5
    9558:	1085883a 	add	r2,r2,r2
    955c:	293ffa36 	bltu	r5,r4,9548 <udivmodsi4+0x18>
    9560:	10000d26 	beq	r2,zero,9598 <udivmodsi4+0x68>
    9564:	0007883a 	mov	r3,zero
    9568:	21400236 	bltu	r4,r5,9574 <udivmodsi4+0x44>
    956c:	2149c83a 	sub	r4,r4,r5
    9570:	1886b03a 	or	r3,r3,r2
    9574:	1004d07a 	srli	r2,r2,1
    9578:	280ad07a 	srli	r5,r5,1
    957c:	103ffa1e 	bne	r2,zero,9568 <udivmodsi4+0x38>
    9580:	30000226 	beq	r6,zero,958c <udivmodsi4+0x5c>
    9584:	2005883a 	mov	r2,r4
    9588:	f800283a 	ret
    958c:	1809883a 	mov	r4,r3
    9590:	2005883a 	mov	r2,r4
    9594:	f800283a 	ret
    9598:	0007883a 	mov	r3,zero
    959c:	003ff806 	br	9580 <udivmodsi4+0x50>
    95a0:	00800044 	movi	r2,1
    95a4:	0007883a 	mov	r3,zero
    95a8:	003fef06 	br	9568 <udivmodsi4+0x38>

000095ac <__divsi3>:
    95ac:	defffe04 	addi	sp,sp,-8
    95b0:	dc000015 	stw	r16,0(sp)
    95b4:	dfc00115 	stw	ra,4(sp)
    95b8:	0021883a 	mov	r16,zero
    95bc:	20000c16 	blt	r4,zero,95f0 <__divsi3+0x44>
    95c0:	000d883a 	mov	r6,zero
    95c4:	28000e16 	blt	r5,zero,9600 <__divsi3+0x54>
    95c8:	00095300 	call	9530 <udivmodsi4>
    95cc:	1007883a 	mov	r3,r2
    95d0:	8005003a 	cmpeq	r2,r16,zero
    95d4:	1000011e 	bne	r2,zero,95dc <__divsi3+0x30>
    95d8:	00c7c83a 	sub	r3,zero,r3
    95dc:	1805883a 	mov	r2,r3
    95e0:	dfc00117 	ldw	ra,4(sp)
    95e4:	dc000017 	ldw	r16,0(sp)
    95e8:	dec00204 	addi	sp,sp,8
    95ec:	f800283a 	ret
    95f0:	0109c83a 	sub	r4,zero,r4
    95f4:	04000044 	movi	r16,1
    95f8:	000d883a 	mov	r6,zero
    95fc:	283ff20e 	bge	r5,zero,95c8 <__divsi3+0x1c>
    9600:	014bc83a 	sub	r5,zero,r5
    9604:	8021003a 	cmpeq	r16,r16,zero
    9608:	003fef06 	br	95c8 <__divsi3+0x1c>

0000960c <__modsi3>:
    960c:	deffff04 	addi	sp,sp,-4
    9610:	dfc00015 	stw	ra,0(sp)
    9614:	01800044 	movi	r6,1
    9618:	2807883a 	mov	r3,r5
    961c:	20000416 	blt	r4,zero,9630 <__modsi3+0x24>
    9620:	28000c16 	blt	r5,zero,9654 <__modsi3+0x48>
    9624:	dfc00017 	ldw	ra,0(sp)
    9628:	dec00104 	addi	sp,sp,4
    962c:	00095301 	jmpi	9530 <udivmodsi4>
    9630:	0109c83a 	sub	r4,zero,r4
    9634:	28000b16 	blt	r5,zero,9664 <__modsi3+0x58>
    9638:	180b883a 	mov	r5,r3
    963c:	01800044 	movi	r6,1
    9640:	00095300 	call	9530 <udivmodsi4>
    9644:	0085c83a 	sub	r2,zero,r2
    9648:	dfc00017 	ldw	ra,0(sp)
    964c:	dec00104 	addi	sp,sp,4
    9650:	f800283a 	ret
    9654:	014bc83a 	sub	r5,zero,r5
    9658:	dfc00017 	ldw	ra,0(sp)
    965c:	dec00104 	addi	sp,sp,4
    9660:	00095301 	jmpi	9530 <udivmodsi4>
    9664:	0147c83a 	sub	r3,zero,r5
    9668:	003ff306 	br	9638 <__modsi3+0x2c>

0000966c <__udivsi3>:
    966c:	000d883a 	mov	r6,zero
    9670:	00095301 	jmpi	9530 <udivmodsi4>

00009674 <__umodsi3>:
    9674:	01800044 	movi	r6,1
    9678:	00095301 	jmpi	9530 <udivmodsi4>

0000967c <__mulsi3>:
    967c:	20000a26 	beq	r4,zero,96a8 <__mulsi3+0x2c>
    9680:	0007883a 	mov	r3,zero
    9684:	2080004c 	andi	r2,r4,1
    9688:	1005003a 	cmpeq	r2,r2,zero
    968c:	2008d07a 	srli	r4,r4,1
    9690:	1000011e 	bne	r2,zero,9698 <__mulsi3+0x1c>
    9694:	1947883a 	add	r3,r3,r5
    9698:	294b883a 	add	r5,r5,r5
    969c:	203ff91e 	bne	r4,zero,9684 <__mulsi3+0x8>
    96a0:	1805883a 	mov	r2,r3
    96a4:	f800283a 	ret
    96a8:	0007883a 	mov	r3,zero
    96ac:	1805883a 	mov	r2,r3
    96b0:	f800283a 	ret

000096b4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    96b4:	defffe04 	addi	sp,sp,-8
    96b8:	dfc00115 	stw	ra,4(sp)
    96bc:	df000015 	stw	fp,0(sp)
    96c0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    96c4:	01000074 	movhi	r4,1
    96c8:	212c7a04 	addi	r4,r4,-19992
    96cc:	01400074 	movhi	r5,1
    96d0:	296bc504 	addi	r5,r5,-20716
    96d4:	01800074 	movhi	r6,1
    96d8:	31ac7a04 	addi	r6,r6,-19992
    96dc:	00097340 	call	9734 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    96e0:	01000074 	movhi	r4,1
    96e4:	21200804 	addi	r4,r4,-32736
    96e8:	01400074 	movhi	r5,1
    96ec:	29600804 	addi	r5,r5,-32736
    96f0:	01800074 	movhi	r6,1
    96f4:	31a00804 	addi	r6,r6,-32736
    96f8:	00097340 	call	9734 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    96fc:	01000074 	movhi	r4,1
    9700:	212b4004 	addi	r4,r4,-21248
    9704:	01400074 	movhi	r5,1
    9708:	296b4004 	addi	r5,r5,-21248
    970c:	01800074 	movhi	r6,1
    9710:	31abc504 	addi	r6,r6,-20716
    9714:	00097340 	call	9734 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    9718:	0009f700 	call	9f70 <alt_dcache_flush_all>
  alt_icache_flush_all();
    971c:	000a1940 	call	a194 <alt_icache_flush_all>
}
    9720:	e037883a 	mov	sp,fp
    9724:	dfc00117 	ldw	ra,4(sp)
    9728:	df000017 	ldw	fp,0(sp)
    972c:	dec00204 	addi	sp,sp,8
    9730:	f800283a 	ret

00009734 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    9734:	defffc04 	addi	sp,sp,-16
    9738:	df000315 	stw	fp,12(sp)
    973c:	df000304 	addi	fp,sp,12
    9740:	e13ffd15 	stw	r4,-12(fp)
    9744:	e17ffe15 	stw	r5,-8(fp)
    9748:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    974c:	e0fffe17 	ldw	r3,-8(fp)
    9750:	e0bffd17 	ldw	r2,-12(fp)
    9754:	18800e26 	beq	r3,r2,9790 <alt_load_section+0x5c>
  {
    while( to != end )
    9758:	00000a06 	br	9784 <alt_load_section+0x50>
    {
      *to++ = *from++;
    975c:	e0bffd17 	ldw	r2,-12(fp)
    9760:	10c00017 	ldw	r3,0(r2)
    9764:	e0bffe17 	ldw	r2,-8(fp)
    9768:	10c00015 	stw	r3,0(r2)
    976c:	e0bffe17 	ldw	r2,-8(fp)
    9770:	10800104 	addi	r2,r2,4
    9774:	e0bffe15 	stw	r2,-8(fp)
    9778:	e0bffd17 	ldw	r2,-12(fp)
    977c:	10800104 	addi	r2,r2,4
    9780:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    9784:	e0fffe17 	ldw	r3,-8(fp)
    9788:	e0bfff17 	ldw	r2,-4(fp)
    978c:	18bff31e 	bne	r3,r2,975c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    9790:	e037883a 	mov	sp,fp
    9794:	df000017 	ldw	fp,0(sp)
    9798:	dec00104 	addi	sp,sp,4
    979c:	f800283a 	ret

000097a0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    97a0:	defffd04 	addi	sp,sp,-12
    97a4:	dfc00215 	stw	ra,8(sp)
    97a8:	df000115 	stw	fp,4(sp)
    97ac:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    97b0:	0009883a 	mov	r4,zero
    97b4:	00099c00 	call	99c0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    97b8:	00099f40 	call	99f4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    97bc:	01000074 	movhi	r4,1
    97c0:	212bb804 	addi	r4,r4,-20768
    97c4:	01400074 	movhi	r5,1
    97c8:	296bb804 	addi	r5,r5,-20768
    97cc:	01800074 	movhi	r6,1
    97d0:	31abb804 	addi	r6,r6,-20768
    97d4:	000a2880 	call	a288 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    97d8:	000a0cc0 	call	a0cc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    97dc:	01000074 	movhi	r4,1
    97e0:	21284c04 	addi	r4,r4,-24272
    97e4:	000a9000 	call	a900 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    97e8:	d120be17 	ldw	r4,-32008(gp)
    97ec:	d160bf17 	ldw	r5,-32004(gp)
    97f0:	d1a0c017 	ldw	r6,-32000(gp)
    97f4:	00084cc0 	call	84cc <main>
    97f8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    97fc:	01000044 	movi	r4,1
    9800:	0009e100 	call	9e10 <close>
  exit (result);
    9804:	e13fff17 	ldw	r4,-4(fp)
    9808:	000a9140 	call	a914 <exit>

0000980c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    980c:	defffd04 	addi	sp,sp,-12
    9810:	dfc00215 	stw	ra,8(sp)
    9814:	df000115 	stw	fp,4(sp)
    9818:	df000104 	addi	fp,sp,4
    981c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    9820:	e13fff17 	ldw	r4,-4(fp)
    9824:	0009cb40 	call	9cb4 <alt_busy_sleep>
}
    9828:	e037883a 	mov	sp,fp
    982c:	dfc00117 	ldw	ra,4(sp)
    9830:	df000017 	ldw	fp,0(sp)
    9834:	dec00204 	addi	sp,sp,8
    9838:	f800283a 	ret

0000983c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    983c:	defff704 	addi	sp,sp,-36
    9840:	dfc00815 	stw	ra,32(sp)
    9844:	df000715 	stw	fp,28(sp)
    9848:	df000704 	addi	fp,sp,28
    984c:	e13ffb15 	stw	r4,-20(fp)
    9850:	e17ffc15 	stw	r5,-16(fp)
    9854:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9858:	e0bffb17 	ldw	r2,-20(fp)
    985c:	1004803a 	cmplt	r2,r2,zero
    9860:	1000091e 	bne	r2,zero,9888 <write+0x4c>
    9864:	e13ffb17 	ldw	r4,-20(fp)
    9868:	01400304 	movi	r5,12
    986c:	000967c0 	call	967c <__mulsi3>
    9870:	1007883a 	mov	r3,r2
    9874:	00800074 	movhi	r2,1
    9878:	10ac1204 	addi	r2,r2,-20408
    987c:	1887883a 	add	r3,r3,r2
    9880:	e0ffff15 	stw	r3,-4(fp)
    9884:	00000106 	br	988c <write+0x50>
    9888:	e03fff15 	stw	zero,-4(fp)
    988c:	e0bfff17 	ldw	r2,-4(fp)
    9890:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    9894:	e0bffa17 	ldw	r2,-24(fp)
    9898:	1005003a 	cmpeq	r2,r2,zero
    989c:	1000241e 	bne	r2,zero,9930 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    98a0:	e0bffa17 	ldw	r2,-24(fp)
    98a4:	10800217 	ldw	r2,8(r2)
    98a8:	108000cc 	andi	r2,r2,3
    98ac:	1005003a 	cmpeq	r2,r2,zero
    98b0:	10001a1e 	bne	r2,zero,991c <write+0xe0>
    98b4:	e0bffa17 	ldw	r2,-24(fp)
    98b8:	10800017 	ldw	r2,0(r2)
    98bc:	10800617 	ldw	r2,24(r2)
    98c0:	1005003a 	cmpeq	r2,r2,zero
    98c4:	1000151e 	bne	r2,zero,991c <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    98c8:	e0bffa17 	ldw	r2,-24(fp)
    98cc:	10800017 	ldw	r2,0(r2)
    98d0:	10800617 	ldw	r2,24(r2)
    98d4:	e17ffc17 	ldw	r5,-16(fp)
    98d8:	e1bffd17 	ldw	r6,-12(fp)
    98dc:	e13ffa17 	ldw	r4,-24(fp)
    98e0:	103ee83a 	callr	r2
    98e4:	e0bff915 	stw	r2,-28(fp)
    98e8:	e0bff917 	ldw	r2,-28(fp)
    98ec:	1004403a 	cmpge	r2,r2,zero
    98f0:	1000071e 	bne	r2,zero,9910 <write+0xd4>
      {
        ALT_ERRNO = -rval;
    98f4:	00099600 	call	9960 <alt_get_errno>
    98f8:	e0fff917 	ldw	r3,-28(fp)
    98fc:	00c7c83a 	sub	r3,zero,r3
    9900:	10c00015 	stw	r3,0(r2)
        return -1;
    9904:	00bfffc4 	movi	r2,-1
    9908:	e0bffe15 	stw	r2,-8(fp)
    990c:	00000e06 	br	9948 <write+0x10c>
      }
      return rval;
    9910:	e0bff917 	ldw	r2,-28(fp)
    9914:	e0bffe15 	stw	r2,-8(fp)
    9918:	00000b06 	br	9948 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
    991c:	00099600 	call	9960 <alt_get_errno>
    9920:	1007883a 	mov	r3,r2
    9924:	00800344 	movi	r2,13
    9928:	18800015 	stw	r2,0(r3)
    992c:	00000406 	br	9940 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    9930:	00099600 	call	9960 <alt_get_errno>
    9934:	1007883a 	mov	r3,r2
    9938:	00801444 	movi	r2,81
    993c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    9940:	00bfffc4 	movi	r2,-1
    9944:	e0bffe15 	stw	r2,-8(fp)
    9948:	e0bffe17 	ldw	r2,-8(fp)
}
    994c:	e037883a 	mov	sp,fp
    9950:	dfc00117 	ldw	ra,4(sp)
    9954:	df000017 	ldw	fp,0(sp)
    9958:	dec00204 	addi	sp,sp,8
    995c:	f800283a 	ret

00009960 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9960:	defffd04 	addi	sp,sp,-12
    9964:	dfc00215 	stw	ra,8(sp)
    9968:	df000115 	stw	fp,4(sp)
    996c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9970:	00800074 	movhi	r2,1
    9974:	10ac7904 	addi	r2,r2,-19996
    9978:	10800017 	ldw	r2,0(r2)
    997c:	1005003a 	cmpeq	r2,r2,zero
    9980:	1000061e 	bne	r2,zero,999c <alt_get_errno+0x3c>
    9984:	00800074 	movhi	r2,1
    9988:	10ac7904 	addi	r2,r2,-19996
    998c:	10800017 	ldw	r2,0(r2)
    9990:	103ee83a 	callr	r2
    9994:	e0bfff15 	stw	r2,-4(fp)
    9998:	00000306 	br	99a8 <alt_get_errno+0x48>
    999c:	00800074 	movhi	r2,1
    99a0:	10ad2f04 	addi	r2,r2,-19268
    99a4:	e0bfff15 	stw	r2,-4(fp)
    99a8:	e0bfff17 	ldw	r2,-4(fp)
}
    99ac:	e037883a 	mov	sp,fp
    99b0:	dfc00117 	ldw	ra,4(sp)
    99b4:	df000017 	ldw	fp,0(sp)
    99b8:	dec00204 	addi	sp,sp,8
    99bc:	f800283a 	ret

000099c0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    99c0:	defffd04 	addi	sp,sp,-12
    99c4:	dfc00215 	stw	ra,8(sp)
    99c8:	df000115 	stw	fp,4(sp)
    99cc:	df000104 	addi	fp,sp,4
    99d0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    99d4:	000a65c0 	call	a65c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    99d8:	00800044 	movi	r2,1
    99dc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    99e0:	e037883a 	mov	sp,fp
    99e4:	dfc00117 	ldw	ra,4(sp)
    99e8:	df000017 	ldw	fp,0(sp)
    99ec:	dec00204 	addi	sp,sp,8
    99f0:	f800283a 	ret

000099f4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    99f4:	defffe04 	addi	sp,sp,-8
    99f8:	dfc00115 	stw	ra,4(sp)
    99fc:	df000015 	stw	fp,0(sp)
    9a00:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    9a04:	01000074 	movhi	r4,1
    9a08:	212bfd04 	addi	r4,r4,-20492
    9a0c:	0009a240 	call	9a24 <alt_dev_reg>
}
    9a10:	e037883a 	mov	sp,fp
    9a14:	dfc00117 	ldw	ra,4(sp)
    9a18:	df000017 	ldw	fp,0(sp)
    9a1c:	dec00204 	addi	sp,sp,8
    9a20:	f800283a 	ret

00009a24 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    9a24:	defffd04 	addi	sp,sp,-12
    9a28:	dfc00215 	stw	ra,8(sp)
    9a2c:	df000115 	stw	fp,4(sp)
    9a30:	df000104 	addi	fp,sp,4
    9a34:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    9a38:	e13fff17 	ldw	r4,-4(fp)
    9a3c:	01400074 	movhi	r5,1
    9a40:	296c7604 	addi	r5,r5,-20008
    9a44:	0009fb80 	call	9fb8 <alt_dev_llist_insert>
}
    9a48:	e037883a 	mov	sp,fp
    9a4c:	dfc00117 	ldw	ra,4(sp)
    9a50:	df000017 	ldw	fp,0(sp)
    9a54:	dec00204 	addi	sp,sp,8
    9a58:	f800283a 	ret

00009a5c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    9a5c:	defffa04 	addi	sp,sp,-24
    9a60:	dfc00515 	stw	ra,20(sp)
    9a64:	df000415 	stw	fp,16(sp)
    9a68:	df000404 	addi	fp,sp,16
    9a6c:	e13ffd15 	stw	r4,-12(fp)
    9a70:	e17ffe15 	stw	r5,-8(fp)
    9a74:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9a78:	e0bffd17 	ldw	r2,-12(fp)
    9a7c:	10800017 	ldw	r2,0(r2)
    9a80:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    9a84:	e0bffc17 	ldw	r2,-16(fp)
    9a88:	11000a04 	addi	r4,r2,40
    9a8c:	e0bffd17 	ldw	r2,-12(fp)
    9a90:	11c00217 	ldw	r7,8(r2)
    9a94:	e17ffe17 	ldw	r5,-8(fp)
    9a98:	e1bfff17 	ldw	r6,-4(fp)
    9a9c:	0009b0c0 	call	9b0c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    9aa0:	e037883a 	mov	sp,fp
    9aa4:	dfc00117 	ldw	ra,4(sp)
    9aa8:	df000017 	ldw	fp,0(sp)
    9aac:	dec00204 	addi	sp,sp,8
    9ab0:	f800283a 	ret

00009ab4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    9ab4:	defffa04 	addi	sp,sp,-24
    9ab8:	dfc00515 	stw	ra,20(sp)
    9abc:	df000415 	stw	fp,16(sp)
    9ac0:	df000404 	addi	fp,sp,16
    9ac4:	e13ffd15 	stw	r4,-12(fp)
    9ac8:	e17ffe15 	stw	r5,-8(fp)
    9acc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9ad0:	e0bffd17 	ldw	r2,-12(fp)
    9ad4:	10800017 	ldw	r2,0(r2)
    9ad8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    9adc:	e0bffc17 	ldw	r2,-16(fp)
    9ae0:	11000a04 	addi	r4,r2,40
    9ae4:	e0bffd17 	ldw	r2,-12(fp)
    9ae8:	11c00217 	ldw	r7,8(r2)
    9aec:	e17ffe17 	ldw	r5,-8(fp)
    9af0:	e1bfff17 	ldw	r6,-4(fp)
    9af4:	0009c100 	call	9c10 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    9af8:	e037883a 	mov	sp,fp
    9afc:	dfc00117 	ldw	ra,4(sp)
    9b00:	df000017 	ldw	fp,0(sp)
    9b04:	dec00204 	addi	sp,sp,8
    9b08:	f800283a 	ret

00009b0c <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    9b0c:	defff604 	addi	sp,sp,-40
    9b10:	df000915 	stw	fp,36(sp)
    9b14:	df000904 	addi	fp,sp,36
    9b18:	e13ffb15 	stw	r4,-20(fp)
    9b1c:	e17ffc15 	stw	r5,-16(fp)
    9b20:	e1bffd15 	stw	r6,-12(fp)
    9b24:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
    9b28:	e0bffb17 	ldw	r2,-20(fp)
    9b2c:	10800017 	ldw	r2,0(r2)
    9b30:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
    9b34:	e0bffc17 	ldw	r2,-16(fp)
    9b38:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
    9b3c:	e0bffd17 	ldw	r2,-12(fp)
    9b40:	1007883a 	mov	r3,r2
    9b44:	e0bffc17 	ldw	r2,-16(fp)
    9b48:	10c5883a 	add	r2,r2,r3
    9b4c:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
    9b50:	00001606 	br	9bac <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    9b54:	e0bffa17 	ldw	r2,-24(fp)
    9b58:	10800037 	ldwio	r2,0(r2)
    9b5c:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    9b60:	e0bff717 	ldw	r2,-36(fp)
    9b64:	10a0000c 	andi	r2,r2,32768
    9b68:	1005003a 	cmpeq	r2,r2,zero
    9b6c:	1000081e 	bne	r2,zero,9b90 <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    9b70:	e0bff717 	ldw	r2,-36(fp)
    9b74:	1007883a 	mov	r3,r2
    9b78:	e0bff917 	ldw	r2,-28(fp)
    9b7c:	10c00005 	stb	r3,0(r2)
    9b80:	e0bff917 	ldw	r2,-28(fp)
    9b84:	10800044 	addi	r2,r2,1
    9b88:	e0bff915 	stw	r2,-28(fp)
    9b8c:	00000706 	br	9bac <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
    9b90:	e0fff917 	ldw	r3,-28(fp)
    9b94:	e0bffc17 	ldw	r2,-16(fp)
    9b98:	1880071e 	bne	r3,r2,9bb8 <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
    9b9c:	e0bffe17 	ldw	r2,-8(fp)
    9ba0:	1090000c 	andi	r2,r2,16384
    9ba4:	1004c03a 	cmpne	r2,r2,zero
    9ba8:	1000031e 	bne	r2,zero,9bb8 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    9bac:	e0fff917 	ldw	r3,-28(fp)
    9bb0:	e0bff817 	ldw	r2,-32(fp)
    9bb4:	18bfe736 	bltu	r3,r2,9b54 <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
    9bb8:	e0fff917 	ldw	r3,-28(fp)
    9bbc:	e0bffc17 	ldw	r2,-16(fp)
    9bc0:	18800526 	beq	r3,r2,9bd8 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    9bc4:	e0fff917 	ldw	r3,-28(fp)
    9bc8:	e0bffc17 	ldw	r2,-16(fp)
    9bcc:	1887c83a 	sub	r3,r3,r2
    9bd0:	e0ffff15 	stw	r3,-4(fp)
    9bd4:	00000906 	br	9bfc <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
    9bd8:	e0bffe17 	ldw	r2,-8(fp)
    9bdc:	1090000c 	andi	r2,r2,16384
    9be0:	1005003a 	cmpeq	r2,r2,zero
    9be4:	1000031e 	bne	r2,zero,9bf4 <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
    9be8:	00bffd44 	movi	r2,-11
    9bec:	e0bfff15 	stw	r2,-4(fp)
    9bf0:	00000206 	br	9bfc <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
    9bf4:	00bffec4 	movi	r2,-5
    9bf8:	e0bfff15 	stw	r2,-4(fp)
    9bfc:	e0bfff17 	ldw	r2,-4(fp)
}
    9c00:	e037883a 	mov	sp,fp
    9c04:	df000017 	ldw	fp,0(sp)
    9c08:	dec00104 	addi	sp,sp,4
    9c0c:	f800283a 	ret

00009c10 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    9c10:	defff904 	addi	sp,sp,-28
    9c14:	df000615 	stw	fp,24(sp)
    9c18:	df000604 	addi	fp,sp,24
    9c1c:	e13ffc15 	stw	r4,-16(fp)
    9c20:	e17ffd15 	stw	r5,-12(fp)
    9c24:	e1bffe15 	stw	r6,-8(fp)
    9c28:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    9c2c:	e0bffc17 	ldw	r2,-16(fp)
    9c30:	10800017 	ldw	r2,0(r2)
    9c34:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
    9c38:	e0bffe17 	ldw	r2,-8(fp)
    9c3c:	1007883a 	mov	r3,r2
    9c40:	e0bffd17 	ldw	r2,-12(fp)
    9c44:	10c5883a 	add	r2,r2,r3
    9c48:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    9c4c:	00001106 	br	9c94 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    9c50:	e0bffb17 	ldw	r2,-20(fp)
    9c54:	10800104 	addi	r2,r2,4
    9c58:	10800037 	ldwio	r2,0(r2)
    9c5c:	10bfffec 	andhi	r2,r2,65535
    9c60:	1005003a 	cmpeq	r2,r2,zero
    9c64:	10000b1e 	bne	r2,zero,9c94 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    9c68:	e13ffb17 	ldw	r4,-20(fp)
    9c6c:	e0bffd17 	ldw	r2,-12(fp)
    9c70:	10800003 	ldbu	r2,0(r2)
    9c74:	10c03fcc 	andi	r3,r2,255
    9c78:	18c0201c 	xori	r3,r3,128
    9c7c:	18ffe004 	addi	r3,r3,-128
    9c80:	e0bffd17 	ldw	r2,-12(fp)
    9c84:	10800044 	addi	r2,r2,1
    9c88:	e0bffd15 	stw	r2,-12(fp)
    9c8c:	2005883a 	mov	r2,r4
    9c90:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    9c94:	e0fffd17 	ldw	r3,-12(fp)
    9c98:	e0bffa17 	ldw	r2,-24(fp)
    9c9c:	18bfec36 	bltu	r3,r2,9c50 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    9ca0:	e0bffe17 	ldw	r2,-8(fp)
}
    9ca4:	e037883a 	mov	sp,fp
    9ca8:	df000017 	ldw	fp,0(sp)
    9cac:	dec00104 	addi	sp,sp,4
    9cb0:	f800283a 	ret

00009cb4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    9cb4:	defffa04 	addi	sp,sp,-24
    9cb8:	dfc00515 	stw	ra,20(sp)
    9cbc:	df000415 	stw	fp,16(sp)
    9cc0:	df000404 	addi	fp,sp,16
    9cc4:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    9cc8:	00800244 	movi	r2,9
    9ccc:	e0bffc15 	stw	r2,-16(fp)
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    9cd0:	e13ffc17 	ldw	r4,-16(fp)
    9cd4:	014003f4 	movhi	r5,15
    9cd8:	29509004 	addi	r5,r5,16960
    9cdc:	000967c0 	call	967c <__mulsi3>
    9ce0:	100b883a 	mov	r5,r2
    9ce4:	0100bef4 	movhi	r4,763
    9ce8:	213c2004 	addi	r4,r4,-3968
    9cec:	000966c0 	call	966c <__udivsi3>
    9cf0:	100b883a 	mov	r5,r2
    9cf4:	01200034 	movhi	r4,32768
    9cf8:	213fffc4 	addi	r4,r4,-1
    9cfc:	000966c0 	call	966c <__udivsi3>
    9d00:	100b883a 	mov	r5,r2
    9d04:	e13fff17 	ldw	r4,-4(fp)
    9d08:	000966c0 	call	966c <__udivsi3>
    9d0c:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    9d10:	e0bffd17 	ldw	r2,-12(fp)
    9d14:	1005003a 	cmpeq	r2,r2,zero
    9d18:	10002a1e 	bne	r2,zero,9dc4 <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
    9d1c:	e03ffe15 	stw	zero,-8(fp)
    9d20:	00001706 	br	9d80 <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    9d24:	00a00034 	movhi	r2,32768
    9d28:	10bfffc4 	addi	r2,r2,-1
    9d2c:	10bfffc4 	addi	r2,r2,-1
    9d30:	103ffe1e 	bne	r2,zero,9d2c <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    9d34:	e13ffc17 	ldw	r4,-16(fp)
    9d38:	014003f4 	movhi	r5,15
    9d3c:	29509004 	addi	r5,r5,16960
    9d40:	000967c0 	call	967c <__mulsi3>
    9d44:	100b883a 	mov	r5,r2
    9d48:	0100bef4 	movhi	r4,763
    9d4c:	213c2004 	addi	r4,r4,-3968
    9d50:	000966c0 	call	966c <__udivsi3>
    9d54:	100b883a 	mov	r5,r2
    9d58:	01200034 	movhi	r4,32768
    9d5c:	213fffc4 	addi	r4,r4,-1
    9d60:	000966c0 	call	966c <__udivsi3>
    9d64:	1007883a 	mov	r3,r2
    9d68:	e0bfff17 	ldw	r2,-4(fp)
    9d6c:	10c5c83a 	sub	r2,r2,r3
    9d70:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    9d74:	e0bffe17 	ldw	r2,-8(fp)
    9d78:	10800044 	addi	r2,r2,1
    9d7c:	e0bffe15 	stw	r2,-8(fp)
    9d80:	e0fffe17 	ldw	r3,-8(fp)
    9d84:	e0bffd17 	ldw	r2,-12(fp)
    9d88:	18bfe616 	blt	r3,r2,9d24 <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    9d8c:	e13ffc17 	ldw	r4,-16(fp)
    9d90:	014003f4 	movhi	r5,15
    9d94:	29509004 	addi	r5,r5,16960
    9d98:	000967c0 	call	967c <__mulsi3>
    9d9c:	100b883a 	mov	r5,r2
    9da0:	0100bef4 	movhi	r4,763
    9da4:	213c2004 	addi	r4,r4,-3968
    9da8:	000966c0 	call	966c <__udivsi3>
    9dac:	1009883a 	mov	r4,r2
    9db0:	e17fff17 	ldw	r5,-4(fp)
    9db4:	000967c0 	call	967c <__mulsi3>
    9db8:	10bfffc4 	addi	r2,r2,-1
    9dbc:	103ffe1e 	bne	r2,zero,9db8 <alt_busy_sleep+0x104>
    9dc0:	00000d06 	br	9df8 <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    9dc4:	e13ffc17 	ldw	r4,-16(fp)
    9dc8:	014003f4 	movhi	r5,15
    9dcc:	29509004 	addi	r5,r5,16960
    9dd0:	000967c0 	call	967c <__mulsi3>
    9dd4:	100b883a 	mov	r5,r2
    9dd8:	0100bef4 	movhi	r4,763
    9ddc:	213c2004 	addi	r4,r4,-3968
    9de0:	000966c0 	call	966c <__udivsi3>
    9de4:	1009883a 	mov	r4,r2
    9de8:	e17fff17 	ldw	r5,-4(fp)
    9dec:	000967c0 	call	967c <__mulsi3>
    9df0:	10bfffc4 	addi	r2,r2,-1
    9df4:	00bffe16 	blt	zero,r2,9df0 <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    9df8:	0005883a 	mov	r2,zero
}
    9dfc:	e037883a 	mov	sp,fp
    9e00:	dfc00117 	ldw	ra,4(sp)
    9e04:	df000017 	ldw	fp,0(sp)
    9e08:	dec00204 	addi	sp,sp,8
    9e0c:	f800283a 	ret

00009e10 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9e10:	defff804 	addi	sp,sp,-32
    9e14:	dfc00715 	stw	ra,28(sp)
    9e18:	df000615 	stw	fp,24(sp)
    9e1c:	df000604 	addi	fp,sp,24
    9e20:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9e24:	e0bffc17 	ldw	r2,-16(fp)
    9e28:	1004803a 	cmplt	r2,r2,zero
    9e2c:	1000091e 	bne	r2,zero,9e54 <close+0x44>
    9e30:	e13ffc17 	ldw	r4,-16(fp)
    9e34:	01400304 	movi	r5,12
    9e38:	000967c0 	call	967c <__mulsi3>
    9e3c:	1007883a 	mov	r3,r2
    9e40:	00800074 	movhi	r2,1
    9e44:	10ac1204 	addi	r2,r2,-20408
    9e48:	1887883a 	add	r3,r3,r2
    9e4c:	e0ffff15 	stw	r3,-4(fp)
    9e50:	00000106 	br	9e58 <close+0x48>
    9e54:	e03fff15 	stw	zero,-4(fp)
    9e58:	e0bfff17 	ldw	r2,-4(fp)
    9e5c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    9e60:	e0bffb17 	ldw	r2,-20(fp)
    9e64:	1005003a 	cmpeq	r2,r2,zero
    9e68:	10001d1e 	bne	r2,zero,9ee0 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9e6c:	e0bffb17 	ldw	r2,-20(fp)
    9e70:	10800017 	ldw	r2,0(r2)
    9e74:	10800417 	ldw	r2,16(r2)
    9e78:	1005003a 	cmpeq	r2,r2,zero
    9e7c:	1000071e 	bne	r2,zero,9e9c <close+0x8c>
    9e80:	e0bffb17 	ldw	r2,-20(fp)
    9e84:	10800017 	ldw	r2,0(r2)
    9e88:	10800417 	ldw	r2,16(r2)
    9e8c:	e13ffb17 	ldw	r4,-20(fp)
    9e90:	103ee83a 	callr	r2
    9e94:	e0bffe15 	stw	r2,-8(fp)
    9e98:	00000106 	br	9ea0 <close+0x90>
    9e9c:	e03ffe15 	stw	zero,-8(fp)
    9ea0:	e0bffe17 	ldw	r2,-8(fp)
    9ea4:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9ea8:	e13ffc17 	ldw	r4,-16(fp)
    9eac:	000a5e40 	call	a5e4 <alt_release_fd>
    if (rval < 0)
    9eb0:	e0bffa17 	ldw	r2,-24(fp)
    9eb4:	1004403a 	cmpge	r2,r2,zero
    9eb8:	1000071e 	bne	r2,zero,9ed8 <close+0xc8>
    {
      ALT_ERRNO = -rval;
    9ebc:	0009f100 	call	9f10 <alt_get_errno>
    9ec0:	e0fffa17 	ldw	r3,-24(fp)
    9ec4:	00c7c83a 	sub	r3,zero,r3
    9ec8:	10c00015 	stw	r3,0(r2)
      return -1;
    9ecc:	00bfffc4 	movi	r2,-1
    9ed0:	e0bffd15 	stw	r2,-12(fp)
    9ed4:	00000806 	br	9ef8 <close+0xe8>
    }
    return 0;
    9ed8:	e03ffd15 	stw	zero,-12(fp)
    9edc:	00000606 	br	9ef8 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9ee0:	0009f100 	call	9f10 <alt_get_errno>
    9ee4:	1007883a 	mov	r3,r2
    9ee8:	00801444 	movi	r2,81
    9eec:	18800015 	stw	r2,0(r3)
    return -1;
    9ef0:	00bfffc4 	movi	r2,-1
    9ef4:	e0bffd15 	stw	r2,-12(fp)
    9ef8:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    9efc:	e037883a 	mov	sp,fp
    9f00:	dfc00117 	ldw	ra,4(sp)
    9f04:	df000017 	ldw	fp,0(sp)
    9f08:	dec00204 	addi	sp,sp,8
    9f0c:	f800283a 	ret

00009f10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9f10:	defffd04 	addi	sp,sp,-12
    9f14:	dfc00215 	stw	ra,8(sp)
    9f18:	df000115 	stw	fp,4(sp)
    9f1c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9f20:	00800074 	movhi	r2,1
    9f24:	10ac7904 	addi	r2,r2,-19996
    9f28:	10800017 	ldw	r2,0(r2)
    9f2c:	1005003a 	cmpeq	r2,r2,zero
    9f30:	1000061e 	bne	r2,zero,9f4c <alt_get_errno+0x3c>
    9f34:	00800074 	movhi	r2,1
    9f38:	10ac7904 	addi	r2,r2,-19996
    9f3c:	10800017 	ldw	r2,0(r2)
    9f40:	103ee83a 	callr	r2
    9f44:	e0bfff15 	stw	r2,-4(fp)
    9f48:	00000306 	br	9f58 <alt_get_errno+0x48>
    9f4c:	00800074 	movhi	r2,1
    9f50:	10ad2f04 	addi	r2,r2,-19268
    9f54:	e0bfff15 	stw	r2,-4(fp)
    9f58:	e0bfff17 	ldw	r2,-4(fp)
}
    9f5c:	e037883a 	mov	sp,fp
    9f60:	dfc00117 	ldw	ra,4(sp)
    9f64:	df000017 	ldw	fp,0(sp)
    9f68:	dec00204 	addi	sp,sp,8
    9f6c:	f800283a 	ret

00009f70 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    9f70:	deffff04 	addi	sp,sp,-4
    9f74:	df000015 	stw	fp,0(sp)
    9f78:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    9f7c:	e037883a 	mov	sp,fp
    9f80:	df000017 	ldw	fp,0(sp)
    9f84:	dec00104 	addi	sp,sp,4
    9f88:	f800283a 	ret

00009f8c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9f8c:	defffc04 	addi	sp,sp,-16
    9f90:	df000315 	stw	fp,12(sp)
    9f94:	df000304 	addi	fp,sp,12
    9f98:	e13ffd15 	stw	r4,-12(fp)
    9f9c:	e17ffe15 	stw	r5,-8(fp)
    9fa0:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9fa4:	e0bfff17 	ldw	r2,-4(fp)
}
    9fa8:	e037883a 	mov	sp,fp
    9fac:	df000017 	ldw	fp,0(sp)
    9fb0:	dec00104 	addi	sp,sp,4
    9fb4:	f800283a 	ret

00009fb8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    9fb8:	defff904 	addi	sp,sp,-28
    9fbc:	dfc00615 	stw	ra,24(sp)
    9fc0:	df000515 	stw	fp,20(sp)
    9fc4:	df000504 	addi	fp,sp,20
    9fc8:	e13ffd15 	stw	r4,-12(fp)
    9fcc:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    9fd0:	e0bffd17 	ldw	r2,-12(fp)
    9fd4:	1005003a 	cmpeq	r2,r2,zero
    9fd8:	1000041e 	bne	r2,zero,9fec <alt_dev_llist_insert+0x34>
    9fdc:	e0bffd17 	ldw	r2,-12(fp)
    9fe0:	10800217 	ldw	r2,8(r2)
    9fe4:	1004c03a 	cmpne	r2,r2,zero
    9fe8:	1000071e 	bne	r2,zero,a008 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    9fec:	000a06c0 	call	a06c <alt_get_errno>
    9ff0:	1007883a 	mov	r3,r2
    9ff4:	00800584 	movi	r2,22
    9ff8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    9ffc:	00bffa84 	movi	r2,-22
    a000:	e0bfff15 	stw	r2,-4(fp)
    a004:	00001306 	br	a054 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    a008:	e0fffd17 	ldw	r3,-12(fp)
    a00c:	e0bffe17 	ldw	r2,-8(fp)
    a010:	e0bffb15 	stw	r2,-20(fp)
    a014:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    a018:	e0fffc17 	ldw	r3,-16(fp)
    a01c:	e0bffb17 	ldw	r2,-20(fp)
    a020:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    a024:	e0bffb17 	ldw	r2,-20(fp)
    a028:	10c00017 	ldw	r3,0(r2)
    a02c:	e0bffc17 	ldw	r2,-16(fp)
    a030:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    a034:	e0bffb17 	ldw	r2,-20(fp)
    a038:	10c00017 	ldw	r3,0(r2)
    a03c:	e0bffc17 	ldw	r2,-16(fp)
    a040:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    a044:	e0fffb17 	ldw	r3,-20(fp)
    a048:	e0bffc17 	ldw	r2,-16(fp)
    a04c:	18800015 	stw	r2,0(r3)

  return 0;  
    a050:	e03fff15 	stw	zero,-4(fp)
    a054:	e0bfff17 	ldw	r2,-4(fp)
}
    a058:	e037883a 	mov	sp,fp
    a05c:	dfc00117 	ldw	ra,4(sp)
    a060:	df000017 	ldw	fp,0(sp)
    a064:	dec00204 	addi	sp,sp,8
    a068:	f800283a 	ret

0000a06c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a06c:	defffd04 	addi	sp,sp,-12
    a070:	dfc00215 	stw	ra,8(sp)
    a074:	df000115 	stw	fp,4(sp)
    a078:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a07c:	00800074 	movhi	r2,1
    a080:	10ac7904 	addi	r2,r2,-19996
    a084:	10800017 	ldw	r2,0(r2)
    a088:	1005003a 	cmpeq	r2,r2,zero
    a08c:	1000061e 	bne	r2,zero,a0a8 <alt_get_errno+0x3c>
    a090:	00800074 	movhi	r2,1
    a094:	10ac7904 	addi	r2,r2,-19996
    a098:	10800017 	ldw	r2,0(r2)
    a09c:	103ee83a 	callr	r2
    a0a0:	e0bfff15 	stw	r2,-4(fp)
    a0a4:	00000306 	br	a0b4 <alt_get_errno+0x48>
    a0a8:	00800074 	movhi	r2,1
    a0ac:	10ad2f04 	addi	r2,r2,-19268
    a0b0:	e0bfff15 	stw	r2,-4(fp)
    a0b4:	e0bfff17 	ldw	r2,-4(fp)
}
    a0b8:	e037883a 	mov	sp,fp
    a0bc:	dfc00117 	ldw	ra,4(sp)
    a0c0:	df000017 	ldw	fp,0(sp)
    a0c4:	dec00204 	addi	sp,sp,8
    a0c8:	f800283a 	ret

0000a0cc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    a0cc:	defffd04 	addi	sp,sp,-12
    a0d0:	dfc00215 	stw	ra,8(sp)
    a0d4:	df000115 	stw	fp,4(sp)
    a0d8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    a0dc:	00bfff04 	movi	r2,-4
    a0e0:	00c00074 	movhi	r3,1
    a0e4:	18eb4004 	addi	r3,r3,-21248
    a0e8:	1885883a 	add	r2,r3,r2
    a0ec:	e0bfff15 	stw	r2,-4(fp)
    a0f0:	00000606 	br	a10c <_do_ctors+0x40>
        (*ctor) (); 
    a0f4:	e0bfff17 	ldw	r2,-4(fp)
    a0f8:	10800017 	ldw	r2,0(r2)
    a0fc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    a100:	e0bfff17 	ldw	r2,-4(fp)
    a104:	10bfff04 	addi	r2,r2,-4
    a108:	e0bfff15 	stw	r2,-4(fp)
    a10c:	e0ffff17 	ldw	r3,-4(fp)
    a110:	00800074 	movhi	r2,1
    a114:	10ab3f04 	addi	r2,r2,-21252
    a118:	18bff62e 	bgeu	r3,r2,a0f4 <_do_ctors+0x28>
        (*ctor) (); 
}
    a11c:	e037883a 	mov	sp,fp
    a120:	dfc00117 	ldw	ra,4(sp)
    a124:	df000017 	ldw	fp,0(sp)
    a128:	dec00204 	addi	sp,sp,8
    a12c:	f800283a 	ret

0000a130 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    a130:	defffd04 	addi	sp,sp,-12
    a134:	dfc00215 	stw	ra,8(sp)
    a138:	df000115 	stw	fp,4(sp)
    a13c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    a140:	00bfff04 	movi	r2,-4
    a144:	00c00074 	movhi	r3,1
    a148:	18eb4004 	addi	r3,r3,-21248
    a14c:	1885883a 	add	r2,r3,r2
    a150:	e0bfff15 	stw	r2,-4(fp)
    a154:	00000606 	br	a170 <_do_dtors+0x40>
        (*dtor) (); 
    a158:	e0bfff17 	ldw	r2,-4(fp)
    a15c:	10800017 	ldw	r2,0(r2)
    a160:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    a164:	e0bfff17 	ldw	r2,-4(fp)
    a168:	10bfff04 	addi	r2,r2,-4
    a16c:	e0bfff15 	stw	r2,-4(fp)
    a170:	e0ffff17 	ldw	r3,-4(fp)
    a174:	00800074 	movhi	r2,1
    a178:	10ab4004 	addi	r2,r2,-21248
    a17c:	18bff62e 	bgeu	r3,r2,a158 <_do_dtors+0x28>
        (*dtor) (); 
}
    a180:	e037883a 	mov	sp,fp
    a184:	dfc00117 	ldw	ra,4(sp)
    a188:	df000017 	ldw	fp,0(sp)
    a18c:	dec00204 	addi	sp,sp,8
    a190:	f800283a 	ret

0000a194 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    a194:	deffff04 	addi	sp,sp,-4
    a198:	df000015 	stw	fp,0(sp)
    a19c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    a1a0:	e037883a 	mov	sp,fp
    a1a4:	df000017 	ldw	fp,0(sp)
    a1a8:	dec00104 	addi	sp,sp,4
    a1ac:	f800283a 	ret

0000a1b0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    a1b0:	defff804 	addi	sp,sp,-32
    a1b4:	dfc00715 	stw	ra,28(sp)
    a1b8:	df000615 	stw	fp,24(sp)
    a1bc:	dc000515 	stw	r16,20(sp)
    a1c0:	df000504 	addi	fp,sp,20
    a1c4:	e13ffc15 	stw	r4,-16(fp)
    a1c8:	e17ffd15 	stw	r5,-12(fp)
    a1cc:	e1bffe15 	stw	r6,-8(fp)
    a1d0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    a1d4:	e13ffd17 	ldw	r4,-12(fp)
    a1d8:	e17ffe17 	ldw	r5,-8(fp)
    a1dc:	e1bfff17 	ldw	r6,-4(fp)
    a1e0:	000a3f80 	call	a3f8 <open>
    a1e4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    a1e8:	e0bffb17 	ldw	r2,-20(fp)
    a1ec:	1004803a 	cmplt	r2,r2,zero
    a1f0:	10001f1e 	bne	r2,zero,a270 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    a1f4:	e13ffb17 	ldw	r4,-20(fp)
    a1f8:	04000074 	movhi	r16,1
    a1fc:	842c1204 	addi	r16,r16,-20408
    a200:	01400304 	movi	r5,12
    a204:	000967c0 	call	967c <__mulsi3>
    a208:	1405883a 	add	r2,r2,r16
    a20c:	10c00017 	ldw	r3,0(r2)
    a210:	e0bffc17 	ldw	r2,-16(fp)
    a214:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    a218:	e13ffb17 	ldw	r4,-20(fp)
    a21c:	04000074 	movhi	r16,1
    a220:	842c1204 	addi	r16,r16,-20408
    a224:	01400304 	movi	r5,12
    a228:	000967c0 	call	967c <__mulsi3>
    a22c:	1405883a 	add	r2,r2,r16
    a230:	10800104 	addi	r2,r2,4
    a234:	10c00017 	ldw	r3,0(r2)
    a238:	e0bffc17 	ldw	r2,-16(fp)
    a23c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    a240:	e13ffb17 	ldw	r4,-20(fp)
    a244:	04000074 	movhi	r16,1
    a248:	842c1204 	addi	r16,r16,-20408
    a24c:	01400304 	movi	r5,12
    a250:	000967c0 	call	967c <__mulsi3>
    a254:	1405883a 	add	r2,r2,r16
    a258:	10800204 	addi	r2,r2,8
    a25c:	10c00017 	ldw	r3,0(r2)
    a260:	e0bffc17 	ldw	r2,-16(fp)
    a264:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    a268:	e13ffb17 	ldw	r4,-20(fp)
    a26c:	000a5e40 	call	a5e4 <alt_release_fd>
  }
} 
    a270:	e037883a 	mov	sp,fp
    a274:	dfc00217 	ldw	ra,8(sp)
    a278:	df000117 	ldw	fp,4(sp)
    a27c:	dc000017 	ldw	r16,0(sp)
    a280:	dec00304 	addi	sp,sp,12
    a284:	f800283a 	ret

0000a288 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    a288:	defffb04 	addi	sp,sp,-20
    a28c:	dfc00415 	stw	ra,16(sp)
    a290:	df000315 	stw	fp,12(sp)
    a294:	df000304 	addi	fp,sp,12
    a298:	e13ffd15 	stw	r4,-12(fp)
    a29c:	e17ffe15 	stw	r5,-8(fp)
    a2a0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    a2a4:	01000074 	movhi	r4,1
    a2a8:	212c1504 	addi	r4,r4,-20396
    a2ac:	e17ffd17 	ldw	r5,-12(fp)
    a2b0:	01800044 	movi	r6,1
    a2b4:	01c07fc4 	movi	r7,511
    a2b8:	000a1b00 	call	a1b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    a2bc:	01000074 	movhi	r4,1
    a2c0:	212c1204 	addi	r4,r4,-20408
    a2c4:	e17ffe17 	ldw	r5,-8(fp)
    a2c8:	000d883a 	mov	r6,zero
    a2cc:	01c07fc4 	movi	r7,511
    a2d0:	000a1b00 	call	a1b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    a2d4:	01000074 	movhi	r4,1
    a2d8:	212c1804 	addi	r4,r4,-20384
    a2dc:	e17fff17 	ldw	r5,-4(fp)
    a2e0:	01800044 	movi	r6,1
    a2e4:	01c07fc4 	movi	r7,511
    a2e8:	000a1b00 	call	a1b0 <alt_open_fd>
}  
    a2ec:	e037883a 	mov	sp,fp
    a2f0:	dfc00117 	ldw	ra,4(sp)
    a2f4:	df000017 	ldw	fp,0(sp)
    a2f8:	dec00204 	addi	sp,sp,8
    a2fc:	f800283a 	ret

0000a300 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    a300:	defffa04 	addi	sp,sp,-24
    a304:	dfc00515 	stw	ra,20(sp)
    a308:	df000415 	stw	fp,16(sp)
    a30c:	dc000315 	stw	r16,12(sp)
    a310:	df000304 	addi	fp,sp,12
    a314:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    a318:	e0bffe17 	ldw	r2,-8(fp)
    a31c:	10800217 	ldw	r2,8(r2)
    a320:	10d00034 	orhi	r3,r2,16384
    a324:	e0bffe17 	ldw	r2,-8(fp)
    a328:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    a32c:	e03ffd15 	stw	zero,-12(fp)
    a330:	00002306 	br	a3c0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    a334:	e13ffd17 	ldw	r4,-12(fp)
    a338:	04000074 	movhi	r16,1
    a33c:	842c1204 	addi	r16,r16,-20408
    a340:	01400304 	movi	r5,12
    a344:	000967c0 	call	967c <__mulsi3>
    a348:	1405883a 	add	r2,r2,r16
    a34c:	10c00017 	ldw	r3,0(r2)
    a350:	e0bffe17 	ldw	r2,-8(fp)
    a354:	10800017 	ldw	r2,0(r2)
    a358:	1880161e 	bne	r3,r2,a3b4 <alt_file_locked+0xb4>
    a35c:	e13ffd17 	ldw	r4,-12(fp)
    a360:	04000074 	movhi	r16,1
    a364:	842c1204 	addi	r16,r16,-20408
    a368:	01400304 	movi	r5,12
    a36c:	000967c0 	call	967c <__mulsi3>
    a370:	1405883a 	add	r2,r2,r16
    a374:	10800204 	addi	r2,r2,8
    a378:	10800017 	ldw	r2,0(r2)
    a37c:	1004403a 	cmpge	r2,r2,zero
    a380:	10000c1e 	bne	r2,zero,a3b4 <alt_file_locked+0xb4>
    a384:	e13ffd17 	ldw	r4,-12(fp)
    a388:	01400304 	movi	r5,12
    a38c:	000967c0 	call	967c <__mulsi3>
    a390:	1007883a 	mov	r3,r2
    a394:	00800074 	movhi	r2,1
    a398:	10ac1204 	addi	r2,r2,-20408
    a39c:	1887883a 	add	r3,r3,r2
    a3a0:	e0bffe17 	ldw	r2,-8(fp)
    a3a4:	18800326 	beq	r3,r2,a3b4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    a3a8:	00bffcc4 	movi	r2,-13
    a3ac:	e0bfff15 	stw	r2,-4(fp)
    a3b0:	00000a06 	br	a3dc <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    a3b4:	e0bffd17 	ldw	r2,-12(fp)
    a3b8:	10800044 	addi	r2,r2,1
    a3bc:	e0bffd15 	stw	r2,-12(fp)
    a3c0:	00800074 	movhi	r2,1
    a3c4:	10ac7804 	addi	r2,r2,-20000
    a3c8:	10800017 	ldw	r2,0(r2)
    a3cc:	1007883a 	mov	r3,r2
    a3d0:	e0bffd17 	ldw	r2,-12(fp)
    a3d4:	18bfd72e 	bgeu	r3,r2,a334 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    a3d8:	e03fff15 	stw	zero,-4(fp)
    a3dc:	e0bfff17 	ldw	r2,-4(fp)
}
    a3e0:	e037883a 	mov	sp,fp
    a3e4:	dfc00217 	ldw	ra,8(sp)
    a3e8:	df000117 	ldw	fp,4(sp)
    a3ec:	dc000017 	ldw	r16,0(sp)
    a3f0:	dec00304 	addi	sp,sp,12
    a3f4:	f800283a 	ret

0000a3f8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    a3f8:	defff404 	addi	sp,sp,-48
    a3fc:	dfc00b15 	stw	ra,44(sp)
    a400:	df000a15 	stw	fp,40(sp)
    a404:	df000a04 	addi	fp,sp,40
    a408:	e13ffb15 	stw	r4,-20(fp)
    a40c:	e17ffc15 	stw	r5,-16(fp)
    a410:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    a414:	00bfffc4 	movi	r2,-1
    a418:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    a41c:	00bffb44 	movi	r2,-19
    a420:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    a424:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    a428:	e13ffb17 	ldw	r4,-20(fp)
    a42c:	01400074 	movhi	r5,1
    a430:	296c7604 	addi	r5,r5,-20008
    a434:	000a67c0 	call	a67c <alt_find_dev>
    a438:	e0bffa15 	stw	r2,-24(fp)
    a43c:	e0bffa17 	ldw	r2,-24(fp)
    a440:	1004c03a 	cmpne	r2,r2,zero
    a444:	1000051e 	bne	r2,zero,a45c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    a448:	e13ffb17 	ldw	r4,-20(fp)
    a44c:	000a7100 	call	a710 <alt_find_file>
    a450:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    a454:	00800044 	movi	r2,1
    a458:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    a45c:	e0bffa17 	ldw	r2,-24(fp)
    a460:	1005003a 	cmpeq	r2,r2,zero
    a464:	1000311e 	bne	r2,zero,a52c <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    a468:	e13ffa17 	ldw	r4,-24(fp)
    a46c:	000a8300 	call	a830 <alt_get_fd>
    a470:	e0bff815 	stw	r2,-32(fp)
    a474:	e0bff817 	ldw	r2,-32(fp)
    a478:	1004403a 	cmpge	r2,r2,zero
    a47c:	1000031e 	bne	r2,zero,a48c <open+0x94>
    {
      status = index;
    a480:	e0bff817 	ldw	r2,-32(fp)
    a484:	e0bff715 	stw	r2,-36(fp)
    a488:	00002a06 	br	a534 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    a48c:	e13ff817 	ldw	r4,-32(fp)
    a490:	01400304 	movi	r5,12
    a494:	000967c0 	call	967c <__mulsi3>
    a498:	1007883a 	mov	r3,r2
    a49c:	00800074 	movhi	r2,1
    a4a0:	10ac1204 	addi	r2,r2,-20408
    a4a4:	1885883a 	add	r2,r3,r2
    a4a8:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    a4ac:	e0fffc17 	ldw	r3,-16(fp)
    a4b0:	00900034 	movhi	r2,16384
    a4b4:	10bfffc4 	addi	r2,r2,-1
    a4b8:	1886703a 	and	r3,r3,r2
    a4bc:	e0bff917 	ldw	r2,-28(fp)
    a4c0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    a4c4:	e0bff617 	ldw	r2,-40(fp)
    a4c8:	1004c03a 	cmpne	r2,r2,zero
    a4cc:	1000061e 	bne	r2,zero,a4e8 <open+0xf0>
    a4d0:	e13ff917 	ldw	r4,-28(fp)
    a4d4:	000a3000 	call	a300 <alt_file_locked>
    a4d8:	e0bff715 	stw	r2,-36(fp)
    a4dc:	e0bff717 	ldw	r2,-36(fp)
    a4e0:	1004803a 	cmplt	r2,r2,zero
    a4e4:	1000131e 	bne	r2,zero,a534 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    a4e8:	e0bffa17 	ldw	r2,-24(fp)
    a4ec:	10800317 	ldw	r2,12(r2)
    a4f0:	1005003a 	cmpeq	r2,r2,zero
    a4f4:	1000091e 	bne	r2,zero,a51c <open+0x124>
    a4f8:	e0bffa17 	ldw	r2,-24(fp)
    a4fc:	10800317 	ldw	r2,12(r2)
    a500:	e13ff917 	ldw	r4,-28(fp)
    a504:	e17ffb17 	ldw	r5,-20(fp)
    a508:	e1bffc17 	ldw	r6,-16(fp)
    a50c:	e1fffd17 	ldw	r7,-12(fp)
    a510:	103ee83a 	callr	r2
    a514:	e0bfff15 	stw	r2,-4(fp)
    a518:	00000106 	br	a520 <open+0x128>
    a51c:	e03fff15 	stw	zero,-4(fp)
    a520:	e0bfff17 	ldw	r2,-4(fp)
    a524:	e0bff715 	stw	r2,-36(fp)
    a528:	00000206 	br	a534 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    a52c:	00bffb44 	movi	r2,-19
    a530:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    a534:	e0bff717 	ldw	r2,-36(fp)
    a538:	1004403a 	cmpge	r2,r2,zero
    a53c:	1000091e 	bne	r2,zero,a564 <open+0x16c>
  {
    alt_release_fd (index);  
    a540:	e13ff817 	ldw	r4,-32(fp)
    a544:	000a5e40 	call	a5e4 <alt_release_fd>
    ALT_ERRNO = -status;
    a548:	000a5840 	call	a584 <alt_get_errno>
    a54c:	e0fff717 	ldw	r3,-36(fp)
    a550:	00c7c83a 	sub	r3,zero,r3
    a554:	10c00015 	stw	r3,0(r2)
    return -1;
    a558:	00bfffc4 	movi	r2,-1
    a55c:	e0bffe15 	stw	r2,-8(fp)
    a560:	00000206 	br	a56c <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    a564:	e0bff817 	ldw	r2,-32(fp)
    a568:	e0bffe15 	stw	r2,-8(fp)
    a56c:	e0bffe17 	ldw	r2,-8(fp)
}
    a570:	e037883a 	mov	sp,fp
    a574:	dfc00117 	ldw	ra,4(sp)
    a578:	df000017 	ldw	fp,0(sp)
    a57c:	dec00204 	addi	sp,sp,8
    a580:	f800283a 	ret

0000a584 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a584:	defffd04 	addi	sp,sp,-12
    a588:	dfc00215 	stw	ra,8(sp)
    a58c:	df000115 	stw	fp,4(sp)
    a590:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a594:	00800074 	movhi	r2,1
    a598:	10ac7904 	addi	r2,r2,-19996
    a59c:	10800017 	ldw	r2,0(r2)
    a5a0:	1005003a 	cmpeq	r2,r2,zero
    a5a4:	1000061e 	bne	r2,zero,a5c0 <alt_get_errno+0x3c>
    a5a8:	00800074 	movhi	r2,1
    a5ac:	10ac7904 	addi	r2,r2,-19996
    a5b0:	10800017 	ldw	r2,0(r2)
    a5b4:	103ee83a 	callr	r2
    a5b8:	e0bfff15 	stw	r2,-4(fp)
    a5bc:	00000306 	br	a5cc <alt_get_errno+0x48>
    a5c0:	00800074 	movhi	r2,1
    a5c4:	10ad2f04 	addi	r2,r2,-19268
    a5c8:	e0bfff15 	stw	r2,-4(fp)
    a5cc:	e0bfff17 	ldw	r2,-4(fp)
}
    a5d0:	e037883a 	mov	sp,fp
    a5d4:	dfc00117 	ldw	ra,4(sp)
    a5d8:	df000017 	ldw	fp,0(sp)
    a5dc:	dec00204 	addi	sp,sp,8
    a5e0:	f800283a 	ret

0000a5e4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    a5e4:	defffc04 	addi	sp,sp,-16
    a5e8:	dfc00315 	stw	ra,12(sp)
    a5ec:	df000215 	stw	fp,8(sp)
    a5f0:	dc000115 	stw	r16,4(sp)
    a5f4:	df000104 	addi	fp,sp,4
    a5f8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    a5fc:	e0bfff17 	ldw	r2,-4(fp)
    a600:	108000d0 	cmplti	r2,r2,3
    a604:	10000f1e 	bne	r2,zero,a644 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    a608:	e13fff17 	ldw	r4,-4(fp)
    a60c:	04000074 	movhi	r16,1
    a610:	842c1204 	addi	r16,r16,-20408
    a614:	01400304 	movi	r5,12
    a618:	000967c0 	call	967c <__mulsi3>
    a61c:	1405883a 	add	r2,r2,r16
    a620:	10800204 	addi	r2,r2,8
    a624:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    a628:	e13fff17 	ldw	r4,-4(fp)
    a62c:	04000074 	movhi	r16,1
    a630:	842c1204 	addi	r16,r16,-20408
    a634:	01400304 	movi	r5,12
    a638:	000967c0 	call	967c <__mulsi3>
    a63c:	1405883a 	add	r2,r2,r16
    a640:	10000015 	stw	zero,0(r2)
  }
}
    a644:	e037883a 	mov	sp,fp
    a648:	dfc00217 	ldw	ra,8(sp)
    a64c:	df000117 	ldw	fp,4(sp)
    a650:	dc000017 	ldw	r16,0(sp)
    a654:	dec00304 	addi	sp,sp,12
    a658:	f800283a 	ret

0000a65c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    a65c:	deffff04 	addi	sp,sp,-4
    a660:	df000015 	stw	fp,0(sp)
    a664:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    a668:	000170fa 	wrctl	ienable,zero
}
    a66c:	e037883a 	mov	sp,fp
    a670:	df000017 	ldw	fp,0(sp)
    a674:	dec00104 	addi	sp,sp,4
    a678:	f800283a 	ret

0000a67c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    a67c:	defff904 	addi	sp,sp,-28
    a680:	dfc00615 	stw	ra,24(sp)
    a684:	df000515 	stw	fp,20(sp)
    a688:	df000504 	addi	fp,sp,20
    a68c:	e13ffd15 	stw	r4,-12(fp)
    a690:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    a694:	e0bffe17 	ldw	r2,-8(fp)
    a698:	10800017 	ldw	r2,0(r2)
    a69c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    a6a0:	e13ffd17 	ldw	r4,-12(fp)
    a6a4:	0008b840 	call	8b84 <strlen>
    a6a8:	10800044 	addi	r2,r2,1
    a6ac:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a6b0:	00000d06 	br	a6e8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    a6b4:	e0bffc17 	ldw	r2,-16(fp)
    a6b8:	11000217 	ldw	r4,8(r2)
    a6bc:	e1bffb17 	ldw	r6,-20(fp)
    a6c0:	e17ffd17 	ldw	r5,-12(fp)
    a6c4:	000a9340 	call	a934 <memcmp>
    a6c8:	1004c03a 	cmpne	r2,r2,zero
    a6cc:	1000031e 	bne	r2,zero,a6dc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    a6d0:	e0bffc17 	ldw	r2,-16(fp)
    a6d4:	e0bfff15 	stw	r2,-4(fp)
    a6d8:	00000706 	br	a6f8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    a6dc:	e0bffc17 	ldw	r2,-16(fp)
    a6e0:	10800017 	ldw	r2,0(r2)
    a6e4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a6e8:	e0fffe17 	ldw	r3,-8(fp)
    a6ec:	e0bffc17 	ldw	r2,-16(fp)
    a6f0:	10fff01e 	bne	r2,r3,a6b4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    a6f4:	e03fff15 	stw	zero,-4(fp)
    a6f8:	e0bfff17 	ldw	r2,-4(fp)
}
    a6fc:	e037883a 	mov	sp,fp
    a700:	dfc00117 	ldw	ra,4(sp)
    a704:	df000017 	ldw	fp,0(sp)
    a708:	dec00204 	addi	sp,sp,8
    a70c:	f800283a 	ret

0000a710 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    a710:	defffa04 	addi	sp,sp,-24
    a714:	dfc00515 	stw	ra,20(sp)
    a718:	df000415 	stw	fp,16(sp)
    a71c:	df000404 	addi	fp,sp,16
    a720:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    a724:	00800074 	movhi	r2,1
    a728:	10ac7404 	addi	r2,r2,-20016
    a72c:	10800017 	ldw	r2,0(r2)
    a730:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a734:	00003306 	br	a804 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    a738:	e0bffd17 	ldw	r2,-12(fp)
    a73c:	11000217 	ldw	r4,8(r2)
    a740:	0008b840 	call	8b84 <strlen>
    a744:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    a748:	e0bffd17 	ldw	r2,-12(fp)
    a74c:	10c00217 	ldw	r3,8(r2)
    a750:	e0bffc17 	ldw	r2,-16(fp)
    a754:	1885883a 	add	r2,r3,r2
    a758:	10bfffc4 	addi	r2,r2,-1
    a75c:	10800003 	ldbu	r2,0(r2)
    a760:	10803fcc 	andi	r2,r2,255
    a764:	1080201c 	xori	r2,r2,128
    a768:	10bfe004 	addi	r2,r2,-128
    a76c:	10800bd8 	cmpnei	r2,r2,47
    a770:	1000031e 	bne	r2,zero,a780 <alt_find_file+0x70>
    {
      len -= 1;
    a774:	e0bffc17 	ldw	r2,-16(fp)
    a778:	10bfffc4 	addi	r2,r2,-1
    a77c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a780:	e0bffc17 	ldw	r2,-16(fp)
    a784:	1007883a 	mov	r3,r2
    a788:	e0bffe17 	ldw	r2,-8(fp)
    a78c:	1885883a 	add	r2,r3,r2
    a790:	10800003 	ldbu	r2,0(r2)
    a794:	10803fcc 	andi	r2,r2,255
    a798:	1080201c 	xori	r2,r2,128
    a79c:	10bfe004 	addi	r2,r2,-128
    a7a0:	10800be0 	cmpeqi	r2,r2,47
    a7a4:	10000a1e 	bne	r2,zero,a7d0 <alt_find_file+0xc0>
    a7a8:	e0bffc17 	ldw	r2,-16(fp)
    a7ac:	1007883a 	mov	r3,r2
    a7b0:	e0bffe17 	ldw	r2,-8(fp)
    a7b4:	1885883a 	add	r2,r3,r2
    a7b8:	10800003 	ldbu	r2,0(r2)
    a7bc:	10803fcc 	andi	r2,r2,255
    a7c0:	1080201c 	xori	r2,r2,128
    a7c4:	10bfe004 	addi	r2,r2,-128
    a7c8:	1004c03a 	cmpne	r2,r2,zero
    a7cc:	10000a1e 	bne	r2,zero,a7f8 <alt_find_file+0xe8>
    a7d0:	e0bffd17 	ldw	r2,-12(fp)
    a7d4:	11000217 	ldw	r4,8(r2)
    a7d8:	e1bffc17 	ldw	r6,-16(fp)
    a7dc:	e17ffe17 	ldw	r5,-8(fp)
    a7e0:	000a9340 	call	a934 <memcmp>
    a7e4:	1004c03a 	cmpne	r2,r2,zero
    a7e8:	1000031e 	bne	r2,zero,a7f8 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    a7ec:	e0bffd17 	ldw	r2,-12(fp)
    a7f0:	e0bfff15 	stw	r2,-4(fp)
    a7f4:	00000806 	br	a818 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    a7f8:	e0bffd17 	ldw	r2,-12(fp)
    a7fc:	10800017 	ldw	r2,0(r2)
    a800:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a804:	00c00074 	movhi	r3,1
    a808:	18ec7404 	addi	r3,r3,-20016
    a80c:	e0bffd17 	ldw	r2,-12(fp)
    a810:	10ffc91e 	bne	r2,r3,a738 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    a814:	e03fff15 	stw	zero,-4(fp)
    a818:	e0bfff17 	ldw	r2,-4(fp)
}
    a81c:	e037883a 	mov	sp,fp
    a820:	dfc00117 	ldw	ra,4(sp)
    a824:	df000017 	ldw	fp,0(sp)
    a828:	dec00204 	addi	sp,sp,8
    a82c:	f800283a 	ret

0000a830 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    a830:	defffa04 	addi	sp,sp,-24
    a834:	dfc00515 	stw	ra,20(sp)
    a838:	df000415 	stw	fp,16(sp)
    a83c:	dc000315 	stw	r16,12(sp)
    a840:	df000304 	addi	fp,sp,12
    a844:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    a848:	00bffa04 	movi	r2,-24
    a84c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a850:	e03ffe15 	stw	zero,-8(fp)
    a854:	00002006 	br	a8d8 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    a858:	e13ffe17 	ldw	r4,-8(fp)
    a85c:	04000074 	movhi	r16,1
    a860:	842c1204 	addi	r16,r16,-20408
    a864:	01400304 	movi	r5,12
    a868:	000967c0 	call	967c <__mulsi3>
    a86c:	1405883a 	add	r2,r2,r16
    a870:	10800017 	ldw	r2,0(r2)
    a874:	1004c03a 	cmpne	r2,r2,zero
    a878:	1000141e 	bne	r2,zero,a8cc <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    a87c:	e13ffe17 	ldw	r4,-8(fp)
    a880:	04000074 	movhi	r16,1
    a884:	842c1204 	addi	r16,r16,-20408
    a888:	01400304 	movi	r5,12
    a88c:	000967c0 	call	967c <__mulsi3>
    a890:	1407883a 	add	r3,r2,r16
    a894:	e0bfff17 	ldw	r2,-4(fp)
    a898:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    a89c:	00800074 	movhi	r2,1
    a8a0:	10ac7804 	addi	r2,r2,-20000
    a8a4:	10c00017 	ldw	r3,0(r2)
    a8a8:	e0bffe17 	ldw	r2,-8(fp)
    a8ac:	1880040e 	bge	r3,r2,a8c0 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    a8b0:	00c00074 	movhi	r3,1
    a8b4:	18ec7804 	addi	r3,r3,-20000
    a8b8:	e0bffe17 	ldw	r2,-8(fp)
    a8bc:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    a8c0:	e0bffe17 	ldw	r2,-8(fp)
    a8c4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    a8c8:	00000606 	br	a8e4 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a8cc:	e0bffe17 	ldw	r2,-8(fp)
    a8d0:	10800044 	addi	r2,r2,1
    a8d4:	e0bffe15 	stw	r2,-8(fp)
    a8d8:	e0bffe17 	ldw	r2,-8(fp)
    a8dc:	10800810 	cmplti	r2,r2,32
    a8e0:	103fdd1e 	bne	r2,zero,a858 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    a8e4:	e0bffd17 	ldw	r2,-12(fp)
}
    a8e8:	e037883a 	mov	sp,fp
    a8ec:	dfc00217 	ldw	ra,8(sp)
    a8f0:	df000117 	ldw	fp,4(sp)
    a8f4:	dc000017 	ldw	r16,0(sp)
    a8f8:	dec00304 	addi	sp,sp,12
    a8fc:	f800283a 	ret

0000a900 <atexit>:
    a900:	200b883a 	mov	r5,r4
    a904:	000d883a 	mov	r6,zero
    a908:	0009883a 	mov	r4,zero
    a90c:	000f883a 	mov	r7,zero
    a910:	000a9701 	jmpi	a970 <__register_exitproc>

0000a914 <exit>:
    a914:	defffe04 	addi	sp,sp,-8
    a918:	dc400015 	stw	r17,0(sp)
    a91c:	000b883a 	mov	r5,zero
    a920:	2023883a 	mov	r17,r4
    a924:	dfc00115 	stw	ra,4(sp)
    a928:	000aae00 	call	aae0 <__call_exitprocs>
    a92c:	8809883a 	mov	r4,r17
    a930:	000acdc0 	call	acdc <_exit>

0000a934 <memcmp>:
    a934:	31ffffc4 	addi	r7,r6,-1
    a938:	3000061e 	bne	r6,zero,a954 <memcmp+0x20>
    a93c:	00000a06 	br	a968 <memcmp+0x34>
    a940:	39ffffc4 	addi	r7,r7,-1
    a944:	00bfffc4 	movi	r2,-1
    a948:	21000044 	addi	r4,r4,1
    a94c:	29400044 	addi	r5,r5,1
    a950:	38800526 	beq	r7,r2,a968 <memcmp+0x34>
    a954:	20c00003 	ldbu	r3,0(r4)
    a958:	28800003 	ldbu	r2,0(r5)
    a95c:	18bff826 	beq	r3,r2,a940 <memcmp+0xc>
    a960:	1885c83a 	sub	r2,r3,r2
    a964:	f800283a 	ret
    a968:	0005883a 	mov	r2,zero
    a96c:	f800283a 	ret

0000a970 <__register_exitproc>:
    a970:	defff904 	addi	sp,sp,-28
    a974:	00800074 	movhi	r2,1
    a978:	10ac7304 	addi	r2,r2,-20020
    a97c:	dc400115 	stw	r17,4(sp)
    a980:	14400017 	ldw	r17,0(r2)
    a984:	dc000015 	stw	r16,0(sp)
    a988:	dd400515 	stw	r21,20(sp)
    a98c:	8c000c17 	ldw	r16,48(r17)
    a990:	dd000415 	stw	r20,16(sp)
    a994:	dcc00315 	stw	r19,12(sp)
    a998:	dc800215 	stw	r18,8(sp)
    a99c:	dfc00615 	stw	ra,24(sp)
    a9a0:	2025883a 	mov	r18,r4
    a9a4:	282b883a 	mov	r21,r5
    a9a8:	3029883a 	mov	r20,r6
    a9ac:	3827883a 	mov	r19,r7
    a9b0:	80002626 	beq	r16,zero,aa4c <__register_exitproc+0xdc>
    a9b4:	81400117 	ldw	r5,4(r16)
    a9b8:	008007c4 	movi	r2,31
    a9bc:	11403716 	blt	r2,r5,aa9c <__register_exitproc+0x12c>
    a9c0:	90002026 	beq	r18,zero,aa44 <__register_exitproc+0xd4>
    a9c4:	81802217 	ldw	r6,136(r16)
    a9c8:	30002926 	beq	r6,zero,aa70 <__register_exitproc+0x100>
    a9cc:	81400117 	ldw	r5,4(r16)
    a9d0:	00c00044 	movi	r3,1
    a9d4:	31004017 	ldw	r4,256(r6)
    a9d8:	1946983a 	sll	r3,r3,r5
    a9dc:	2945883a 	add	r2,r5,r5
    a9e0:	1085883a 	add	r2,r2,r2
    a9e4:	1185883a 	add	r2,r2,r6
    a9e8:	20c8b03a 	or	r4,r4,r3
    a9ec:	14c02015 	stw	r19,128(r2)
    a9f0:	15000015 	stw	r20,0(r2)
    a9f4:	00800084 	movi	r2,2
    a9f8:	31004015 	stw	r4,256(r6)
    a9fc:	90801826 	beq	r18,r2,aa60 <__register_exitproc+0xf0>
    aa00:	2945883a 	add	r2,r5,r5
    aa04:	1085883a 	add	r2,r2,r2
    aa08:	1405883a 	add	r2,r2,r16
    aa0c:	28c00044 	addi	r3,r5,1
    aa10:	0009883a 	mov	r4,zero
    aa14:	15400215 	stw	r21,8(r2)
    aa18:	80c00115 	stw	r3,4(r16)
    aa1c:	2005883a 	mov	r2,r4
    aa20:	dfc00617 	ldw	ra,24(sp)
    aa24:	dd400517 	ldw	r21,20(sp)
    aa28:	dd000417 	ldw	r20,16(sp)
    aa2c:	dcc00317 	ldw	r19,12(sp)
    aa30:	dc800217 	ldw	r18,8(sp)
    aa34:	dc400117 	ldw	r17,4(sp)
    aa38:	dc000017 	ldw	r16,0(sp)
    aa3c:	dec00704 	addi	sp,sp,28
    aa40:	f800283a 	ret
    aa44:	81400117 	ldw	r5,4(r16)
    aa48:	003fed06 	br	aa00 <__register_exitproc+0x90>
    aa4c:	00800074 	movhi	r2,1
    aa50:	10ad3304 	addi	r2,r2,-19252
    aa54:	1021883a 	mov	r16,r2
    aa58:	88800c15 	stw	r2,48(r17)
    aa5c:	003fd506 	br	a9b4 <__register_exitproc+0x44>
    aa60:	30804117 	ldw	r2,260(r6)
    aa64:	10c4b03a 	or	r2,r2,r3
    aa68:	30804115 	stw	r2,260(r6)
    aa6c:	003fe406 	br	aa00 <__register_exitproc+0x90>
    aa70:	00800034 	movhi	r2,0
    aa74:	10800004 	addi	r2,r2,0
    aa78:	10000b26 	beq	r2,zero,aaa8 <__register_exitproc+0x138>
    aa7c:	01004204 	movi	r4,264
    aa80:	103ee83a 	callr	r2
    aa84:	10000826 	beq	r2,zero,aaa8 <__register_exitproc+0x138>
    aa88:	100d883a 	mov	r6,r2
    aa8c:	10004015 	stw	zero,256(r2)
    aa90:	10004115 	stw	zero,260(r2)
    aa94:	80802215 	stw	r2,136(r16)
    aa98:	003fcc06 	br	a9cc <__register_exitproc+0x5c>
    aa9c:	00800034 	movhi	r2,0
    aaa0:	10800004 	addi	r2,r2,0
    aaa4:	1000021e 	bne	r2,zero,aab0 <__register_exitproc+0x140>
    aaa8:	013fffc4 	movi	r4,-1
    aaac:	003fdb06 	br	aa1c <__register_exitproc+0xac>
    aab0:	01002304 	movi	r4,140
    aab4:	103ee83a 	callr	r2
    aab8:	1007883a 	mov	r3,r2
    aabc:	103ffa26 	beq	r2,zero,aaa8 <__register_exitproc+0x138>
    aac0:	88800c17 	ldw	r2,48(r17)
    aac4:	1821883a 	mov	r16,r3
    aac8:	18000115 	stw	zero,4(r3)
    aacc:	18800015 	stw	r2,0(r3)
    aad0:	88c00c15 	stw	r3,48(r17)
    aad4:	903fdb26 	beq	r18,zero,aa44 <__register_exitproc+0xd4>
    aad8:	003fba06 	br	a9c4 <__register_exitproc+0x54>

0000aadc <register_fini>:
    aadc:	f800283a 	ret

0000aae0 <__call_exitprocs>:
    aae0:	defff304 	addi	sp,sp,-52
    aae4:	00800074 	movhi	r2,1
    aae8:	10ac7304 	addi	r2,r2,-20020
    aaec:	df000b15 	stw	fp,44(sp)
    aaf0:	17000017 	ldw	fp,0(r2)
    aaf4:	00800034 	movhi	r2,0
    aaf8:	10800004 	addi	r2,r2,0
    aafc:	1005003a 	cmpeq	r2,r2,zero
    ab00:	d8800215 	stw	r2,8(sp)
    ab04:	e0800c04 	addi	r2,fp,48
    ab08:	dd800915 	stw	r22,36(sp)
    ab0c:	dd400815 	stw	r21,32(sp)
    ab10:	dfc00c15 	stw	ra,48(sp)
    ab14:	ddc00a15 	stw	r23,40(sp)
    ab18:	dd000715 	stw	r20,28(sp)
    ab1c:	dcc00615 	stw	r19,24(sp)
    ab20:	dc800515 	stw	r18,20(sp)
    ab24:	dc400415 	stw	r17,16(sp)
    ab28:	dc000315 	stw	r16,12(sp)
    ab2c:	282d883a 	mov	r22,r5
    ab30:	d9000115 	stw	r4,4(sp)
    ab34:	d8800015 	stw	r2,0(sp)
    ab38:	282b003a 	cmpeq	r21,r5,zero
    ab3c:	e4400c17 	ldw	r17,48(fp)
    ab40:	88001226 	beq	r17,zero,ab8c <__call_exitprocs+0xac>
    ab44:	ddc00017 	ldw	r23,0(sp)
    ab48:	88800117 	ldw	r2,4(r17)
    ab4c:	8c802217 	ldw	r18,136(r17)
    ab50:	143fffc4 	addi	r16,r2,-1
    ab54:	80000b16 	blt	r16,zero,ab84 <__call_exitprocs+0xa4>
    ab58:	9027003a 	cmpeq	r19,r18,zero
    ab5c:	a800171e 	bne	r21,zero,abbc <__call_exitprocs+0xdc>
    ab60:	9800051e 	bne	r19,zero,ab78 <__call_exitprocs+0x98>
    ab64:	8409883a 	add	r4,r16,r16
    ab68:	2105883a 	add	r2,r4,r4
    ab6c:	1485883a 	add	r2,r2,r18
    ab70:	10c02017 	ldw	r3,128(r2)
    ab74:	b0c01226 	beq	r22,r3,abc0 <__call_exitprocs+0xe0>
    ab78:	843fffc4 	addi	r16,r16,-1
    ab7c:	00bfffc4 	movi	r2,-1
    ab80:	80bff61e 	bne	r16,r2,ab5c <__call_exitprocs+0x7c>
    ab84:	d8800217 	ldw	r2,8(sp)
    ab88:	10003226 	beq	r2,zero,ac54 <__call_exitprocs+0x174>
    ab8c:	dfc00c17 	ldw	ra,48(sp)
    ab90:	df000b17 	ldw	fp,44(sp)
    ab94:	ddc00a17 	ldw	r23,40(sp)
    ab98:	dd800917 	ldw	r22,36(sp)
    ab9c:	dd400817 	ldw	r21,32(sp)
    aba0:	dd000717 	ldw	r20,28(sp)
    aba4:	dcc00617 	ldw	r19,24(sp)
    aba8:	dc800517 	ldw	r18,20(sp)
    abac:	dc400417 	ldw	r17,16(sp)
    abb0:	dc000317 	ldw	r16,12(sp)
    abb4:	dec00d04 	addi	sp,sp,52
    abb8:	f800283a 	ret
    abbc:	8409883a 	add	r4,r16,r16
    abc0:	88c00117 	ldw	r3,4(r17)
    abc4:	2105883a 	add	r2,r4,r4
    abc8:	1445883a 	add	r2,r2,r17
    abcc:	18ffffc4 	addi	r3,r3,-1
    abd0:	11800217 	ldw	r6,8(r2)
    abd4:	1c001826 	beq	r3,r16,ac38 <__call_exitprocs+0x158>
    abd8:	10000215 	stw	zero,8(r2)
    abdc:	303fe626 	beq	r6,zero,ab78 <__call_exitprocs+0x98>
    abe0:	8d000117 	ldw	r20,4(r17)
    abe4:	9800121e 	bne	r19,zero,ac30 <__call_exitprocs+0x150>
    abe8:	00c00044 	movi	r3,1
    abec:	1c06983a 	sll	r3,r3,r16
    abf0:	90804017 	ldw	r2,256(r18)
    abf4:	1884703a 	and	r2,r3,r2
    abf8:	10000d26 	beq	r2,zero,ac30 <__call_exitprocs+0x150>
    abfc:	90804117 	ldw	r2,260(r18)
    ac00:	1884703a 	and	r2,r3,r2
    ac04:	10000e1e 	bne	r2,zero,ac40 <__call_exitprocs+0x160>
    ac08:	2105883a 	add	r2,r4,r4
    ac0c:	1485883a 	add	r2,r2,r18
    ac10:	11400017 	ldw	r5,0(r2)
    ac14:	d9000117 	ldw	r4,4(sp)
    ac18:	303ee83a 	callr	r6
    ac1c:	88800117 	ldw	r2,4(r17)
    ac20:	a0bfc61e 	bne	r20,r2,ab3c <__call_exitprocs+0x5c>
    ac24:	b8800017 	ldw	r2,0(r23)
    ac28:	147fd326 	beq	r2,r17,ab78 <__call_exitprocs+0x98>
    ac2c:	003fc306 	br	ab3c <__call_exitprocs+0x5c>
    ac30:	303ee83a 	callr	r6
    ac34:	003ff906 	br	ac1c <__call_exitprocs+0x13c>
    ac38:	8c000115 	stw	r16,4(r17)
    ac3c:	003fe706 	br	abdc <__call_exitprocs+0xfc>
    ac40:	2105883a 	add	r2,r4,r4
    ac44:	1485883a 	add	r2,r2,r18
    ac48:	11000017 	ldw	r4,0(r2)
    ac4c:	303ee83a 	callr	r6
    ac50:	003ff206 	br	ac1c <__call_exitprocs+0x13c>
    ac54:	88800117 	ldw	r2,4(r17)
    ac58:	10000b1e 	bne	r2,zero,ac88 <__call_exitprocs+0x1a8>
    ac5c:	89000017 	ldw	r4,0(r17)
    ac60:	20000a26 	beq	r4,zero,ac8c <__call_exitprocs+0x1ac>
    ac64:	b9000015 	stw	r4,0(r23)
    ac68:	90000226 	beq	r18,zero,ac74 <__call_exitprocs+0x194>
    ac6c:	9009883a 	mov	r4,r18
    ac70:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    ac74:	8809883a 	mov	r4,r17
    ac78:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    ac7c:	bc400017 	ldw	r17,0(r23)
    ac80:	883fb11e 	bne	r17,zero,ab48 <__call_exitprocs+0x68>
    ac84:	003fc106 	br	ab8c <__call_exitprocs+0xac>
    ac88:	89000017 	ldw	r4,0(r17)
    ac8c:	882f883a 	mov	r23,r17
    ac90:	2023883a 	mov	r17,r4
    ac94:	883fac1e 	bne	r17,zero,ab48 <__call_exitprocs+0x68>
    ac98:	003fbc06 	br	ab8c <__call_exitprocs+0xac>

0000ac9c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    ac9c:	defffd04 	addi	sp,sp,-12
    aca0:	df000215 	stw	fp,8(sp)
    aca4:	df000204 	addi	fp,sp,8
    aca8:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    acac:	e0bfff17 	ldw	r2,-4(fp)
    acb0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    acb4:	e0bffe17 	ldw	r2,-8(fp)
    acb8:	1005003a 	cmpeq	r2,r2,zero
    acbc:	1000021e 	bne	r2,zero,acc8 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    acc0:	002af070 	cmpltui	zero,zero,43969
    acc4:	00000106 	br	accc <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    acc8:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    accc:	e037883a 	mov	sp,fp
    acd0:	df000017 	ldw	fp,0(sp)
    acd4:	dec00104 	addi	sp,sp,4
    acd8:	f800283a 	ret

0000acdc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    acdc:	defffd04 	addi	sp,sp,-12
    ace0:	dfc00215 	stw	ra,8(sp)
    ace4:	df000115 	stw	fp,4(sp)
    ace8:	df000104 	addi	fp,sp,4
    acec:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    acf0:	e13fff17 	ldw	r4,-4(fp)
    acf4:	000ac9c0 	call	ac9c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    acf8:	003fff06 	br	acf8 <_exit+0x1c>
    acfc:	0000aadc 	xori	zero,zero,683
